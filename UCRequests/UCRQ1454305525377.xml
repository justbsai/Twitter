<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">TmF0YWxpZSAgIHBlcmZvcm0gd2l0aCBOYXRhbGllIG11c2ljIGZyb20gIHNwZWNpYWwgYm9udXMgbXVzaWNhbCBMYXN0IG5pZ2h0ICBsZWdlbmRhcnkgQmlsbHkgT2NlYW4gcGVyZm9ybWVkICBtZWRsZXkgIGdyZWF0ICBoYXZlICBXYXRjaCBCaWxseSBPY2VhbiBzb3VuZHMgQU1BWklORyAgcmVoZWFyc2FscyAgIHNob3cgdG9uaWdodCB3aXRoIHNob3cgUGxheWluZyBGaXJzdCBJbXByZXNzaW9ucyBCcm9saW4gS2F0ZSBNY0tpbm5vbiBtdXNpYyBmcm9tICBsZWdlbmRhcnkgQmlsbHkgT2NlYW4gR2l2ZSAgYmVzdCAgeW91ciBUaGFuayBhbHdheXMgIGZpcnN0ICBzdGVwIFRvbmlnaHQgICBLYXRlICBQYXRyaWNrICBtdXNpYyBmcm9tIEhhcHB5IGRvbmF0aW5nICAgYWJvdXQgZnJpZW5kcyBtYXRjaCBnaXZlIFJ5YW4gRml0enBhdHJpY2sgTGlsbHkgU2luZ2ggbXVzaWMgZnJvbSBQbGF5aW5nIFdvcmQgU25lYWsgd2l0aCBTaG91dCAgICBhbWF6aW5nICBkZXBhcnRtZW50ICBtYWtpbmcgdGhpcyBTdGVwaGVuIEJpc2hvcCBwZXJmb3JtYW5jZSByZWFsbHkgc3BlY2lhbCBncmVhdCB3ZXJlIFJ5YW4gRml0enBhdHJpY2sgIFByaW5jZSBsaXZlIHRoaXMgRnJpZGF5ICAgT3JwaGV1bSAgIE9ybGVhbnMgIHRocnUgb25jZSBzcGVudCAgaG91ciB0cnlpbmcgICAgICAgICB3aGVuICBmaW5hbGx5ICAgIHJlYWxpemVkIEhhc2h0YWcgVHdlZXQgICAgZW1iYXJyYXNzaW5nIHN0b3J5IGFib3V0IHdpbnRlciAgIHdpdGggQ291bGQgTG92aW5nIHRoaXMgYm9vayAgU3RlcGhlbiBCaXNob3AgY29tcGlsYXRpb24gIGhhbmQgd3JpdHRlbiBmaXJzdCBkcmFmdHMgIHN1cGVyIFRvbmlnaHQgICBEYWtvdGEgICBzcGVjaWFsIHBlcmZvcm1hbmNlIGZyb20gU3RlcGhlbiBrbm93ICBsb3ZlIEZyZWQgIGhhdmluZyAgZ3JpbGxlZCBjaGVlc2Ugd2l0aCBUb25pZ2h0ICAgUGxheWluZyAgUXVpeiAgIG11c2ljIGZyb20gUm9tYW5vICBQbHVzIG11c2ljIGZyb20gVG9uaWdodCBTaG93IENlbGVicml0eSBQaG90b2JvbWIgcmV0dXJucyB3aXRoIGhlbHAgZnJvbSBzb21lIFByZXNpZGVudGlhbCBDYW5kaWRhdGUgbXVzaWMgZnJvbSB5b3VyIGhhaXIgIHBsdXMgd3JpdGluZyAgZGlyZWN0aW5nIGVxdWFscyBwZXJmb3JtYW5jZSB0b25pZ2h0ICAgcmVhbCB0aGlzICBIb3BlICBsaWtlIGZpbGwgIHBvb2wgd2l0aCBtb25leSBsaWtlIFNjcm9vZ2UgICBiZWNhdXNlIGNvaW5zIEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyBmdW5ueSAgd2VpcmQgIHdvdWxkICAgICBQb3dlcmJhbGwgICB3aXRoIENvdWxkIFBsYXlpbmcgQ2hhcmFkZXMgcGx1cyBtdXNpYyBmcm9tIFBsYXlpbmcgcGx1cyBzdG9wcyAgZGVtb3MgIGxhdGVzdCB0ZWNoIGZyb20gaW5jcmVkaWJsZSBsYXN0IENoZWNrIFBsYXlpbmcgU3BpbiAgIHBsdXMgV2FnbmVyIGZyb20gTGFzdCBuaWdodCBwcm9tb3MgdHVybmVkIGludG8gIHVucmVoZWFyc2VkIHBlcmZvcm1hbmNlICBMb25nZXN0IHdpdGggV2FpdCB1bnRpbCAgIHdoYXQgaGFwcGVuZWQgZHVyaW5nICBjb21tZXJjaWFsIFRvbmlnaHQgICBtdWNoICB3aXRoIEJpbGx5IEhvbm9yZWQgICBDaG9pY2UgQXdhcmQgIEZhdm9yaXRlIExhdGUgTmlnaHQgVGhhbmsgICAgU3RldmUgSGFydmV5ICBhbm5vdW5jaW5nIEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyAgZW1iYXJyYXNzaW5nIHRoYXQgaGFwcGVuZWQgICBkYXRlICAgd2l0aCBDb3VsZCBzaG93ICBoZXJlICB0YWxrIGdpdmUgIHZlcnkgc3BlY2lhbCBwbHVzIFNpbW1vbnMgc3RvcHMgUHJldmlldyAgIHNob3cgd2VyZSBncmVhdCAgd2VsbCBjb21lIGJhY2sgYmFjayB3aXRoICBwbHVzIG11c2ljIGZyb20gVGhhbmsgICAgbmljZXN0IHBlb3BsZSAgU2VyZW5kaXBpdHkgU3RhcnRpbmcgICBmYW1pbHkgUnVzc2lhbiBSb3VsZXR0ZSAgIG11c2ljIGZyb20gWW91bmcgQ2hvcnVzIFNvbWV0aGluZyBzcGVjaWFsICBtdXNpYyBmcm9tIHlvdXIgdHJ5aW5nICBzdG9wIERhcnRoIFZhZGVyIHRoZW4gZXZlbiBib3RoZXIgVW5sZXNzIE1hdXJ5IFBvdmljaCBGb3J3YXJkIHRoaXMgIHNvbWVvbmUgICBncmVhdCBoZWFkcGhvbmVzICB0ZWxsIHRoZW0gY2FzdCAgICBzaW5nICAgY2FwcGVsbGEgbWVkbGV5ICB0aGVtZXMgeW91ciBUaVZvcyAgRFZScyB0aGlzIHBwcGxheSB0aGlzIHBwcG9kY2FzdCBwcHByb3VkbHkgbXVzaWMgZnJvbSBzb21ldGhpbmcgc2hvdyBUaW5hIG11c2ljIGZyb20gSGFwcHkgQ2F0Y2hwaHJhc2Ugd2l0aCBXaWxsIGhhdmUgIFNsZWlnaCBTY29vdGVyIHJhY2UgU3RyZWFtaW5nICBtb25vbG9ndWUgcmVoZWFyc2FsICBGYWNlYm9vayBMaXZlICAgIHNob3cgcGFnZSAgICBsaXZlIHRoZXJlIHNob3cgbXVzaWMgZnJvbSAgeW91ciBIYXNodGFnIFVwZGF0ZSAgbHlyaWNzICAgZmFtb3VzIENocmlzdG1hcyBzb25nICBtb2Rlcm4gICB3aXRoIENvdWxkIGhvbGlkYXkgcG9wY29ybiBsb3ZlIENocmlzdG1hcyAgIGNvbGxlY3Rpb24gZnJvbSBUaGFua3MgVGhpcyAgR29vZCBQbGF5aW5nIFBpY3Rpb25hcnkgd2l0aCBDbGFpcmUgIEhpZ2dpbnMgeW91ciBvZmZpY2lhbCBIYW5kcyBIaWdoIGdlYXIgd2hhdCBtaWxrICAgICB5b3VyIGJyZWFrZmFzdCBXaG9sZSBQZXJmZWN0IGNvbWVkeSB0aW1pbmcgaGVyZSAgdGFsayBwZXJmb3JtIHdpdGggcGx1cyBzdG9wcyBGb3JjZSBEYWlzeSBSaWRsZXkgICBwbGF5IEZsaXAgQ29uZ3JhdHMgICAgamVyc2V5IHJldGlyZW1lbnQgICBicmVha2luZyBwbGF0ZXMgd2l0aCB1bmNsZSBnYXZlICBzZWFzb24gICAgZmlyc3QgIGRpc2tzIHdlcmUgSGFzaHRhZyBUd2VldCAgIHdvcnN0IGdpZnQgICBzb21lb25lICBrbm93IGV2ZXIgZ2F2ZSAgcmVjZWl2ZWQgICB3aXRoIENvdWxkIHNob3cgQWRhbSBmcm9tIGdvb2QgdGltZSB0YWxraW5nICBIYXJyaXNvbiBGb3JkIGxhc3QgICBTb2xvIGZpZ3VyZSBsdWNreSAgIGFibGUgIHNob3djYXNlICBtdXNpYyAgbWFrZXMgICBkZWJ1dCBuZXh0IFR1ZXNkYXkgSGFycmlzb24gRm9yZCAgZG9pbmcgc29tZXRoaW5nICB3aXRoIG11c2ljIGZyb20gVG9uaWdodCAgICBGb3JjZSBBd2FrZW5zIGRpcmVjdG9yICBtdXNpYyBmcm9tIHN0aWxsICAgaGF2ZSAgICBzaG93IHRvbmlnaHQgdGhhdCAgdGhpbmsgdGhhbmtzIHRoYW5rcyB0aGFua3MgdGhhbmtzIHRoYW5rcyB0aGFua3MgdGhhbmtzIHRoYW5rcyB0aGFua3MgdGhhbmtzIHRoYW5rcyB0aGFua3MgdGhhbmtzIHRoYW5rcyB0aGFua3MgdGhhbmtzIHRoYW5rcyB0aGFua3MgdGhhbmtzIHRoYW5rcyBQbGF5aW5nICBEaWN0aW9uYXJ5IHdpdGggTmF0aGFuICBtdXNpYyBmcm9tICBUb25pZ2h0IFNob3cgc2luZyB3aXRoIENsYXNzcm9vbSBJbnN0cnVtZW50cyBtdXNpYyBmcm9tICAgIENsYXNzcm9vbSBJbnN0cnVtZW50cyB3aXRoIHNob3cgIHN0b3BwaW5nIHBsdXMgIGhlcmUgIHBsYXkgICBMaWVzIG1vcmUgaW1wb3J0YW50bHkgSE9MSURBWSBHSUZUIENvb2tpbmcgc29tZSBzcGVjaWFsICBQbHVzIEJpbGxpZSBmcm9tIHdpdGggR3JhYiAgIGFsd2F5cyBoYXZlICBncmFiIGNvbGxhYm9yYXRpb24gd2l0aCAgaVBob25lIGNhc2UgdGhhdCBkb3VibGVzICAgcG9ja2V0IFJhY2hlbCBtdXNpYyBmcm9tICB5b3VyIEplbm5pZmVyIExhd3JlbmNlICAgc2hhcmUgc29tZSBjbGlwcyBmcm9tICBpbnN0cnVjdGlvbmFsIGRhbmNlIERhbmNlIFdpdGggYXVudCAgIGNvbGxlY3Rpb24gICBuYW1lZCBldmVyeSAgIHRoZW0gYWZ0ZXIgbWVtYmVycyBIYXNodGFnIFR3ZWV0ICBzb21ldGhpbmcgd2VpcmQgIGVtYmFycmFzc2luZyBhYm91dCAgZmFtaWx5IG1lbWJlciAgIHdpdGggQ291bGQgRG9pbmcgc29tZXRoaW5nICB3aXRoIEplbm5pZmVyIHBsdXMgc3RvcHMgICBtdXNpYyBmcm9tIHJhY2UgdGhyb3VnaCBSb2NrZWZlbGxlciBQbGF6YSB3aXRoIHNvbWUgdGVhbW1hdGVzIFJvb25leSAgbXVzaWMgZnJvbSBQbHVzIHNvbWV0aGluZyAgd2l0aCBzb21lIENhdGUgQmxhbmNoZXR0ICAgdHVybiAgaW50ZXJ2aWV3IGludG8gICBGbGlwIFRvbmlnaHQgICBDYXRlICBtdXNpYyBmcm9tIHBsYXkgQ2F0Y2hwaHJhc2UgYWdhaW5zdCAgR2xhc2VyIFBsYXlpbmcgQ2F0Y2hwaHJhc2Ugd2l0aCAgcGx1cyBtdXNpYyBmcm9tICB5b3VyIGRyb3BzICAgVG9tYnN0b25lICBTb21lb25lIHBsZWFzZSBjaGVjayAgc3RpbGwgICBzdHVkaW8gZ29vZCAgIHdoZW4gd2hpcHBpbmcgcHVtcGtpbiBwaWVzIHNob3cgIHN1cnByaXNlcyAgbW9yZSBncmFkdWF0aW9uICAgICBiYW5uZXIgICBzaWRlICAgaG91c2UgIGh1Z2UgcGljdHVyZSAgIHNtaWxpbmcgZmFjZSBIYXNodGFnIFR3ZWV0ICBzb21ldGhpbmcgZnVubnkgIGVtYmFycmFzc2luZyB5b3VyICAgZG9uZSAgIHdpdGggQ291bGQgVG9uaWdodCAgIEphbWVzIGZyb20gICAgVG9uaWdodCBTaG93IFN1Z2dlc3Rpb24gRGFuaWVsIFJhZGNsaWZmZSAgIGhhdmUgIFdhdGVyIFdhdGVyICB3aXRoIERhbmllbCBicmluZ3Mgc29tZSBhbmltYWxzICAgIG11c2ljIGZyb20gVG9uaWdodCAgICBtdXNpYyBmcm9tIGJlc3QgdGltZSB0b25pZ2h0IHdpdGggICAgIGhpbGFyaW91cyBjb21pY3MgICBUaGFuayBmYWtpbmcgIGNhbGxlZCBOaWNlIE1vbnRnb21lcnkgV2FyZCBzaG91dCAgICB0aGlzIFRoYXQgICBDaHJpc3RtYXMgY2F0YWxvZyBldmVyeSBzdHVmZiAgIHNob3cgQ2hyaXN0b3BoIG11c2ljIGZyb20gTWFydGluICBzaGFyZSBzb21lIGNsaXBzIGZyb20gICBzaG93IHdoZXJlIHRoaW5ncyAgIGxpdHRsZSB0ZW5zZSBqdXN0IHRoZXJlIERvaW5nIHNvbWV0aGluZyAgTWFydGluIFBsdXMgU2FvaXJzZSBwZXJmb3JtcyB5b3VyIFRoYW5rcyAgIEluZHVzdHJpYWwgTGlnaHQgIE1hZ2ljICBtb3N0IGFtYXppbmcgbmlnaHQgd29ya2luZyB3aXRoIEluZHVzdHJpYWwgTGlnaHQgTWFnaWMgICBSYWNlIFRocm91Z2ggc2hvdWxkICBpbGxlZ2FsICB5b3VyIHJvb21tYXRlICBsZWF2ZSAgaGVlbCAgYnJlYWQgICBXaGF0ICAgc3VwcG9zZWQgICB3aXRoIHRoYXQgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIGZ1bm55ICBhbm5veWluZyB0aGF0ICB0aGluayBzaG91bGQgICAgIHdpdGggQ291bGQgc2hvdyBjaGFtcHMgZnJvbSBKYWdnZWQgTGl0dGxlIENoaWNrcyBwZXJmb3JtIGZlYXR1cmluZyBzaGFyZSBjbGlwcyBmcm9tICBzb2FwIG9wZXJhIFRvbmlnaHQgICBSYWNoZWwgIG11c2ljIGZyb20gVGhyb3diYWNrICAgICBiYW5kYWdlZCBTb21lIHRoaW5ncyBuZXZlciBndXlzICBoYXZlICAgVGhhbmsgUGxheWluZyBXaGVlbCAgSW1wcmVzc2lvbnMgdGFsayBtdXNpYyB3aXRoIGhpcmVkICBzY2llbnRpc3QgIGZpbmQgIGV4YWN0bHkgd2hhdCAgIFdpbGwgYmVhcmQgRHJldyBib29rICAgIGdvb2QgcmVhZCAgbWVudGlvbmVkIHNob3cgV2lsbCBGb3J0ZSAgbXVzaWMgZnJvbSBTYW5kcmEgQnVsbG9jayAgIHVzZWQgICAgIENhbmFkaWFuIHNvYXAgb3BlcmEgY2FsbGVkIFBhdGllbmNlIEluc3RlYWQgICBob3VzZSAgIG5laWdoYm9yaG9vZCB1c2VkICBoYW5kICBjb3Vwb25zICAgZGlzY291bnQgIHNub3cgSGFzaHRhZyBUd2VldCAgIGZ1bm55ICBlbWJhcnJhc3NpbmcgdGhpbmcgdGhhdCBoYXBwZW5lZCAgICBIYWxsb3dlZW4gICB3aXRoIENvdWxkIFRvbmlnaHQgICBEb2luZyBzb21ldGhpbmcgIHdpdGggU2FuZHJhIEJ1bGxvY2sgICBoZXJlICB0YWxrIFBsYXlpbmcgIFF1aXogd2l0aCBQbGF5aW5nICBRdWl6IHdpdGggICBtdXNpYyBmcm9tIGhlcmUgICBhbWF6aW5nICBpbmR1Y3QgICBwcmVzdGlnaW91cyBQaGlsYWRlbHBoaWEgV2FsayAgRmFtZSBtdXNpYyBmcm9tICBzb21ldGhpbmcgIHdpdGggRHJlYW1zIHJlYWxseSAgY29tZSBOb3RoaW5nIHRoYXQgICBiYW5kIGFpZHMgVGhhbmsgICAgbWFraW5nICBwYXJhZGUgICBzbW9vdGggIHBvc3NpYmxlIHdoaWxlIGJlaW5nIFRvZGF5ICB3aWxsICByZWNlaXZpbmcgIEVsbWVyIEF3YXJkIGZyb20gIEhhcnZhcmQgdG9tb3Jyb3cgIHdpbGwgUGxlYXNlIGFkdmVudHVyZSAgaGF2ZSBhcnJpdmVkICAgICBmYXZvcml0ZSBjaXRpZXMgVGhpcyBzZWVtcyBIb25vcmVkICAgaW5kdWN0aW5nIGludG8gY2FzZSB0aGF0IGxpbmsgd29yayAgY29tbWVyY2lhbCBCcnVjZSBXaWxsaXMgIHBsYXlpbmcgIFJ1c3NpYW4gUm91bGV0dGUgcGVyZm9ybXMgcmVhZCAgc2NyaXB0cyB3cml0dGVuICBraWRzIGdyZWF0ICB3aXRoICBvcGVuaW5nIGNvdXJzZSB5b3VyIHNvbmcgIGdyZWF0ICBjb25ncmF0cyBUaGVhdGVyIHJldHVybnMgUGx1cyAgcGVyZm9ybXMgeW91ciBEb25hbGQgVHJ1bXAgIENhcnNvbiBoYXZlICBwaG9uZSBjYWxsIHdoaWxlIHdhdGNoaW5nIHJlYWR5ICAgc2hvdyBmcmllbmQgYnJva2UgIHdpdGggIFRvbGQgICAgaGF0ZWQgIGdvdHRlbiBiYWNrIHRvZ2V0aGVyICBkYXlzIEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyBkdW1iICBlbWJhcnJhc3NpbmcgICB3aXRoIENvdWxkIExJVkUgIHNoYWRvd3MgIGdldHRpbmcgcmVhZHkgICBzaG93IFRvbmlnaHQgICAgRGllc2VsICB0YWxrIHBlcmZvcm1hbmNlIGZyb20gcGxheSAgIGZvdXIgcGVyc29uICBob2NrZXkgc2hvdyAgcGx1cyBWaWNlIFByaW5jaXBhbCAgIHJlYWQgIG1vcm5pbmcgYW5ub3VuY2VtZW50cyBDbGl2ZSBPd2VuICBkb2luZyBzb21ldGhpbmcgIHdpdGggUGljdGlvbmFyeSAgIG11c2ljIGZyb20gUGx1cyBwbGF5ICBXaGlzcGVyIENoYWxsZW5nZSBsb3ZlICB0aGVtIGZyaWVuZCBNYXJsYSBSb3dhbiBhbHdheXMgc2VuZHMgIGF3ZXNvbWUgcmVjaXBlcyBldmVyeSBUaGlzIE1pY2hhZWwgbXVzaWMgZnJvbSAgeW91ciBwYXJ0eSAgIGFwYXJ0bWVudCAgc29tZW9uZSB0dXJuZWQgICBzdG92ZSB0aGVuIHB1bGxlZCAgICBrbm9icyBIYXNodGFnIFR3ZWV0ICAgZnVubnkgIHdlaXJkIHN0b3J5IGFib3V0ICAgcGFydHkgIHdlbnQgICBjb2xsZWdlICAgQ291bGQgUGF1bCB3aXRoICB2b2NhbHMgUGF1bCBNY0NhcnRuZXkgIFBpcGVzICBQZWFjZSAgdmVyc2lvbiAgICAgd2hlcmUgTWljaGFlbCBUb25pZ2h0IFBob25lIEJvb3RoIHRyaXZpYSBnYW1lIHJldHVybnMgd2l0aCAgc29tZSBzcGVjaWFsIGhvbm9yICBoaXR0aW5nIG1pbGxpb24gIFR3aXR0ZXIgdGhhbmsgR29pbmcgb3ZlciAgY2FyZHMgU2hvdXQgICAgIGZhbnMgIEhvbm9yZWQgICBzdGVhbGluZyBoZWFydHMgb3ZlciBIYXBweSBUcnVlIENvbmZlc3Npb25zICBoZXJlIGhhdmUgIHZlcnkgZW1vdGlvbmFsIGludGVydmlldyBzaG93ICBQbHVzICBSb2Nrd2VsbCBzdG9wcyBwZXJmb3JtcyAgeW91ciBCbGFjayBTaW1vbiBHYXJmdW5rZWwgc2luZyBGZWVsICB3aXRoICByZWFsIGZyaWVuZCBzbGVwdCAgIFdoZW4gIGxhaWQgZG93biAgZmVldCB3b3VsZCBzdGljayBIYXNodGFnIFR3ZWV0ICBzb21ldGhpbmcgZnVubnkgIHdlaXJkIGFib3V0ICBmaXJzdCBhcGFydG1lbnQgIGxpdmVkICAgd2l0aCBDb3VsZCBUb25pZ2h0ICAgSnVsaWFubmEgIHRlYW0gZnJvbSAgIFRvbmlnaHQgU2hvdyBTdWdnZXN0aW9uIExpZXMgd2l0aCBUb25pZ2h0ICAgIHN0b3AgcGljcyBqdXN0ICBzaG93IEp1c3QgZm91bmQgICAgIGxvZ28gIEZyZWUgU29tZXRoaW5nICBIYXJkd2ljayAgcGVyZm9ybXMgeW91ciBXb3JraW5nICBHb29kIEJ1cmdlciBLZW5hbiBUaG9tcHNvbiB0aGluayB0aGF0ICBteXNlbGYgIHNwYWNlIGhlYXRlciBCZWNhdXNlICBkb3JtIGxpa2UgIGZyZWV6ZXIgSGFzaHRhZyBUd2VldCAgIGZ1bm55IHNvbmcgbHlyaWMgIHNvbmcgdGl0bGUgYWJvdXQgIGZhbGwgICB3aXRoIENvdWxkIFRvbmlnaHQgICBKYW1lcyBTcGFkZXIgIHN0b3BzIGZyb20gIHNvbWUgc3VycHJpc2UgQ2hlY2sgICBsYXRlc3QgRGlnaXRhbCBTcGVjaWFsIHRoYW5rcyB3ZWxsIHdlbGwgd2VsbCBlZGl0ZWQgIHdlbGwgZGlyZWN0ZWQgc2tldGNoICBhYm91dCAgU3BlY2lhbCBBbm5lIG11c2ljIGZyb20gIHByZW1pZXJpbmcgICBEaWdpdGFsIFBsYXlpbmcgU2xhcEphY2sgdGFsa2luZyAgUHJlc2lkZW50aWFsIGNhbmRpZGF0ZSAgbXVzaWMgZnJvbSBCZXN0ICBsdWNrICAgZGlyZWN0b3IgRGF2ZSBEaW9tZWRpIHRvbmlnaHQgICAgbG92ZSBvb29oICAgQWN0dWFsbHkgIGd1YXJhbnRlZXMgQW5keSAgc3RhbmRpbmcgIGFmdGVyICBicmVhayBUaGFua3MgICBoYXBweSBiaXJ0aGRheSBiZWVuICBiZXN0IFRvZGF5ICAgRXZlcnlvbmUgcGxlYXNlIHRha2UgdGhhdCAgc2NlbmUgZnJvbSAgICAgZmF2b3JpdGUgcGxlYXN1cmUgICAgIGNvdmVyICBQcm9wcyAgcGhvdG9ncmFwaGVyIFJ1dmFuIGp1c3QgdG91Z2ggTm90aGluZyBzaG93IGZyb20gRG9uYWxkIFRydW1wIGNhbGxzIGJlZm9yZSAgYXBwZWFyYW5jZSAgc2hvdyB3ZWFyaW5nICAgc3dlYXRlciAgbGVhbmVkIGFnYWluc3QgICBjaGFsayAgb3ZlciAgICB0b2xkIEhhc2h0YWcgYmFjayAgc2Vzc2lvbiB0d2VldCAgIGZ1bm55IHN0b3J5IHRoYXQgaGFwcGVuZWQgICAgc2Nob29sIFByZXNpZGVudGlhbCBjYW5kaWRhdGUgIHBsdXMgRGFrb3RhIEpvaG5zb24gc3RvcHMgUGxheWluZyBXaGVlbCAgTXVzaWNhbCBJbXByZXNzaW9ucyB3aXRoICB2ZXJ5IHRhbGVudGVkIFJvYmVydCAgTmlybyAgdGFsa2luZyB3aXRoIHJlbWVtYmVyIHRoYXQgbmV2ZXIgZm9yZ2V0ICBzZWNvbmQgIHdvcmtpbmcgd2l0aCBUaGFua3MgaGFwcGVuaW5nICAgVG9uaWdodCBzaG93IGxvb2tpbmcgVG9uaWdodCAgIEJlbmljaW8gICBtdXNpYyBmcm9tIHN0YXJzIHJlYWQgdGhlaXIgICBTdXBlcmxhdGl2ZXMgUGxheWluZyAgIGdhbWUgd2l0aCAgaGVyZSAgdGFsayBTeW5jIEJhdHRsaW5nIGFnYWluc3QgIGluY3JlZGlibGUgbGFzdCBuaWdodCBIaXN0b3J5ICAgd2l0aCBwcm91ZCAgVGhhbmsgIGV2ZXJ5b25lIHRoYXQgd29ya3MgIGhhcmQgZXZlcnlkYXkgbWludXRlcyAgdGVsbGluZyAgSGlzdG9yeSAgIEVsbGVuICBTeW5jIE1hY2tsZW1vcmUgUnlhbiBjaGFsbGVuZ2VkICAgICBzeW5jIGJhdHRsZSAgICBoYXZlICBjaG9vc2UgZnJpZW5kcyAgY29uZ3JhdHMgIHlvdXIgZmlyc3Qgc2hvdyAgaG9wZWZ1bGx5IGRvemVucyBCcmVhayBUb25pZ2h0ICAgUmljaGFyZCBtdXNpYyBmcm9tICAgVG9uaWdodCBTaG93IFBsYXlpbmcgRmFtaWx5IEZldWQgIHBsdXMgcGVyZm9ybXMgVG9uaWdodCAgIEphc29uIFN1ZGVpa2lzICBzdG9wcyBtdXNpYyBmcm9tICB5b3VyIGNvbGxlZ2Ugcm9vbW1hdGUgZmluaXNoZWQgYmFraW5nICAgc2FpZCBsb29rcyAgbGlja2VkICBlbnRpcmUgSGFzaHRhZyBUd2VldCAgIHdlaXJkICBlbWJhcnJhc3Npbmcgc3RvcnkgYWJvdXQgIHJvb21tYXRlICAgd2l0aCBDb3VsZCBEb2luZyBzb21ldGhpbmcgIHdpdGggdGhlbiBwZXJmb3JtaW5nIFBsdXMgYmVsaWV2ZSBhbG1vc3QgICAgc3VtbWVyICBqdXN0IGZpbmRpbmcgIGFib3V0IGNob2NvbGF0ZSBtaWxrIEVsbGUgIG11c2ljIGZyb20gUGx1cyB0YWxraW5nICB0cmFpbiBoZXJvIEFudGhvbnkgVG9uaWdodCBTaG93IHN0YXJ0aW5nIGJhY2sgd2l0aCAgR292ZXJub3Igc3RvcHMgcGx1cyBtdXNpYyBmcm9tIENoaXBwZWQgZnJvbnQgdG9vdGggdHJ5aW5nICBvcGVuIHR1YmUgIHNjYXIgdGlzc3VlIHJlcGFpciAgIHJlY292ZXJpbmcgZmluZ2VyIHNob3cgcGx1cyBtdXNpYyBmcm9tIGZyaWVuZCAgICB3aG9zZSBob3JuIGhvbmtlZCAgcmFuZG9tICB3b3VsZCB5ZWxsICAgd2luZG93IGV2ZXJ5IEhhc2h0YWcgVHdlZXQgICBmdW5ueSAgd2VpcmQgc3RvcnkgYWJvdXQgIHJvYWQgdHJpcCB0YWtlbiAgIHdpdGggQ291bGQgUGxheWluZyAgIExpZXMgd2l0aCBwbHVzIERhdmlkIE95ZWxvd28gc3RvcHMgcGxheSBGYXN0IEZhbWlseSBGZXVkIFBsYXlpbmcgIFJ1c3NpYW4gUm91bGV0dGUgRnJhbiBMZWJvd2l0eiAgaGVyZSAgIHBlcmZvcm1hbmNlIGZyb20gSGFwcHkgUGxheWluZyAgcmVhbGx5ICAgZ2FtZSBwbHVzIHN0b3BzICBmcm9tIEhhc2h0YWcgVHdlZXQgICBmdW5ueSAgZW1iYXJyYXNzaW5nIHRoaW5nIHRoYXQgaGFwcGVuZWQgICAgc3VtbWVyIGNhbXAgICB3aXRoIENvdWxkIEhlbnJ5IG11c2ljIGZyb20gICBBdWRpZW5jZSBTdWdnZXN0aW9uIEtyaXN0ZW4gU3Rld2FydCAgICAgICB3b3JkIGFzc29jaWF0aW9uIGdhbWUgV29yZCBQbGF5ZWQgICBnYW1lICBDYXRjaHBocmFzZSB3aXRoICBIaWdnaW5zIFRvbmlnaHQgICBDYXRjaHBocmFzZSB3aXRoICAgTHVrZSBQbGF5aW5nICBRdWl6IHdpdGggdGhhdCAgTmlnaHQgIG5hbWUgUGxheWluZyAgICBnYW1lIHdpdGggIENocmlzdG9waGVyIENyb3NzIHBlcmZvcm1zIFN0aWxsIEV2ZW4gd29yc2UgR2V0dGluZyAgcGluZ3MgdGhhdCBzaG9vdCAgIE5vdGhpbmcgICAgbGl2ZSB0aHJvdWdoIGZyaWVuZCB3b3JrZWQgICAgICB0cm91YmxlICByZWFkaW5nIG9yZGVycyBiYWNrICB0aGVtICBEYXJ0aCBIYXNodGFnIFR3ZWV0ICAgd2VpcmRlc3QgIHdvcnN0IHN1bW1lciAgIGV2ZXIgICAgd2l0aCBDb3VsZCBUb25pZ2h0ICAgTWFtaWUgIG11c2ljIGZyb20gIE5pZ2h0IEhvbm9yZWQgIGhhdmUgY29tZWR5IGxlZ2VuZCB2aXNpdCAgc2hvdyBsYXN0IG5pZ2h0IE9rYXkgIFJpY2tsZXMgIFRoaXMgbW9zdCBjYXJpbmcgcGVvcGxlICBoYXZlIFRoYW5rICAgYWxzbyBiZWluZyBQcmVzaWRlbnQgT2JhbWEgY2FsbHMgRG9uYWxkIFRydW1wIHdpdGggYWR2aWNlIGJlZm9yZSAgZmlyc3QgIGRlYmF0ZSBNZXJ5bCBTdHJlZXAgIFBsdXMgSmVycm9kIENhcm1pY2hhZWwgc3RvcHMgICBtdXNpYyBmcm9tIEp1c3QgIE1pc3Npb24gUm9ndWUgTmF0aW9uICBzZWNvbmQgU3VwZXIgQ2hyaXN0b3BoZXIgQWRhbXMgICBEb29iaWUgQnJvdGhlcnMgTWljaGFlbCBNY0RvbmFsZCAgIFRhcGUgTW9udGggRnVsbCBUb25pZ2h0IFNob3cgTW9vbiAgbWFrZSAgbG9nbyBIYXBweSBUdW5lIGludG8gICBoZWFyIHNvbWUgZ29vZCBqb2tlcyAgZ3Jvb3Z5IERvaW5nIHNvbWV0aGluZyAgc3RvcHMgZnJvbSBzaGFyZXMgbW9yZSAgIHZvaWNlIG92ZXIgd29yayBncmVhdCAgIHNob3cgbGFzdCBDaGVjayAgIGlUdW5lcyBUb25pZ2h0ICAgbXVzaWMgZnJvbSAgeW91ciBQbGF5aW5nIFdvcmQgU25lYWsgd2l0aCBzaXR0aW5nIG5leHQgICAgIGdhdGUgIGVhdGluZyBjb3JuICAgbGlja2VkIGVhY2ggaW5kaXZpZHVhbCBmaW5nZXIgYWZ0ZXIgZXZlcnkgSGFzaHRhZyBUd2VldCAgIGZ1bm55ICB3ZWlyZCB0aGluZyB0aGF0IGhhcHBlbmVkICAgICBhaXJwb3J0ICAgd2l0aCBDb3VsZCBUb25pZ2h0ICAgUGxheWluZyBXb3JkIFNuZWFrIHdpdGggIFNlZGFyaXMgc3RvcHMgRHJ1bmsgIFdlYXNsZXkgcmV0dXJucyAgIFRvbmlnaHQgVGhhbmtzIHRoYW5rcyAgIHNob3V0ICAgdGhpcyBQbGF5aW5nIEluZmxhdGFibGUgRmxpcCAgd2l0aCBwbHVzICBoZXJlICBtdXNpYyBmcm9tIENvbWUgIHdlc3QgIGxvdmUgd29ydGggICAgbW9zdCAgIHN5bmMgYmF0dGxlcyB0aGF0IEdvb2QgU3luYyBCYXR0bGUgIG1pbnV0ZXMgICAgIFdhdGNoIHJpZ2h0IFJvb3QgU3RheSAgIGFub3RoZXIgaGFsZiAgICBDcnVpc2UgIFN5bmMgYnJvdWdodCBUaGFuayAgQWx3YXlzIFRvbmlnaHQgICAgIGhhdmUgICBTeW5jIFBsdXMgRGljayBDYXZldHQgc3RvcHMgVGhhbmsgICAgIGFsbW9zdCBoYXBwZW4gbGFzdCBleHBsYWluIHRvbmlnaHQgaGF2ZSAgb3BlbiBpbnZpdGF0aW9uICAgQWx3YXlzICBwbGF5aW5nIHdpdGggbXVzaWMgZnJvbSAgIHlvdXIgcGxheSAgZHVldCB3aXRoICB3b3JraW5nIGhhbmRzIFNlZWluZyAgIHNlY29uZHMgICAgdGhhdCB0aGV5ICAgICAgZmluZCBHdWFjIHNob3VsZCAgZnJlZSAgQ2hpcG90bGUgICAgY29ycmVjdGx5IHByb25vdW5jZSBIYXNodGFnIFR3ZWV0ICAgb3BpbmlvbiB0aGF0IGp1c3QgZ290dGEgICB5b3VyIGNoZXN0ICAgd2l0aCBDb3VsZCBtdXNpYyBmcm9tICAgICBBdWRpZW5jZSBTdWdnZXN0aW9uIFBsYXlpbmcgU2xhcGphY2sgd2l0aCBKYWtlIHBsdXMgIGhlcmUgRmxpcCB3aXRoIHNob3cgIEZsaXAgd2l0aCBwbHVzIHRhbGsgZnJvbSBIYXBweSBUb25pZ2h0ICAgIGZyb20gVGhpcyAgICBMb3ZlIFRha2UgICBwYXNzIENvbWluZyAgcmlnaHQgICAgICBtb3N0ICB0aGluZ3MgZXZlciBkb25lIHByb3VkICAgVG9uaWdodCBTaG93IHRlYW0gICB0aHJlZSBTb21ldGhpbmcgIHdpdGggQmlsbCBwbHVzICBwZXJmb3JtcyAgeW91ciBoYXZlICB2ZXJ5IGVtb3Rpb25hbCBpbnRlcnZpZXcgc2xpcHBlZCAgIGJyYWlkZWQgY2F1Z2h0ICByaW5nICAgdGFibGUgIGFsbW9zdCBsb3N0IEhhc2h0YWcgVHdlZXQgICBmdW5ueSAgZW1iYXJyYXNzaW5nIGluanVyeSB0aGF0IGhhcHBlbmVkICAgICB3aXRoIENvdWxkIFRvbmlnaHQgICBzdGFyICBzdG9wcyAgIG11c2ljIGZyb20gVGluYSAgICBwZXJmb3JtcyAgeW91ciBUb25pZ2h0ICAgIHBsYXlpbmcgc29tZXRoaW5nICB3aXRoIFRpbmEgY3JhenkgIGNvbW1vbiAgQWR1bHRzICBraWRzIFRoYW5rcyBhZ2FpbiAgICAgIHBsZWFzZSBnb29nbGUgICBoYXZlICBpZGVhICAgIHdlZGRpbmcgYmFjayB3aXRoICBSZWFsbHkgIHNob3cgUGF1bCBSdWRkICBwbHVzICAgbXVzaWMgZnJvbSBFeGNpdGVkICBoYXZlIFRvbmlnaHQgU2hvdyByZXR1cm5zIHRvbW9ycm93IHdpdGggUGF1bCBSdWRkIG1pZ2h0IGNhbWVvICBlcGlzb2RlICAgIFNlaW5mZWxkICBtZWFuIFNwb2lscyBCZWZvcmUgICBtaWdodCAgbWVhbiBZb3VyIEZpcnN0IFdvcmQgV2lsbCAgRGFkYSAgICB3ZWVrICAgIHB1Ymxpc2hlcnMgICBoYXBweSB0aGluayBpbnZlbnRlZCAgIHR5cGUgIHdlZGRpbmcgbGl0dGxlIFN0b3J5ICBjb21lIHdoZW4gbG9va2luZyBUaGFuayAgIHRoZXNlIGdyZWF0IGRvY3RvcnMgIG51cnNlcyBkb2luZyB3ZWxsICB0aGFua3MgIGdvb2Qgd2lzaGVzIFRyaXBwZWQgIGNhdWdodCAgZmFsbCBSaW5nIGNhdWdodCAgc2lkZSAgdGFibGUgYWxtb3N0IHJpcHBlZCAgZmluZ2VyIFBsYXlpbmcgICBnYW1lIHdpdGggUGx1cyBNb3JyaXNzZXkgcGVyZm9ybXMgIHlvdXIgaGF2ZSAgQnJhaW5zdG9ybSBIYXNodGFnIFR3ZWV0ICAgZnVubnkgIGVtYmFycmFzc2luZyBlbWFpbCBtaXN0YWtlIHRoYXQgaGFwcGVuZWQgICAgIHdpdGggQ291bGQgUGVyZm9ybWluZyBzb21lICBUaGVhdGVyIHdpdGggUGVyZm9ybWluZyAgVGhlYXRlciB3aXRoIHN0b3BzICBtdXNpYyBmcm9tIFdoZWVsICBJbXByZXNzaW9ucyB3aXRoIFRvbmlnaHQgICBQbGF5aW5nIFdoZWVsICBJbXByZXNzaW9ucyB3aXRoIEFtYmVyIEhlYXJkICAgbXVzaWMgZnJvbSBIYXBweSBIYXBweSAgICBtYW55IGRhZHMgcmVhZGluZyAgdGhlaXIgY2hpbGRyZW4gIEhhdmUgU2Vjb25kIE1vdmllIFN1bW1hcmllcyB0YWxraW5nICBtdXNpYyBmcm9tIHdpdGggQ29saW4gRmFycmVsbCAgVmluY2UgVmF1Z2huIFdoYXQgIEphbWVzIFRheWxvcnMgICBXcml0ZSAgdGhlc2lzIHBhcGVyICAgICBmYXZlcyAgIGJsb2cgUGxheWluZyAgICBnYW1lIEphc29uIFNjaHdhcnR6bWFuIHN0b3BzIGNvb2tpbmcgd2l0aCAgeW91ciBmdW5uaWVzdCBvbmNlIGRyaW5rICBoYXZlIGNvZmZlZSAgICBEaWV0ICB0aGVuIEhhc2h0YWcgVHdlZXQgICAgZW1iYXJyYXNzaW5nIHRoaW5nIHlvdXIgICBzYWlkICAgd2l0aCBDb3VsZCBzaG93IEFsYW4gIG11c2ljIHNvbWV0aGluZyAgd2l0aCBUaGFua3MgICBoZWxwaW5nICBTbG93ICAgTmV3cyBsYXN0IG5pZ2h0IExpdmUgICAgc2hvdCAgbGl2ZSB0b2RheSAgIHN0aWxsICBKdXN0ICBsaXZlIExpdmUgc2hvdyB0aGlzIGV2ZW5pbmcgd2l0aCBCaWxseSBDcnlzdGFsIFBsdXMgUmVwdWJsaWNhbiBQcmVzaWRlbnRpYWwgQ2FuZGlkYXRlIG11c2ljIGZyb20gcmVhZCB5b3VyIGJlc3QgZmlyc3QgdGV4dHMgT25seSAgd2VlayBsZWZ0IHVudGlsIFRvbmlnaHQgICAgc3RvcHMgIG11c2ljIGZyb20gd2FpdCAgIGV2ZXJ5b25lICAgQmFybmVzICBOb2JsZSAgVW5pb24gU3F1YXJlIHRvZGF5IFN5bmMgQmF0dGxlIFBsdXMgdGFsayBzdGFuZHVwIGZyb20gZWRpdGlvbiAgVG9uaWdodCBTaG93IFN1cGVybGF0aXZlcyB3aXRoICBwbGF5ZXJzIHNob3cgdG9uaWdodCBwbHVzIHN0b3BwaW5nIHBsdXMgcGVyZm9ybXMgIHlvdXIgd2lzaCAgdHJhbnNwb3J0YXRpb24gICAgICBzdHVjayB3aXRoICBGb3JkIEhhc2h0YWcgVHdlZXQgICBmdW5ueSAgYWJvdXQgZGlub3NhdXJzICAgd2l0aCBDb3VsZCBUb25pZ2h0ICAgbXVzaWMgZnJvbSAgVG9uaWdodCBTaG93IFN1Z2dlc3Rpb24gc2hvdyBTaW5naW5nIE5vbnNlbnNlIEthcmFva2Ugd2l0aCAgTW9sbHkgIG11c2ljIGZyb20gRm91bmQgICAgbGFzdCBTY3JlZW5ncmFicyBMYXJyeSBEYXZpZCBUcmlwbGUgQ3Jvd24gam9ja2V5IFZpY3RvciBtdXNpYyBmcm9tIFBsYXlpbmcgQ2F0Y2hwaHJhc2Ugd2l0aCBwbHVzIG11c2ljIGZyb20gSmFzb24gU3RhdGhhbSAgIHBsYXkgIGdhbWUgIGJsYWNramFjayB3aXRoIGhpZ2hlciBzdGFrZXMgbGVhZGluZyAgY29uZ2EgTWlkd2F5IHRocm91Z2ggICByZWFsaXplZCAgIGp1c3QgICAgb3RoZXIgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nICBlbWJhcnJhc3NpbmcgdGhhdCBoYXBwZW5lZCAgIHdlZGRpbmcgICB3aXRoIENvdWxkIFRvbmlnaHQgICBkb2luZyBzb21ldGhpbmcgIHdpdGggSmFzb24gcGx1cyAgaGVyZSAgZnJvbSBKdWRlICAgIHBsYXkgIHJvdW5kICBQb29sIEJvd2xpbmcgSnVkZSBCcnljZSBEYWxsYXMgIG11c2ljIGZyb20gRmxvcmVuY2UgIE1hY2hpbmUgc2lkZSAgY292ZXJpbmcgaGVhdnkgbWV0YWwgRXhjaXRlZCAgIGJhY2sgd2l0aCAgc2hvd3Mgd2lsbCAgcGx1cyB0YWxrIG11c2ljIGZyb20gZXhjaXRlZCAgaGVyZSBEb2luZyBzb21ldGhpbmcgcmVhbGx5IER3YXluZSBKb2huc29uICAgZ2l2ZSBhZHZpY2UgICBncmFkdWF0aW5nIGNsYXNzIFBsZWFzZSAgICB3ZWxjb21lICAgIHBhbHMgRnJpZW5kICBtYW55IER3YXluZSBKb2huc29uICBQbHVzIHBlcmZvcm1zIHlvdXIgYmVzdCBPbmNlIGhlYXJkICBsaXR0bGUgSGFzaHRhZyBUd2VldCAgIHNvbmcgbHlyaWMgdGhhdCAgICBmcmllbmQgIHdyb25nICAgd2l0aCBDb3VsZCBwbGF5aW5nICBzcGVjaWFsIHZlcnNpb24gIHBlcmZvcm1zIHBsYXkgIE11c2ljYWwgYWJzb2x1dGVseSBicmlsbGlhbnQgbXVzaWNhbCBpbXByZXNzaW9ucyAgd2F0Y2hpbmcgc2hvdyBQbGF5aW5nIFdoZWVsICBNdXNpYyBJbXByZXNzaW9ucyB3aXRoIHBsdXMgc3RvcHMgVG9uaWdodCBzaG93ICAgcGVyZm9ybWFuY2UgZnJvbSBUYWxrIG11c2ljIHNvbWV0aGluZyAgd2l0aCAgc3RvcHBpbmcgIHlvdXIgcGxheSAgV2hpc3BlciBDaGFsbGVuZ2UgV2hlbiAgICAgIHdhbGtlZCAgICAgc3luY2luZyAgUGF1bCBIYXNodGFnIFR3ZWV0ICBzb21ldGhpbmcgIGVtYmFycmFzc2luZyAgIGNhdWdodCBkb2luZyAgIHdpdGggQ291bGQgVG9uaWdodCAgIERvaW5nIHNvbWV0aGluZyAgd2l0aCBQbHVzICBoZXJlIGhhdmUgICBSdXNzaWFuIFJvdWxldHRlIHNob3dkb3duIHBsYXkgIFdpbGwgICAgRmluZCAgICAgIHdpbGwgcGVyZm9ybWFuY2UgdG9uaWdodCAgICAgIHJlYWwgc2hvdyBQbGF5aW5nICBSdXNzaWFuIFJvdWxldHRlIHN0b3BzICBtdXNpYyBmcm9tIFRyeWluZyBzb21ldGhpbmcgIHdpdGggUGx1cyAgcGVyZm9ybXMgICBUb25pZ2h0IFNob3cgeW91ciAgcGVyZm9ybWluZyAgc29uZ3MgIHNrZXRjaGVzICBpbnRlcnZpZXdzIFRvbmlnaHQgIGJyaW5nIEJvbm8gYmFjayBUb25pZ2h0ICAgbXVzaWMgZnJvbSAgeW91ciBIYXNodGFnIFR3ZWV0ICAgZnVubnkgIHdlaXJkIHRoaW5nIHlvdXIgIHNhaWQgICB3aXRoIENvdWxkIENoZWNrICBmcm9tIHByb2R1Y2VyIEhpbGFyaW91cyBGbGlwIHdpdGggUGx1cyBzdG9wcyBUb25pZ2h0ICAgSmFtZXMgIG11c2ljIGZyb20gSmFjayBCbGFjayAgcmVjcmVhdGUgVGhhbiBtdXNpYyB2aWRlbyBMYXN0IG1pbnV0ZSAgc2Vzc2lvbiB3aXRoIHRoZXkgaGF2ZSAgVG9uaWdodCBEb3VnaCBzaG93IEphY2sgIGZyb20gSmVmZiBHYXJsaW4gQ29uZ3JhdHMgICAgQ29tZWR5IENlbnRyYWwgc2hvdyB0b25pZ2h0ICAgIHNvb28gcHVwcGllcyB3ZXJlIENvbmdyYXRzIEFtZXJpY2FuIFBoYXJvYWggSGFwcHkgSmVzc2UgIG11c2ljIGZyb20gQWxzbyBjYW1lbyAgIGZpcnN0IGZpdmUgbWludXRlcyBKaW1teSAgYmVzdCB0YWxrIHNob3cgaG9zdCBQbGVhc2UgIHByb3BlciAgYmV0dGVyIHRoYW4gQmx1ciAgICBzaG93IHRvbmlnaHQgICAgYWxidW0gICAgTWFnaWMgUGxheWluZyAgIExpZXMgUGx1cyBtdXNpYyBmcm9tIHlvdXIgdHdlZXRzIGxvb2tpbmcgICBiZXN0IGJ1cnJpdG8gICBsb29rICBNaXNzaW9uIENhbnRpbmEgb25jZSAgaW50byAgYXJndW1lbnQgd2l0aCAgZnJpZW5kIGFib3V0IHdoZXRoZXIgIEZyYW5rbGluICBwcmVzaWRlbnQgICB0ZXJtICAgIG5ldmVyIEhhc2h0YWcgVHdlZXQgICBzdG9yeSBhYm91dCAgZnVubnkgIGVtYmFycmFzc2luZyBmaWdodCAgICB3aXRoIENvdWxkIEtyaXN0ZW4gVGhvbWFzIG11c2ljIGZyb20gICBQdXBweSBQcmVkaWN0b3JzIGRlY2lkZSAgS2VudHVja3kgSGF3a2V5ZSB3YW50cyAgIGtub3cganVzdCAgc3VwZXIgICByZXN0IExhc3QgdGVhc2UgIEZhbGxvbiAgICBUaGFua3MgQmx1ciBhbGJ1bSAgVGhleSAgICBzaG93IFRoYXQgVG9uaWdodCAgIEplcmVteSBSZW5uZXIgRWRpZSBwbHVzIG11c2ljIGZyb20gVGhhbmsgICBsZXR0aW5nICBmaWxtICAgY29tbWVyY2lhbCAgIFRvbmlnaHQgVG9uaWdodCBTaG93IFByb21vIFNob290IGhhdmUgIHZlcnkgZW1vdGlvbmFsIGludGVydmlldyBGcmFuICBtdXNpYyBmcm9tIFRlZHp5ICAgaVR1bmVzIFJlbGVhc2luZyBBbmRyb2lkIHZlcnNpb24gdmVyeSBUZWR6eSBoaWdoIFBvc3QgdGhlbSB3aXRoIFJlbWluZGVyICAgIGZyZXNoICBzaG93IHRvbmlnaHQgQ2hyaXMgUHJhdHQgRWxpemFiZXRoIE9sc2VuIHRpbWUgIEtub3cgWW91ciBEb2luZyBzb21ldGhpbmcgIHdpdGggUGx1cyBFbGl6YWJldGggRmFsbG9udmVudGlvbnMgcmV0dXJuIEhpZ2dpbnMgIFNoYWdneSBoYXZlICBUb25pZ2h0IFNob3cgU2hhZ2d5IFNpYmxpbmcgRmxpcCAgUGx1cyAgbGVnZW5kYXJ5IG1lbWJlcnMgICBoZXJlIFRoYW5rcyAgaW5jbHVkaW5nICAgYWx3YXlzIHRyeWluZyAgY3JlYXRlIHNvbWV0aGluZyBob25vciAgRWFydGggICBzaW5nICBZb3VyIHdhaXRlciBvbmNlIG1hZGUgIHNpbmcgIHNvbmcgSGFzaHRhZyBUd2VldCAgICBlbWJhcnJhc3NpbmcgZXhwZXJpZW5jZSB3aXRoICB3YWl0ZXIgICB3aXRoIENvdWxkIENoZWNrICAgIGdhbWUgRmFtaWx5IG11c2ljIGZyb20gdGVhbSAgYWdhaW5zdCAgUm9zZSBCeXJuZSAgIGdhbWUgIFBpY3Rpb25hcnkgYmFjayB3aXRoICBSb3NlIFRoYW5rcyAgIGdyZWF0IGhvb2sgICB3aXRoICBjb3B5ICAgQmF0aHJvb20gV2FsbCB3b3VsZCBjaG9vc2UgIGhhdmUgdGhpcyBtZWFsIHdpdGggICAgd2FudHMgIHNoYXJlIENoZWNrICAgdGVjaCBjb3JyZXNwb25kZW50IHNpbmcgIGNsYXNzaWMgIHdpdGggQ2xhc3Nyb29tIEluc3RydW1lbnRzIFN0aWxsIGNydXNoZXMgICAgc2hvdyBTdGFuZCAgIG1heWJlICBsaXR0bGUgZG9lcyBzdGFuZCAgY29tZWR5ICAgc2hvdyBSb290cyAgICAgICBjcmF6eSBjb29sICB3aXRoIE1hZG9ubmEgIEdvb2QgcGVyZm9ybWFuY2UgdG9uaWdodCBleGNlZWRzICAgICAgTWFkb25uYSBzaG93IHBlcmZvcm1hbmNlIHNvbWV0aGluZyBwbGF5ICBXaGlzcGVyIENoYWxsZW5nZSB3b3VsZCAgIGxhd24gICByaWRpbmcgbW93ZXIgIGNvbnNpZGVyIHRoYXQgSGFzaHRhZyBUd2VldCAgICBlbWJhcnJhc3NpbmcgdGhpbmcgYWJvdXQgIGZhbWlseSBtZW1iZXIgICB3aXRoIENvdWxkIFBsYXlpbmcgIFdoaXNwZXIgR2FtZSBQbHVzIHN0b3BzICBwZXJmb3JtcyBzaG93IExvdWlzICBQbHVzIHRhbGtpbmcgICAgcmV2ZWFsZWQgICBmaXJzdCBNaWNoYWVsIERvdWdsYXMgIHRlYW0gIGFnYWluc3QgICAgcGxheSBDaGFyYWRlcyBQbGF5aW5nIENoYXJhZGVzIHdpdGggTWljaGFlbCBEb3VnbGFzICBEZW5uaW5ncyBwbHVzIG11c2ljIGZyb20gRnVubnkgRmFjZSAgcGx1cyAgcGVyZm9ybXMgRXZvbHV0aW9uICAgRGFuY2luZyBTcGVjaWFsIHRoYW5rcyBGaXJzdCBMYWR5IE1pY2hlbGxlIE9iYW1hICBQbHVzIHlvdXIgV2lsbGlhbXMgICBzaGFyZSBzb21lIGZvb3RhZ2UgICBmYXZvcml0ZSBBZnJvIERlemlhayBzZWNyZXRseSAgICBjaXR5ICAgc3RvcCBiZWZvcmUgIGZyaWVuZCBEZW5uaXMgIHRvbGQgZXZlcnlvbmUgICAgY2FzdWFsbHkgSGFzaHRhZyBUd2VldCAgIGZ1bm55ICBlbWJhcnJhc3NpbmcgcHJhbmsgICBzb21lb25lICBrbm93IHB1bGxlZCAgIHdpdGggQ291bGQgV2lsbGlhbXMgIHN0b3AgbXVzaWMgZnJvbSBUb25pZ2h0IFNob3cgUHVwcHkgUHJlZGljdG9ycyBwaWNrICBGaW5hbCBGb3VyIHdpbm5lciBhbHJlYWR5ICB0b25zICBkYW5jZXMgcmVhZHkgRXRoYW4gSGF3a2UgIFBsdXMgc3RvcCBTeW5jIEJhdHRsZSBwcmVtaWVyZXMgdGhpcyBBcHJpbCAgICBnb2luZyBUYWxlbnRlZCBDcmF6eSBmcmVlc3R5bGUgYmVuZWZpdGluZyBUSElTIHRoaXMgbXVzaWNhbCAgc2VlbiBhbnl0aGluZyBsaWtlIHRoaXMgQmV5b25kIEhBTUlMVE9OICAgZ2FtZSBicmlsbGlhbnRseSB3cm90ZSAgbXVzaWMgICAgIGxvdmUgd2l0aCBEb2luZyBzb21ldGhpbmcgIHdpdGggSGVsZW4gcGx1cyBPc2NhciBJc2FhYyBzdG9wcyAgIG11c2ljIGZyb20gSGFwcHkgVG9uaWdodCAgIFdpbGwgRm9ydGUgSmVyZW15IFNpbmdpbmcgd2l0aCBmaXZlICBUaGFua3MgTWFkYW1lIFR1c3NhdWRzIENhcmV5IG11c2ljIGZyb20gIHlvdXIgc3VtbWVyICBkb2luZyB5YXJkIHdvcmsgIEJvc3MgdG9sZCAgICAgIG5ldmVyIGNhbWUgSGFzaHRhZyBUd2VldCAgICBlbWJhcnJhc3NpbmcgICAgc29tZW9uZSAga25vdyBxdWl0ICAgICB3aXRoIENvdWxkIERvaW5nIHNvbWV0aGluZyAgd2l0aCBwbHVzICBwZXJmb3JtcyBTb29uICBHaXJsIENydXNoICAgICBXaXRoIEthcnQgd2l0aCBSb25kYSBSb3VzZXkgV2l0aCBQaWNjb2xvIFJveGFubmUgQ2hhbGlmb3V4ICAgaGVscGluZyBCZXN0ICBsdWNrICAgZXZlcnlvbmUgICBzdXJlICB3YXRjaCAgZXZlcnkgbmlnaHQgVG9uaWdodCAgIEphbnVhcnkgIG11c2ljIGZyb20gZG9pbmcgc29tZXRoaW5nICAgIHRlY2ggZGVtbyBoYXZlICB2ZXJ5IGVtb3Rpb25hbCBpbnRlcnZpZXcgc2hvdyBtdXNpYyBmcm9tICB5b3VyIFdpbGwgRmVycmVsbCAgTWVyeWwgU3RyZWVwICBuYW1lICBNZXJ5bCBvbmNlIG92ZXJoZWFyZCAgd2FpdGVyICAgIGNlbGwgcGhvbmUgICBoYXZlICBicmluZyB0aGVzZSBpZGlvdHMgdGhlaXIgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIHdlaXJkICBlbWJhcnJhc3NpbmcgIG92ZXJoZWFyZCBzb21lb25lICAgIHdpdGggQ291bGQga2lsbGVkICBKdXN0ICAgVGhhbmtzICB3YXRjaGluZyBQbGF5aW5nIFBsdXMgc3RvcHMgIG11c2ljIGZyb20gSmFyZWNraSBtYWtlICAgc3RpbGwgaGF2ZSAgbXVjaCAgIGdvb2Qgc2hvdyAgTWlsZXMgVGVsbGVyIGhhdmUgIGhvdXJzICBwcmVwYXJlICBmaW5hbGUgdG9uaWdodCAgICAgIGdvb2QgIHNjYXJ5ICAgc3VnZ2VzdCBQbGF5ZWQgbXVzaWNhbCBiZWVycyB3aXRoIENocmlzICBzb21lIGZyaWVuZHMgZnJvbSBQbGF5aW5nIG11c2ljYWwgYmVlcnMgIHBlcmZvcm1zIHlvdXIgSGFzaHRhZyBUd2VldCAgIGZ1bm55ICBhYm91dCBTcHJpbmcgQnJlYWsgICB3aXRoIENvdWxkIGdpYW50IGJlZXIgcG9uZyBmcm9tICBUb25pZ2h0IFNob3cgU3VnZ2VzdGlvbiBzaG93IEp1ZGkgRGVuY2ggIFBsdXMgbXVzaWMgZnJvbSAgVG9uaWdodCBTaG93IFJ1c3NpYW4gUm91bGV0dGUgUmV5bm9sZHMgUGx1cyBUZXJyZW5jZSBIb3dhcmQgc3RvcHMgV2F0Y2ggIFRvbmlnaHQgU2hvdyBiZWdpbm5pbmcgTWFyY2ggQXVzdHJhbGlhICBOb3J3YXkgIGdldHRpbmcgIFRvbmlnaHQgU2hvdyBzdGFydGluZyBUaGFuayBMdXBpdGEgc3RvbGVuIE9zY2FyIE90aGVyd2lzZSBrbm93biAgICBkcmVzcyAgY2FyZSBhYm91dCByaWdodCBKb3NoIEh1dGNoZXJzb24gIFBsdXMgc3RvcCAgIGNvb2tpbmcgd2l0aCBzaG93IEphbWVzIG11c2ljIGZyb20gIHlvdXIgc2hhcmVzIHNvbWUgICB2b2ljZSBvdmVyIHdvcmsgICBzaG93cyBNZWFudCAgd3JpdGUgIGVtYWlsIHRoYXQgc2FpZCBob3BlIGRvaW5nICBhY2NpZGVudGFsbHkgIHNlbmQgYWZ0ZXIgd3JpdGluZyBIYXNodGFnIFR3ZWV0ICAgZnVubnkgIGVtYmFycmFzc2luZyBlbWFpbCBtaXN0YWtlIHRoYXQgaGFwcGVuZWQgICAgIHdpdGggQ291bGQgTGF5b3ZlciAgVHJlYXRlZCBteXNlbGYgIHNvbWUgVG9uaWdodCBEZWxpY2lvdXMgU2FmZSBwbGF5ICBnYW1lICBSYW5kb20gT2JqZWN0IFNob290b3V0IGNhcnJpZXMgICAgY2hlY2sgIHBpbnQgbG9jYXRvciBoZXJlIFRvbmlnaHQgICAgbXVzaWMgZnJvbSBwbGF5ICBNdXNpY2FsIEhhcHB5IFRvbmlnaHQgICAgIG11c2ljIGZyb20gUGxheWluZyB3aXRoICBoaWxhcmlvdXMgTWFydGluIFNob3J0IGxlZ2VuZGFyeSBNYXJ0aW4gU2hvcnQgIFBsdXMgUnV0aCBXaWxzb24gc3RvcHMgcGVyZm9ybXMgeW91ciBjZWxlYnJhdGUgICBUb25pZ2h0IERvdWdoICAgIGluc2lkZSAgIGNyZWFtIG1hY2hpbmUgQ2hyaXMgQ2hyaXN0aWUgcmVjZW50bHkgc2FpZCBvbmx5ICBDaHJpcyAgb25seSB0aW1lICAgd2hlbiBidXlpbmcgc2VhdHMgY29sZCAgdGFrZSAgIGdsb3ZlcyAgc2VuZCAgICB0eXBlZCAgIG1lc3NhZ2Ugd2l0aCBwbGF5ICBIYXNodGFnIFR3ZWV0ICAgIGVtYmFycmFzc2luZyBzdG9yeSBhYm91dCB3aW50ZXIgICB3aXRoIENvdWxkIHN0aWxsIHdhbnQgTGF0ZSBOaWdodCBTbmFjayBUaGlzIGZsYXZvciAgVHJ1c3QgVG9uaWdodCAgIFNpZ291cm5leSAgbXVzaWMgZnJvbSBmaW5hbGx5ICAgeW91ciBzY29vcCBzaG9wICBzdG9yZSAgREVNQU5EICBUb25pZ2h0ICBiZXN0IGJlbGlldmUgIGZvdW5kIHRoaXMgICBkYW5jaW5nICAgSnVtYm90cm9uICAgc3BvcnRzIGdhbWVzIFNjaG9vbHMgIGhhdmluZyAgcmVjb3JkIG51bWJlciAgc25vdyAgb25seSBtYXRoIGtpZHMgIGRvaW5nICAgbXVjaCB3aW5lIHRoZWlyIG1vbXMgZHJpbmsgYmVmb3JlIFNvbWV0aGluZyAgd2l0aCBwbHVzICBwZXJmb3JtcyAgc3VycHJpc2UgRnJhbm55IEZhbGxvbiB3aXNoZXMgICBoYXBweSBXYXNoaW5ndG9uIE1vbnVtZW50ICBpbmNoZXMgc2hvcnRlciB0aGFuIHByZXZpb3VzbHkgIG1vbnVtZW50ICBjb21lIGJhY2sgIG1lYXN1cmUgSG9ub3JlZCAga2ljayAgd2l0aCBUb25pZ2h0ICAgIG11c2ljIGZyb20gVGhhbmsgY2FuZHkgaGVhcnRzICAgICBiZWluZyAgYmVzdCAgIGxvdmUgICBwbGVhc2UgdG9uaWdodCAgd2lsbCBicmVhayBzb21lIE5vcm1hbiBSZWVkdXMgIFBsdXMgcGVyZm9ybXMgUGxheWVkICBpbnRlbnNlIGdhbWUgIENhdGNocGhyYXNlIHdpdGggQ29saW4gRmlydGggUGxheWluZyBDYXRjaHBocmFzZSB3aXRoIENvbGluIEZpcnRoICBQbHVzIHBlcmZvcm1zICB5b3VyIEh1Z2ggR3JhbnQgQ2hhcmxlcyAgIHBsYXkgIHJvdW5kICBIYWxsd2F5IEdvbGYgT2JhbWEgY2hvc2UgIEJpZGVuICAgIGJlY2F1c2UgICBlbmVyZ3kgICB0aG9zZSAgIHNhbWUgcmVhc29ucyAgcGlja2VkIEhhc2h0YWcgVHdlZXQgICBmdW5ueSAgZW1iYXJyYXNzaW5nIHJlYXNvbiAgc2luZ2xlICAgd2l0aCBDb3VsZCBQbGF5aW5nIEhhbGx3YXkgR29sZiB3aXRoIEh1Z2ggR3JhbnQgIENoYXJsZXMgUGx1cyBmcm9tIFdyaXRpbmcgc2Vzc2lvbiAgICBvbnRvIHNvbWV0aGluZyAgVGhpcyBIZWxwIHNob3cgRmlmdHkgU2hhZGVzICBEYWtvdGEgSm9obnNvbiAgUGx1cyBzdG9wcyB0YWtlIHR1cm5zIHJlYWRpbmcgZXhjZXJwdHMgZnJvbSBTaGFkZXMgIHdpdGggZGlmZmVyZW50IGFjY2VudHMgd2FudCAgIGdldHRpbmcgIHdoZW4gdGhleSBzaW5nICB0aGV5IGxlYXZlIHRoZWlyIHJpZ2h0IGJsaW5rZXIgICB3aG9sZSBiYWNrICAgd2l0aCBTaGFkZXMgIHN0YXIgbXVzaWMgZnJvbSBUaGFua3MgICBzdGFmZiAgY2hlZnMgIENhYm8gQ2FudGluYSAgc3Vuc2V0ICAgUkFHRVIgbGFzdCBsYXN0IHNob3cgZnJvbSBtaXNzIFdpbGwgUm9zYW11bmQgSmFjayBXaGl0ZSBSZW1pbmlzY2luZyBhYm91dCAgZGF5cyAgQmF5c2lkZSBIaWdoIHdpdGggICAgZ2FuZyBUaGVyZSAgIG1lYXNsZXMgIGtub3cgdGhpbmdzICBnZXR0aW5nICB3aGVuIERpc25leWxhbmQgb3BlbnMgICByaWRlIGNhbGxlZCAgU21hbGwgc2hvdyAgIFBsdXMgcGVyZm9ybSAgbW9yZSBPYmFtYSByZWZ1c2VkICBjaG9vc2Ugc2lkZXMgYmV0d2VlbiBIaWxsYXJ5IENsaW50b24gICAgc2FpZCBzdXBwb3J0ICByZWdhcmRsZXNzIENoZWNrICAgZGFuY2UgICBUb25pZ2h0IFNob3cgd2l0aCBsYXN0IExvdmluZyAgbXVzaWMgcGxheWVyICBSRUFMTFkgc291bmRzIGJldHRlciB0aGFuICBvdGhlciBkaWdpdGFsIG11c2ljIFBsYXlpbmcgUGFzc3dvcmQgd2l0aCAgIHN1cnByaXNlIFBsdXMgdGFsayBtdXNpYyBmcm9tIEJyaWFuIFdpbGxpYW1zIHJhcHMgaG9ub3IgIGJyaW5naW5nICBUb25pZ2h0IFNob3cgICBGcmVzaCBQcmluY2UgIG9wZW4gbGVmdCBzaGFyayBnb2luZyAgICAgc2hvdyAgdGltZSAgICBUb25pZ2h0IE9OTFkgcmlnaHQgc2hhcmsgd2FpdCAgd2F0Y2ggcGhvdG9ib21iIHdpdGggIGdyZWF0IFN1cGVyIEJvd2wgc2hvdyBTcGVjaWFsIGNvbGQgIEJyaVdpICBwaG90b2JvbWIgd2l0aCBDaHJpcyBQcmF0dCAgQ2hyaXMgICBjb3Vyc2UgR3dlbiBUb25pZ2h0ICBraWNrICAgIHNob3dzIHdpdGggICBCcmlhbiBXaWxsaWFtcyBZZXN0ZXJkYXkgU3VwZXIgdG9kYXkgICBtb3JlIFdpbGwgICAgc3luYyBTZWNyZXQgd2VhcG9uIExhc3QgbmlnaHQgICBUb25pZ2h0IGFub3RoZXIgICBUdWVzZGF5IFdlZG5lc2RheSAgIFRodXJzZGF5IGFub3RoZXIgV2lsbCAgIGhhdmUgIGVwaWMgIHN5bmMgVGhhdCAgVGhhbmsgVGhhbmtzICBXaWxsIEZlcnJlbGwgRHJldyBBcm5vbGQgICBjb3Vyc2UgU2VyaW91c2x5IFRpVm8gICAgVG9uaWdodCBTaG93ICB3aWxsIHdhbnQgIHJld2luZCAgd2F0Y2ggV2lsbCBLZXZpbiBIYXJ0ICBBcmlhbmEgR3JhbmRlIFRvbmlnaHQgU2hvdyBMSVZFIGFmdGVyICBjaGFuZ2UgaGVyZSAgZWFybHkgIGRvaW5nIEFib3V0IG90aGVyIHNwZWNpYWwgZ3Vlc3RzIGluY2x1ZGluZyBwZXJmb3JtaW5nIGhvcGUgICBnb29kIGdhbWUgdG9kYXkgICBndWFyYW50ZWUgIEVQSUMgTElWRSAgU1lOQyBCYXR0bGUgIFRvbmlnaHQgU2hvdyBQcmludCAgIFRvbmlnaHQgU2hvdyBTdXBlciBCb3dsIEJpbmdvIGNhcmRzICBwbGF5IGFsb25nIEhhcHB5IGJpcnRoZGF5ICAgc2Vjb25kIG1vc3QgdGFsZW50ZWQgICBzaG93IGJ1c2luZXNzIHNjYXJ5IHdpdGggIFRoZW4gaGF2ZSAgYmlsbGJvYXJkICBTdW5zZXQgdGhlZWxsZW5zaG93IGNvbWluZyBzaG93IFBsYXlpbmcgQ2hhcmFkZXMgVGFyYWppIEhlbnNvbiBtdXNpYyBmcm9tIHBsYXlpbmcgV2hpc3BlciBLaWRzICAgQmxvY2sgICAgICBtaWdodCAgQnVzaCAgY291cGxlICBmcm9tIEFsd2F5cyBncmVhdCAgIE1ldHMgQnVja2V0IHN0b3BwaW5nICAgUGx1cyAgQ29zdGFzICBoZXJlIEZsaXAgd2l0aCBKZW5uaWZlciBBbmlzdG9uIHNheWluZyBPYmFtYSAgdGhyb3dpbmcgc2hhZGUgbGFzdCAgdGhhdCAgIGFib3V0IHdpbm5pbmcgYm90aCAgIGVsZWN0aW9ucyBqdXN0IHNvbHZlZCBHbG9iYWwgd3JpdGVyIEhhc2h0YWcgVHdlZXQgICB2aWRlbyAgeW91ciBmdW5uaWVzdCAgbW9zdCBlbWJhcnJhc3NpbmcgdG91Y2hkb3duIGRhbmNlICAgd2l0aCBDb3VsZCBUb25pZ2h0ICAgIEZsaXAgd2l0aCBKZW5uaWZlciBzdG9wcyAgY29va2luZyB3aXRoIE9iYW1hIHNhaWQgICByZWxheGVkIHRvbmlnaHQgc2luY2UgZG9uZSAgIG1hbnkgUm9tbmV5IHNhaWQgIHNhbWUgdGhpbmcgYWJvdXQgcnVubmluZyBwbGF5ICBpbnRlbnNlIGdhbWUgIENhdGNocGhyYXNlICBIaWdnaW5zIEhhcHB5ICBNb3N0IHBlb3BsZSBjZWxlYnJhdGVkICB0YWtpbmcgICAgIEV4Y2VwdCAgIEluZGlhbmFwb2xpcyAgIHRoYXQgVG9uaWdodCAgICBQbHVzIHN0b3BzICAgZnJvbSBqdXN0IGdpdmUgICBkcmF3aW5nIHdpdGhvdXQgIGRldGFpbHMgIHdoYXQgS25vdyAgcGFydCAgICAgICAgIFlvcmsgVGltZXMgeWVhcnMgc2tldGNoZWQgIGhvcnJpYmx5ICAgICBwYWludGluZyB0aGF0ICAgICBoZWxwIGFueW9uZSBrbm93IHRoaXMgIGdpYW50ICAgd2l0aCBsZWdzIHBva2luZyBUaGFuayBtZWF0IGRlbGl2ZXJ5IHRydWNrcyAgTWlkdG93biAgZHJpdmluZyAgc3RlYWsgdGhyb3VnaCAgaGVhcnQgUGx1cyBicmluZ3MgY29vbGVzdCBnYWRnZXRzIFRoaXMgT3NjYXIgbm9taW5lZXMgICB0aGV5IGp1c3QgYmVjYW1lICBmcm9udHJ1bm5lciAgIFJlcHVibGljYW4gUGxheWluZyBTbGFwamFjayB3aXRoIFBsdXMgIEJhcnVjaGVsIHN0b3BzIHBlcmZvcm0gQnJvYWR3YXkgdmVyc2lvbnMgICBzb25ncyBDaHJpc3RpZSBSb21uZXkgd2lsbCBtZWV0ICBvdmVyY29tZSBsaW5nZXJpbmcgTGluZ2VyaW5nIEF3a3dhcmRuZXNzICBhbHNvIFNlY3JldCBTZXJ2aWNlIGNsb3RoIGNlaWxpbmcgICAgd291bGQgICB1c2VkIHRvb3RocGlja3MgICAgc3RpY2sgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIGZ1bm55ICB3ZWlyZCBhYm91dCAgd29yc3QgICBldmVyICAgIHdpdGggQ291bGQgbXVzaWMgZnJvbSBQbHVzICAgVG9uaWdodCBTaG93IFN1Z2dlc3Rpb24gQ2hyaXMgSGVtc3dvcnRoICAgaGF2ZSAgV2F0ZXIgVG9uaWdodCAgIENocmlzIEhlbXN3b3J0aCAgIGhhdmUgIFdhdGVyIFBsdXMgU2llbm5hIE1pbGxlciAgaGVyZSBBbmltYWxzIGxvdmUgIFRvbmlnaHQgU2hvdyBsb3ZlcyAgdG9uaWdodCAgIGFjdHVhbGx5IEdsb2JlICBiZXN0ICBmb2xsb3dzICAgdGhyb3VnaCAgICAgUm9tbmV5IGNhbGxzIENoYXJsaWUgICBQbHVzICBiYWNrIHdpdGggc29tZSBhbmltYWwgZnJpZW5kcyBUaGFuayBSYW5keSAgYmVpbmcgbmlja25hbWVkICBiZWNhdXNlIHNvdW5kIHF1aXRlIGRpcnR5IEhhcHB5IFRvbmlnaHQgICAgUGx1cyBzdG9wcyBCaWxsIEdhdGVzIGRyYW5rIGZyb20gIHN5c3RlbSB0aGF0IHR1cm5zIHdhc3RlIGludG8gICAgZmlyc3QgdGltZSB0YXN0ZWQgdG9pbGV0IHdhdGVyIHNpbmNlIG1pZGRsZSBUaGFua3MgICAgZmFucyAgdm90ZWQgIFN1Y2ggIGNvb2wgICBzdGFydCBQaWN0aW9uYXJ5IFBsdXMgU2ltbW9ucyAgaGVyZSBwZXJmb3JtcyBMaWFtIE5lZXNvbiAgIGhhdmUgIGhpZ2ggc3Rha2VzIG1hdGNoIGVhcnRocXVha2UgIFRleGFzICBTY2llbnRpc3RzICAgICBhZnRlcnNob2NrIGZyb20gQ2hyaXMgQ2hyaXN0aWUgY2VsZWJyYXRpbmcgICBDb3dib3lzIG9uY2Ugd2VudCAgIGRhdGUgd2l0aCBOaWNvbGUgS2lkbWFuICBldmVuIHJlYWxpemUgIHNwZW50ICB3aG9sZSB0aW1lIHBsYXlpbmcgdmlkZW8gSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIGZ1bm55ICBlbWJhcnJhc3NpbmcgdGhhdCBoYXBwZW5lZCAgICAgZGF0ZSAgIHdpdGggQ291bGQgd2l0aCBMaWFtIFBsdXMgRnJlZCBBcm1pc2VuIENhcnJpZSBmcm9tIHNlcmlvdXNseSBCcmllICAgICB3ZW50IGludG8gVGhpcyBzaG91bGQgIGRvd24gICBHVUVTVCBTUE9UIEVNTVkgQVdBUkQgIHRoZXJlICBzdWNoICBMT1ZFRCBqdXN0IGZvdW5kICAgd2lmZSBvbmNlIGRhdGVkIFRvdWdoIHdlZWsgTmljb2xlIEtpZG1hbiBzaGFyZXMgIGVtYmFycmFzc2luZyBzdG9yeSAgIGZpcnN0IHRpbWUgcHJldHR5IGNyYXp5IHJlYWxpemF0aW9uIHdpdGggTmljb2xlIEtpZG1hbiAgIHNob3cgIHNob3VsZCBHaXJsIFNjb3V0cyAgICBjb29raWUgY2FsbGVkIEV2ZW4gV2l0bmVzc2VzICBkb29yYmVsbCBQbGF5aW5nICAgTGllcyB3aXRoIE5pY29sZSBzdG9wcyAgbXVzaWMgZnJvbSBCcmFkbGV5IENvb3BlciBzaG93cyAgIGd1aXRhciBza2lsbHMgcGxheWluZyBNYXJrICBZZWFyIHJlc29sdXRpb24gICByZWFkICBmcm9tICAgZmluZCAgIEJhcm5lcyBOb2JsZSAgdGFrZSBzaW5rIGJhdGhzIEJhY2sgdG9uaWdodCB3aXRoIEJyYWRsZXkgUHJvcHMgICBpbnRyb2R1Y2luZyAgIEN1cnJlbnRseSBsaXN0ZW5pbmcgIENob2ljZXMgSGFwcHkgIHR5cGluZyB0aGlzICBiZWNhdXNlIGxhdGVyICBIb3BwdSBNZXJyeSBDaHJpc3RtYXMgWW91ciBzaG93IGV2ZXJ5IG5pZ2h0ICAgYmVzdCBwcmVzZW50IGV2ZXIgTWVycnkgQ2hyaXN0bWFzIEZyb20gIGZyb250IHBvcmNoICB5b3VycyAgZ29vZCBsb29raW5nIEFub3RoZXIgIHNob3cgIGdyZWF0IGRvaW5nIHJldHVybnMgIHRhbGsgbXVzaWMgZnJvbSBjbGFzc3Jvb20gaW5zdHJ1bWVudHMgd2l0aCBIYXBweSBoYXZlICBicmFuZCBmcmVzaCBzaG93ICBvZmZlciBIb3BlICBsaWtlIE91aWphIEJvYXJkcyAgICAgbW9zdCBwb3B1bGFyICBiZWNhdXNlICAgZW5vdWdoIHRhbGtpbmcgIHlvdXIgTElWSU5HIEFjdHVhbGx5IHNwZWNpYWwgZ3Vlc3RzIHRvbmlnaHQgUGxheWluZyBCYXR0bGVzaG90cyB3aXRoIENocmlzIFBsdXMgRGF2aWQgT3llbG93byAgY29va2luZyB3aXRoIHNvbWUgc3BlY2lhbCBndWVzdHMgc3RvcCBDb25ncmF0cyAgIGV2ZXJ5b25lICAgQ29sYmVydCBGYW50YXN0aWMgICAgZmFudGFzdGljIEhhcHB5IFRvbmlnaHQgICAgU3RpbGxlciBCcmllICBmcm9tIE9iYW1hIHNhaWQgIGZhdm9yaXRlIG1vdmllICAgeWVhciAgYmVjYXVzZSAgaWRlbnRpZmllcyB3aXRoIGFnaW5nIHNldmVyYWwgeWVhcnMgb3ZlciAgY291cGxlIFdoYXQgZXZlciBoYXBwZW5lZCAgQ29tZWRpYW5zICBDYXJzIEdldHRpbmcgQ29mZmVlIHdpdGggICBQYXJ0IHBhcnQgICAgZGlwbG9tYXRpYyBDdWJhIHJlbGVhc2VkICAgIHByaXNvbmVycyAgIHNlbnQgYmFjayAgIHRoZWlyIGJyb2tlICAgIG5pZ2h0IGJlZm9yZSAgIENocmlzdG1hcyBtb3JuaW5nIGd1ZXNzICBjYW1lIEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyBmdW5ueSAgZW1iYXJyYXNzaW5nIHRoYXQgaGFwcGVuZWQgICAgQ2hyaXN0bWFzICAgd2l0aCBDb3VsZCBDYW1wIFdpbm5pcGVzYXVrZWUgd2hvYSBUaGlzIG11c3QgdGhhbmtzICB0aG9zZSBjYW1wIGZpcnN0IG5pZ2h0ICB0aGF0IHNwZWNpYWwgdGltZSAgbGVhcm4geW91ciBmcmllbmQgIEpld2lzaCAgYXNraW5nIHdoYXQgZG9pbmcgVG9uaWdodCAgIENocmlzdG9waCBXYWx0eiAgcGx1cyB0YWxrIG11c2ljIGZyb20gc2hhcmUgICBjbGlwcyBmcm9tICBzb2FwIG9wZXJhICBzdGFycmVkIE9iYW1hY2FyZSAgd2lsbCAgYXBwZWFyICBzb21lICAgIEVOVElSRSBBZmZvcmRhYmxlIEhlYWx0aGNhcmUgY2hlY2sgeW91ciBzaG93IEV4Y2l0ZWQgIGhhdmUgc3RvcHBpbmcgcGx1cyBIYXBweSBNYXJ0aW4gRnJlZW1hbiAgTWVnYW4gTXVsbGFsbHkgIFBsdXMgbXVzaWMgZnJvbSBEd2F5bmUgSm9obnNvbiAgIGhhdmUgIEludGVuc2UgU3RhcmVkb3duIERpY2sgQ2hlbmV5IG1pZ2h0ICBoYXZlIGtub3duICBsb2NhdGlvbiAgIGRldGVudGlvbiAgIHRocmlsbCAgZmluZGluZyB0aGVtIER3YXluZSBKb2huc29uICAgUGx1cyBwZXJmb3JtcyB5b3VyIFJhZ3RpbWUgR2FscyBjb3ZlciBNYXJ2aW4gd2l0aCAgbGl0dGxlIGhlbHAgZnJvbSBFYm9sYSAgbW9zdCBwb3B1bGFyIEZhY2Vib29rICBXb3JsZCAgICAgZXZlbiBtb3JlIHBvcHVsYXIgdGhhbiBIYXNodGFnIFR3ZWV0ICAgZnVubnkgc29uZyBseXJpYyAgc29uZyB0aXRsZSAgIHdpdGggQ291bGQgVG9uaWdodCAgICBwbHVzIHRhbGsgZnJvbSBGbGlwIHJldHVybnMgd2l0aCAgYWx3YXlzIGhpbGFyaW91cyB0YWJsZXQgY29tcHV0ZXIgICBzaXplICAgc21hbGwgIHBlcmZlY3QgZ2lmdCAgZXZlcnkgaWRpb3QgIGZyb250IEZsaXAgcmV0dXJucyB3aXRoIFBsdXMgIGhlcmUgU291dGggS29yZWEgIHB1dHRpbmcgICBDaHJpc3RtYXMgdHJlZSAgICAgIE5vcnRoIEtvcmVhICAgIHJ1bGUgYmFjayB3aXRoICAgcGx1cyB0YWxrIG11c2ljIGZyb20ga25vdyAgY2FzdCAgUGV0ZXIgIHdvcmtlZCBoYXJkICAgcGVyZm9ybWFuY2UgICBCcmVhayBIYXZlICBncmVhdCBicmluZyBiYWNrICBzbG93IGxhcmdlciAgIGRpZmZlcmVuY2UgYmV0d2VlbiBtYXJyaWVkICBtb3JlIGxpa2VseSB0aGV5ICAgZ29sZCBkaWdnZXJzIGNhbGwgRGF2aWQgU2VkYXJpcyAgUGx1cyBwZXJmb3JtcyB3aXRoIFN1Y2ggIGhvbm9yICAgIGd1ZXN0ICBKaW1pbnkgc2hvdyBGb3JjZSB0ZWFzZXIgY2FtZSBzZWNvbmRzICBTdGFyIFdhcnMgZmFucyBvbmx5IGxhc3RlZCBhYm91dCBmaXZlIG1hbnkgIHN1cnByaXNlcyAgIHNob3cgQWxzbyAgc29tZSB3YXRlciByZXRlbnRpb24gdGhhdCByZWFsbHkgbG9va2luZyBmb3J3YXJkIFBpY3Rpb25hcnkgd2l0aCBNYXJ0aW4gU2hvcnQgIHNvbWUgc3BlY2lhbCBQbHVzIHN0b3BzICAgbXVzaWMgZnJvbSBUaGFuayAgYmVpbmcgIHRpbWUgICB0aGFuayBmb290YmFsbCAgIG1ha2luZyB0aGF0IEhhcHB5IGNvb2tpbmcgUGx1cyBUaGFua3NnaXZpbmcgU2hvdyB5b3VyIGNvdXNpbnMgIGNvb2wgICAgd2F0Y2hpbmcgWW91VHViZSBjbGlwcyBmcm9tIGhhdmUgICBUb25pZ2h0IFNob3cgYWZ0ZXIgIGdhbWUgIHN1cmUgIFJhc2hpZGEgSm9uZXMgICBoYXZlICBob2xpZGF5IG1lZGxleSBzdG9ybSBjb3VsZCBkZWxheSBFYXN0IENvYXN0ICAgIGRyaXZlIGxvb2tzICAgdHJhZmZpYyByZXBvcnQgc2FpZCAgZW1wdHkgQ2hyaXN0b3BoZXIgICBwZXJmb3JtYW5jZSBmcm9tIEh1bmdlciBHYW1lcyBpbnNwaXJlZCBjb3VwbGVzICBuYW1lIHRoZWlyIGtpZHMgVGhvc2UgYm9ybiB3aGVuICBIb2JiaXQgY2FtZSBCaWxsICBzdG9wcGluZyAgIFBsdXMgdGFsayBtdXNpYyBmcm9tIFRvbmlnaHQgICAgQWxsZW4gICBzdG9wcGluZyBQbHVzIG11c2ljIGZyb20gR29vZCBUaGFua3MgIGJyaW5nIFRoYW5rICBiZWluZyByZWFsbHkgdGhpcyB3ZWVrICBwcm9iYWJseSBOb3ZlbWJlciBwbGF5ICBnYW1lICBNdXNpY2FsIEJlZXJzIFBlb3BsZSBzYWlkICBQcmVzaWRlbnQgY2FtZSAgIHN0cm9uZyAgZGVjaXNpdmUgVGhlbiB0aGV5IHN3aXRjaGVkIGZyb20gU2NhbmRhbCAgIHdoYXQgT2JhbWEgUGxheWluZyAgIGdhbWUgUGx1cyBwZXJmb3JtcyB5b3VyIHR3ZWV0cyBIb3VzZSBSZXB1YmxpY2FucyBwaWNrZWQgIGdyb3VwICAgY29tbWl0dGVlICAgIHByZXR0eSBnb29kIGdyYW5kbWEgYm91Z2h0ICBCdXR0ZXJiYWxsIHR1cmtleSAgICAgIG92ZW4gd2l0aCAgcGxhc3RpYyAgc3RpbGwgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIGZ1bm55ICBlbWJhcnJhc3NpbmcgdGhhdCBoYXBwZW5lZCAgVGhhbmtzZ2l2aW5nICAgd2l0aCBDb3VsZCBTdGV3YXJ0ICAgUGx1cyBmcm9tIFBsYXllZCAgY3Jhemllc3QgZ2FtZSAgV29yZCBTbmVhayAgd2l0aCAgUnVzc3kgUGxheWVkICBjcmF6aWVzdCBnYW1lICBXb3JkIFNuZWFrICB3aXRoICBSdXNzZWxsIEJyYW5kIE1hcmxpbnMgcGxheWVyIEdpYW5jYXJsbyBTdGFudG9uIHNpZ25lZCAgQXNrZWQgd2hhdCBKdXN0ICBiZGF5IHBhY2thZ2Ugc2VudCBmcm9tIExFU1RFUiBKZWFsb3VzIFByb3BzICAgICBjb21pbmcgICBzaG93ICAgIHRhbGVudGVkICAgaHVtYW4gUGxheWluZyBXb3JkIFNuZWFrIHdpdGggUnVzc2VsbCBCcmFuZCBQbHVzICBzdG9wIEJlbmVkaWN0IEN1bWJlcmJhdGNoICAgcGxheWVkICAgZ2FtZSAgIHNob3cgbGFzdCBTdG9yaWVzIGdvaW5nICBJbmRpYSAgdGhlaXIgdmVyc2lvbiAgIGdvbm5hIGJyZWFrICAgcGxhY2UgdGhpcyAgdGhpbmsgIHNvbWV0aGluZyAgc2VuZCB2aWJlcyAgQm9ubyAgIHNwZWVkeSBrbm93ICAgbWFzY290ICBiZWhpbmQgdGhpcyAgIHRoaW5rICB0cnV0aCBhY3R1YWwgV2lsbCAgICBhbGJ1bSAgcmVhbGx5IGhhdmUgaW5zcGlyZWQgICAgeW91ciAgZGFyZSBOZXh0ICBUaGV5ICBnb2luZyBicm90aGVyIHN0b2xlICAgY29udHJvbCBmcm9tIFRoYW5rICAgYmVpbmcgIHRpbWUgICAgZmVlbCBzYWZlIGVub3VnaCAgdmlzaXQgSm9zaCBIdXRjaGVyc29uICAgcGxheSAgaW50ZW5zZSBnYW1lICBCZWVyIEhvY2tleSBBcHBhcmVudGx5ICBLYXJkYXNoaWFuICBwYWlkICAgcmFjeSBQYXBlciBNYWdhemluZSAgIGRvZXMgaGF2ZSAgZ29vZCBkZWFsIFBsYXlpbmcgQmVlciBIb2NrZXkgUGx1cyBUcmFjZXkgVWxsbWFuICB5b3VyIExpZXMgd2l0aCBSYW5keSBsZWF2aW5nIFNhaWQgIHdhbnRlZCAgICB3aGVuICBzaG93ICAgIGRlY2lkZWQgIHdhaXQgYW5vdGhlciBhdW50IHdvcmUgc25lYWtlcnMgICAgYnJvdWdodCAgaGVlbHMganVzdCAgc2hvdyBldmVyeW9uZSBIYXNodGFnIFR3ZWV0ICB3ZWlyZCAgZW1iYXJyYXNzaW5nIHRoaW5nICBmYW1pbHkgbWVtYmVyICBkb25lICBzYWlkICB3aXRoIENvdWxkIFRvbmlnaHQgICAgRWRkaWUgUmVkbWF5bmUgIFBsdXMgcGVyZm9ybXMgd2l0aCBUb25pZ2h0ICAgIFBsdXMgc3RvcCBHZW9yZ2UgQnVzaCBzYWlkICBjaGFuY2UgIGJyb3RoZXIgIHJ1bnMgIFRoZW4gICBjaGFuY2UgUGxheWluZyBQeXJhbWlkIHdpdGggIHNvbWUgc3VycHJpc2UgUGx1cyAgaGVyZSBUaGFuayAgVGhhbmsgIFRoYW5rIFJlYWxseSAgc2hvdyByZXR1cm5zICAgVG9uaWdodCBTaG93ICB0YWxrIHBlcmZvcm0gc3RhbmQgQ3VycmVudGx5IG9ic2Vzc2VkIHdpdGggUm9hZGhvdXNlICBTaXJpdXMgIERvaW5nICBncmVhdCAgb3ZlciBwbGF5IEZhY2VicmVha2VycyBVdGFoIG1hZGUgaGlzdG9yeSAgZWxlY3RpbmcgIExvdmUgICAgIGJsYWNrIGZlbWFsZSBSZXB1YmxpY2FuIEV2ZW4gVW5pY29ybnMgc2FpZCBidXlpbmcgUGxheWluZyBGYWNlYnJlYWtlcnMgd2l0aCBQbHVzIHN0b3BzIHBlcmZvcm1zIHlvdXIgY2FzZSAgcGVyZm9ybXMgIGFjb3VzdGljIHZlcnNpb24gRmxpcCBEdWV0IHdpdGggUmVwdWJsaWNhbnMgICBnYWluaW5nIFRoZXkgIHRoaXMgbWFueSBzZWF0cyBzaW5jZSBDaHJpcyBDaHJpc3RpZSBtYWRlICBhaXJsaW5lIFByaW5nbGVzIGNhbnMgd291bGQgIHR3aWNlICB3aWRlICAgY291bGQgYWN0dWFsbHkgICBoYW5kIGluc2lkZSBIYXNodGFnIFR3ZWV0ICB3ZWlyZCAgaW50ZXJlc3RpbmcgICBwYXNzICAgIGVsZWN0ZWQgICB3aXRoIENvdWxkIHNob3cgIGhlcmUgIHRhbGsgIHBsdXMgc3RvcHMgT2JhbWEgc3BlbnQgRWxlY3Rpb24gICBtZWV0aW5ncyAgIFdoaXRlIE5pY2UgICBzb21lIGRvb3JzIGFjdHVhbGx5IGNsb3NlZCAgIFdoaXRlIFBsYXlpbmcgd2l0aCAgUGx1cyBGZWxpY2l0eSBKb25lcyAgbXVzaWMgZnJvbSBFeHBlcnRzICBNYXJ5ICBNYXJhdGhvbiAgICAgbW9zdCBpbXByZXNzaXZlIHJhY2VzIHNlZW4gIHdvbWFuIEhpbGxhcnkgc2F5cyBuZXdzICAgTGF0aW4gQW1lcmljYW4gU3RhcnRpbmcgIHNob3cgd2lsbCAgYWlyaW5nIHdlZWtuaWdodHMgIEhvcGUgQW5uZSBXb3JsZCBTZXJpZXMgIE1hZGlzb24gQnVtZ2FybmVyICBtdXNpYyBmcm9tIFRoYW5rIG5laWdoYm9ycyB0aGF0IGdpdmUgIGFwcGxlcyAgIGJhc2ljYWxseSBUaHJvdyB0aGlzICAgaG91c2UgUGxheWluZyBXaGVlbCAgSW1wcmVzc2lvbnMgd2l0aCBUaGVuICBzdG9wIHN1cnByaXNlcyAgYXVkaWVuY2UgIHNoYXJlIHRoaXMgIEhhbGxvd2VlbiBDb3N0dW1lcyBBcHBsZSAgIENvb2sgb2ZmaWNpYWxseSBjYW1lICAgIGtub3dpbmcgICAgQ29vayB3aWxsIHByb2JhYmx5IGNvbWUgIG5leHQgVG9uaWdodCAgICBQbHVzIHNvbWUgc21hcnQga2lkcyBzaG93ICB0aGVpciBpbnZlbnRpb25zIFdhdGVyICByZXR1cm5zIHdpdGggSmFrZSBpbnZlc3RpZ2F0aW5nICBTZWNyZXQgU2VydmljZSBwcm9zdGl0dXRpb24gc2NhbmRhbCAgY2F1Z2h0IHdpdGggICBPYmFtYSBhcHBvaW50ZWQgIElyb255IFdhdGVyICB3aXRoIEpha2UgUGx1cyBQYXVsIFJldWJlbnMgIGhlcmUgIG11c2ljIGZyb20gRGFuaWVsIFJhZGNsaWZmZSByYXBzIHRocm91Z2ggVGhpcyBtdXNpYyBkb2VzIGhhdmUgICBzY2hvb2wgRmVlbCBsaWtlICBzaG91bGQgICBTdHVyZ2lsbCBTaW1wc29uIFRIQVQgICAgdG9sZCB0ZWxsaW5nICB3YXRjaCAgd2lsbCAgdHJlbmRpbmcgRGFuaWVsIFJhZGNsaWZmZSBkb2VzIHNvbWV0aGluZyBmYW50YXN0aWMgICBzaG93ICBoYXZlIFN0YXJidWNrcyAgY29taW5nICB3aXRoICBDaGVzdG51dCBQcmFsaW5lIFNvdW5kcyBsZXNzIGxpa2UgIGRyaW5rICBtb3JlIGxpa2UgIHN0cmlwcGVyIGdpdmluZyAgZnVsbCBQb3N0ICAgIHlvdXIgIGNsZXZlciAgSGFsbG93ZWVuIHRlbGwgIHdoYXQgY2FsbGVkICB3aXRoIENvdWxkIFRvbmlnaHQgICBEYW5pZWwgUmFkY2xpZmZlICBkb2luZyBzb21ldGhpbmcgc3RvcHMgQ2hhcmxlcyBCYXJrbGV5ICAgcGxheSBDaGFyYWRlcyBhZ2FpbnN0IHB1bXBraW5zIHRoaXMgT2JhbWEgaW52aXRlZCBjaGlsZHJlbiAgICBXaGl0ZSAgIHRpbGwgIFNlY3JldCBTZXJ2aWNlIHRhY2tsZXMgUGxheWluZyBDaGFyYWRlcyB3aXRoICBDaGFybGVzIEJhcmtsZXkgICBzaG93IHBsdXMgYmFjayB3aXRoIGJyYW5kICBzaG93cyBzdGFydGluZyBtYWRlIGxvdmVkIHRoZW0gZ3Vlc3NlZCAgZ3Vlc3NlZCBUaGFua3MgICAgY3JldyBvdmVyIGV2ZXIgdGltZSAgS25vdyBZb3VyICBsdWNreSBoYXZlICBnb3R0ZW4gIHB1bXBraW4gd2l0aCB5b3VyIHRydWNrICAgIHdvcmxkIG5lZWRzICBUaGlzIFdpbGwgdGFrZSBTVVBFUiB1bmVkaXRlZCB2ZXJzaW9uICAgaW50ZXJ2aWV3IHRoYXQgQnJhZGxleSBDb29wZXIgVG9uaWdodCAgICAgdGhvc2UgIG1vbWVudHMgd2l0aCBCcmFkbGV5ICAgIEJyb2Fkd2F5IFRoYW5rICAgIEFtZXJpY2FucyAgY2FsbCBpbnZpdGVkICAgcGxheSBQbGF5aW5nICBSdXNzaWFuIFJvdWxldHRlIHdpdGggQnJhZGxleSBQbHVzICBoZXJlIENlbGwgcGhvbmUgcmluZ3RvbmVzIFN0aW5ndG9uZXMgZmlnaHQgYWdhaW5zdCBJU0lTIHdpbGwgIGNhbGxlZCBPcGVyYXRpb24gSW5oZXJlbnQgVGhleSBjYW1lICB3aXRoIHRoYXQgbmFtZSB1c2luZyBPcGVyYXRpb24gUmFuZG9tIFNob3VsZCBoYXZlIGNhbGxlZCAgQnJlYWtpbmcgIGdvb2Qgd291bGQgIG5vdGhpbmcgd2l0aG91dCAgc25pZmZlZCAgVGhhbmsgIGd1eXMgIHBsYXlpbmcgQmlkZW4gc2FpZCBvbmx5IHdoaXRlICAgIGVhc3Qgc2lkZSAgIHRoZW4gSGFsZiAgIGJlc3QgZnJpZW5kIHBhaW50ZWQgbXlzZWxmIGJsdWUgICAgU211cmYgICBjb21lIEhhc2h0YWcgVHdlZXQgIHdlaXJkICBlbWJhcnJhc3NpbmcgdGhpbmcgdGhhdCBoYXBwZW5lZCAgICBIYWxsb3dlZW4gIHdpdGggQ291bGQgTWljaGFlbCBTaGFubm9uICBQbHVzIG11c2ljIGZyb20gIExlbm55IFBpY2tldHQgc2l0cyAgd2l0aCBMaWVzIHdpdGggRW1tYSBTdG9uZSBDb21lICBSZXF1ZXN0IGJyZWFrICBCaWxsYm9hcmQgICBmaW5kICB0b2RheSBNb3JlICB0aGluayAgdG9wcGVkIHNrZXRjaCB3aXRoIEJyYWQgUGl0dCB3aXRoICBmaW5kICB0b2RheSAgIGJyb2tlICBiaWxsYm9hcmQgQ2xvc2VkIGNhcHRpb25lZCBkZXNjcmliZWQgIHNpbmdpbmcgIHRoYXQgV2hhdCAgIHNob3cgU3RvbmUgTG9naWUgIFNhbW15IFJld2luZCAgd2F0Y2ggSm9uZyAgbWFkZSAgZmlyc3QgcHVibGljIGFwcGVhcmFuY2UgIG92ZXIgICAgc2hhZG93ICBtb3JlIHllYXJzICBudWNsZWFyIHNob3cgUGxheWluZyAgIExpZXMgd2l0aCBFbW1hIFBsdXMgIGhlcmUgIG11c2ljIGZyb20gT2JhbWEganVzdCAgd2l0aCAgY3JlYXRvciAgRmFybVZpbGxlICAgVGhleSBoYXZlICAgIEJvdGggcmVhbGx5IHdpc2ggICBzdGlsbCBaYWNoIEdhbGlmaWFuYWtpcyAgZnJvbSBBbmRyZXcgT3J2ZWRhaGwgY3JhenkgbGlzdGVuZXIgcGxheWluZyBpUGhvbmUgVGhhbmsgV2lzaCAgIHNlZW4gICBqdXN0ICAgIG1vcmUgdGhhbiBoYWxmd2F5IHNob3cgaGF2ZSAgIGNvbW1lcmNpYWwgYWlyaW5nIGR1cmluZyBUaGFuayBCcml0YSAgZmlsdGVyaW5nICBldmVyeXRoaW5nICAgbGl0dGxlIGNoYXJjb2FsIGJhbGxzIHRoYXQgZmFsbCAgICBCcml0YSB0aGlzICBUaGFua3MgIG11Y2ggUGx1cyBwZXJmb3JtcyB3aXRoIFdvcmQgU25lYWsgd2l0aCAgdmVyeSBmdW5ueSBGcmFuY2lzY28ganVzdCBoZWxkICBOdWRlICAgd2VpcmQgd2hlbiAgcmVsYXkgcnVubmVyIHJlYWNoZWQgYmFjayAgIHRlYW1tYXRlIFBsdXMgcGVyZm9ybXMgd2l0aCB5b3VyIE9ubHkgIEFtZXJpY2FucyB3aWxsIHZvdGUgICBtaWR0ZXJtIHdpbGwgc3RpbGwgY29tcGxhaW4gYWJvdXQgb25jZSAgcmlnaHQgaW50byAgZ2xhc3MgZG9vciB3aGVuICBoZWFyZCAgIGNyZWFtIHRydWNrIEhhc2h0YWcgVHdlZXQgICBlbWJhcnJhc3NpbmcgdGhpbmcgdGhhdCAgIHNvbWVvbmUgZWxzZSAgICB3aXRoIENvdWxkIFRvbmlnaHQgICAgIHN0b3BwaW5nIFBsdXMgIG11c2ljYWwgcGVyZm9ybWFuY2UgZnJvbSBXaGF0ZXZlciAgcGxheSB0aGVzZSBnYW1lcyBUb25pZ2h0IFNob3cgY2VsZWJyYXRlZCAgICBhbHdheXMgaGF2aW5nIHNvbWVvbmUgICBjYWtlIGJlZm9yZSBjb21tZW50cyBzZWN0aW9uICAgbGlzdCB0aGluZ3MgdGhhdCAgdGhpbmsgeW91ciBkcmVhbXMgIGNvbWluZyBoZWFkZWQgIFdoYXQgIGdvaW5nIFNpbmdsZSAgSmltbXkgRmFsbG9uIG5vdGhpbmcgYmV0dGVyIHRoYW4gd2hlbiBzb21lb25lIGp1c3Qgd2FudHMgIFRoYW5rIHNlYXJjaCBwbGF5aW5nIHJpZ2h0IFR1cm4gIHlvdXIgV2hhdCAgIGJlY29tZXMgICAgZ29lcyAgY2hhcml0eSBjaGF0dGluZyB3aXRoICAgIGFib3V0ICAgc29uZyB3aXRoIFRhbGsgYWxyZWFkeSBwbGF5aW5nIHRoaXMgbW9ybmluZyAgUGl0dHNidXJnaCBsb3ZlIHJhZGlvICBDaGFybG90dGUgdGhpcyBQbGVhc2UgcmVxdWVzdCB0aGlzICB5b3VyIGxvY2FsIFBpenphIGdldHMga2lkcyAgcmVhZCAgZ2l2aW5nIHRoZW0gIGZhdm9yaXRlIHBpenphIGx5aW5nIGFib3V0IHJlYWRpbmcgZXhjaXRlZCAgIHdvcmxkIHByZW1pZXJlIHZpZGVvICBzb25nIHdpdGggQmVzdCB0aW1lIHNob290aW5nIENvbWVkaWFucyAgQ2FycyBHZXR0aW5nIENvZmZlZSB5ZXN0ZXJkYXkgd2l0aCAgc2Vhc29uIFBsdXMgSmVyZW15IFJlbm5lciBDYXJvbCB5b3VyIFRvbmlnaHQgIHdvcmxkIHByZW1pZXJlICAgIHNvbmcgZnJvbSBTcGVjaWFsIFBhcnNvbnMgIFRoZXkgVGhhbmsgU2VjcmV0IFNlcnZpY2UgRGlyZWN0b3IgSnVsaWEgIGxlYXZpbmcgIFdoaXRlICBsZWFzdCByZWFsbHkgZWFzeSAgIGJhY2sgUGxheWluZyBQYXNzd29yZCB3aXRoIEVtbWEgUGx1cyBmcm9tIFdlbGwgIGp1c3QgY29tbWl0dGVkICBwbGF5aW5nICAgc29uZyBTdGF5ICAgIFByb3ZlIGV2ZXJ5b25lIGN1cnJlbnRseSBkcmlua2luZyB0b25zICBjb2ZmZWUgIHN0YXkgYXdha2UgICBzaG93IHRvbmlnaHQgZ29vZCB3aGF0ICAgICAgICAgaGF2ZSAgZGVidXQgdGhhdCB0aGluayAgdW5kZXJzdGFuZCAgdG9ydHVyb3VzICAgIHdha2UgICAgIGp1c3Qgc3RheSBBZnRlciAgU2VjcmV0IFNlcnZpY2UgRGlyZWN0b3Igc2FpZCBzcGVuZCBzb21lIHF1YWxpdHkgdGltZSBsZXR0aW5nIHN0cmFuZ2VycyBpbnRvICAgaG91c2UgICB3aGlsZSBmYW5zIHNob3VsZCBzdGF5ICAgaGF2ZSAgcGFydHkgVGhleSB3ZXJlIHZlcnkgYWxzbyBoYXZlIEphbWVzIE1hcnNkZW4gc3RvcHBpbmcgICBzaG93ICB3aWxsICBzaW5naW5nIHlvdXIgZXhjaXRlZCAgaGF2ZSAgICBncmVhdGVzdCBZYW5rZWVzICAgdGltZSAgIHNob3cgdGhpcyBldmVuaW5nICBEZXJlayBKZXRlciB3aWxsIEtpZHMgIHNjaG9vbCAgU2VjcmV0IFR3ZWV0ZXJzIHNlY3JldCBHaG9zdCBiaXJ0aGRheSAgIHBsZWFzZSBoYXZlICBoYXBweSBiaXJ0aGRheSB0d2VldCBmcm9tIGhhcHB5IFBlcHNpIGNvbW1lcmNpYWwgd2l0aCAgIFBhcmtlciBUaGF0IENhdGNocGhyYXNlIHdpdGggSmVubmlmZXIgSm9obiBUZWVuYWdlIE11dGFudCBOaW5qYSBUdXJ0bGVzIG1pZ2h0ICAgbW9zdCBwb3B1bGFyIEhhbGxvd2VlbiBjb3N0dW1lcyB0aGlzICBsZWFzdCBTbHV0dHkgRWJvbGEgUGxheWluZyBDYXRjaHBocmFzZSB3aXRoIEplbm5pZmVyIFBsdXMgdGFsa2luZyB3aXRoIEpvaG4gIG11c2ljIGZyb20gUmFjZWQganVtcGVyIGRyb25lcyB0aHJvdWdoICBvYnN0YWNsZSBjb3Vyc2UgICBzdHVkaW8gd2l0aCBXaGl0ZSBIb3VzZSB0cmVzcGFzc2VyICAgICAgIEVhc3QgIFNlY3JldCBTZXJ2aWNlIHJlc3BvbmRlZCAgRUFTVCBsaWtlIEdyYW5ueSBTbWl0aCAgIGxpa2UgICAga25vdyBwdW1wa2luIHNlZWRzICBjcmF6eSBwbGF5ICBIYXNodGFnIFR3ZWV0ICBmdW5ueSBzb25nIGx5cmljcyBhYm91dCAgZmFsbCAgIHdpdGggQ291bGQgIHN1bmcgUGx1cyBMdWNpbmRhIFdpbGxpYW1zIHBlcmZvcm1zIHdpdGggVGhpcyAgd29ybGQgc2FpZCBnb29kYnllICAgICBncmVhdGVzdCBwbGF5ZXJzICAgR2VvcmdlIENsb29uZXkgZmluYWxseSBzdG9wcGluZyAgIHNob3cgUGx1cyBtdXNpYyBmcm9tICBsZWdlbmRhcnkgVG9uaWdodCBTaG93IGJlZ2FuIHllYXJzICBjbGlwIGZyb20gIGZpcnN0IFRoYW5rICBTdGV2ZSBob3VyICBjaGFuZ2UgdW50aWwgIHNlYXNvbiBvcGVuZXIgIFNhdHVyZGF5IE5pZ2h0IFByb3BzICAgIENocmlzIFByYXR0IFNob3VsZCB0aGlzICAgdGhpbmsgIHdhbm5hIG1lc3Mgd2l0aCB2ZXJ5IGtub3cgdGhhdCAgcHJvYmFibHkgIGpva2UgIGZsYWcgZm9vdGJhbGwgd2l0aCAgIHJlYWwgVGhhbmsgIHRhc3RpbmcgIGJldHRlciB0aGFuIE1hdHRoZXcgTmF0aGFuIExhbmUgIHdpbGwgIFBsdXMgICBTdXBlcmxhdGl2ZXMgV29yZCBTbmVhayB3aXRoICB2ZXJ5IGZ1bm55IENocmlzIFByYXR0IFR5bGVyIGV4cGVjdGluZyAgY2hpbGQgd2l0aCAgZXhjaXRlZCAgICAgZXZlbiBNT1JFIGV4Y2l0ZWQgc2Vhc29uICBoZWFyaW5nIGdvb2QgQ29uZ3JhdHVsYXRpb25zICAgIHN1Y2Nlc3MgIEZ1bm55IGZ1bm55IEFuZHkgU2FtYmVyZyAgIGZhY2UgICBtb3ZpZSB0cml2aWEgd2l0aCBTZWNvbmQgTW92aWUgU3VtbWFyaWVzIEthbnllICB0ZWFjaGluZyAgIGNvbGxlZ2UgY2xhc3MgIHB1bmlzaG1lbnQgICB3aXRoICBzdHVkZW50cyBzYWlkICAgYmVpbmcgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nICBlbWJhcnJhc3NpbmcgYWJvdXQgeW91ciBmcmllbmQgICB3aXRoIENvdWxkIEFuZHkgU2FtYmVyZyBLZXZpbiBEdXJhbnQgIFBsdXMgbXVzaWMgZnJvbSBjb3VudGluZyBkb3duICBBZnJpY2EganVzdCB3YWl0ICAgICBhY3Rpb24gdG9uaWdodCAgVGhhbmsgWWVzdGVyZGF5IHRvZGF5IFRvbmlnaHQgIHNob3cgc3RhcnRzIGFpcmluZyAgZXZlcnkgbmlnaHQgIGNoYW5uZWwgSG9wZSAgZW5qb3kgUGxheWVkICAgTGllcyB3aXRoIGRlYnV0cyB0aGlzICB0b3VnaCBjbHVlcyAgcGxheWVyIGJlaW5nIGludmVzdGlnYXRlZCAgIGNyaW1lIHJpZ2h0IHNob3cgcHJlbWllcmVzIHRvbmlnaHQgIEZyYW5jZSAgIGp1c3QgICBob3VycyBmcm9tICBob3BlICBndXlzIGxpa2UgZm91bmQgICAgUGFyaXNpYW4gU3Vid2F5IGdvaW5nICAgIGxvb29vdCAgIGZhbnMgIHllYWggUGxheWluZyAgIExpZXMgd2l0aCBQbHVzICBoZXJlIE1hbWEgSnVuZSAgU3VnYXIgQmVhciBmcm9tIENvbWVzIEhvbmV5ICAgc3BsaXR0aW5nIFRoZWlyIGxhd3llcnMgIGNpdGluZyB1bmludGVsbGlnaWJsZSBUb25pZ2h0ICAgIG11c2ljIGZyb20gVGhhbmsgIGJlaW5nIG9ubHkgIHNsaWdodGx5IG1vcmUgYXBwZXRpemluZyBuYW1lIHRoYW4gSmFtZXMgU3BhZGVyICBoZXJlIFBsdXMgIGJpcnRoZGF5IG15c3RlcnkgICBoZXJlIHdpbGwgdGVsbCBCaWxseSBDcnlzdGFsIHJldHVybnMgIGFub3RoZXIgIEZsaXAgTWF0dCBEYW1vbiAgbWFraW5nICBmb3VydGggIHRlbGxzICBzdG9yeSAgIGFjdG9yICByZW1lbWJlcnMgICBmb3VyIGtpZHMgIHNlbmQgUGx1cyBSb3NlIENoZWYgTm9idSB5b3VyIHR3ZWV0cyBzaXRzIFN5bmMgQmF0dGxlIHJldHVybnMgd2l0aCBzeW5jIGJhdHRsZSAgIHNwZWNpYWwgZ3Vlc3RzICAgICBjbG9zZSBtZWNoYW5pY3MgaGF2ZSBiZWVuIGFycmVzdGVkICB1c2luZyAgVmF0aWNhbiAgIHNtdWdnbGUgICAgUG9wZSAgaW5jZW5zZSBkcml2ZSBmcm9tICAgY2FsbGVkICB0b29rICBtb25leSAgIG5ldmVyIEhhc2h0YWcgVHdlZXQgICB3b3JzdCBnaWZ0ICAgc29tZW9uZSAga25vdyBldmVyIGdhdmUgIHJlY2VpdmVkICAgd2l0aCBDb3VsZCBSZWFkaW5nICBNb3JuaW5nIEFubm91bmNlbWVudHMgd2l0aCBKdWxpYW5uYSBNYXJndWxpZXMgYWxidW0gUGFydG5lcnMgZmVhdCBCaWxseSBKb2VsICAgVGhhbmtzIGJlbGlldmUgICAgdGFsayAgICAgd2l0aCAgICBjb21lZHkgaWRvbHMgSmVycnkgTGV3aXMgU2NvdGxhbmQgbGVhdmVzICAgbGVhdmVzICAgICByZXNwb25zaWJsZSAgZGVmZW5kaW5nIFRoZW4gUHV0aW4gSnVsaWFubmEgTWFyZ3VsaWVzICBjb21lZHkgbGVnZW5kIEplcnJ5IExld2lzICBQbHVzIFRoYW5rcyAgICBhbG1vc3QgQmVlbiBsaXN0ZW5pbmcgICBTaXJ1c1hNIGNoYW5uZWwgdG9kYXkgICAgdGhpbmsgcmVhZHkgUmljayBQZXJyeSBzYXlzIHNwZW50IG1vbnRocyBwcmVwYXJpbmcgICAgSGlsbGFyeSAgd2hlbiBzcGVudCBUaGFuayBidXR0ZXJudXQgIGJlaW5nICBhcHBldGl6aW5nIGZvb2QgZGVzcGl0ZSBoYXZpbmcgIHdvcmRzICBzcXVhc2ggIHlvdXIgbG92ZSBUb3RhbGx5IHN1cnByaXNlZCAgc2xlcHQgU29tZSBwYWxzIGZyb20gcmVhZCB5b3VyIGZ1bm5pZXN0IG51bWJlciAgc2luZ2xlIHBlb3BsZSAgICAgIGhpZ2hlc3QgICBtYWtlcnMgICBQb2NrZXRzIGp1c3QgaGlnaCBtdXNpYyBmcm9tICBzb21lIHNwZWNpYWwgZ3Vlc3RzIHJlYWQgeW91ciBQaGlsbHkgIGRlY3JpbWluYWxpemluZyBzbWFsbCBhbW91bnRzICAgdGhleSB3ZW50IGZyb20gIENpdHkgIEJyb3RoZXJseSBMb3ZlICAgQ2l0eSB1c2VkICAgICBmcm9udCBwb3JjaCAgeWVsbCAgc3RyYW5nZXJzICB3YWxrZWQgeW91ciBub3NlIHdpdGggIHJ1YmJlciBIYXNodGFnIFR3ZWV0ICBzb21ldGhpbmcgZnVubnkgIHdlaXJkIHRoYXQgICAgdGhvdWdodCB3aGVuICB3ZXJlICAgIHdpdGggQ291bGQgc2hvdyAgbXVzaWMgZnJvbSBzaG93IHRvbmlnaHQgIGp1c3QgS2VpdGggUmljaGFyZHMgbXVzaWMgZnJvbSBQbHVzICBzcGVjaWFsIGVkaXRpb24gRmFtaWx5IEZldWQgd2l0aCBjb21pbmcgIHdpdGggIHRoYXQgc2hvd3MgIGFwb2NhbHlwc2UgIG90aGVyIHBhcnRzIFBsYXlpbmcgRmFtaWx5IEZldWQgd2l0aCAgUGx1cyBtdXNpYyBmcm9tIEFib3V0IFRoYXQgd2l0aCBwZXJmb3JtZWQgdXNpbmcgb25seSBjbGFzc3Jvb20gYWJvdXQgIGZvbGxvdyAgeW91ciBiaWdnZXN0ICAgTG90cyBHYW1lICAgWWVhciAgICAgIE1hcmlvS2FydCAgIEJlc3Qgd2l0aCBXaWlVICBTcG9ydCBTbGljayBUaGF0IHRpbWUgQm9vbWVyIExpdmVzIHRzaGlydCBUaGFuayAgIHBob3RvcyAgIGdpdmluZyAgIGJyZWFrIGZyb20gc2VlaW5nIHBlb3BsZSBkdW1wICAgdGhlaXIgQ2xhc3Nyb29tIEFib3V0IFRoYXQgd2l0aCBMYXJyeSAgbXVzaWMgZnJvbSAgUGx1cyAgIE9wZW5pbmcgY2xhc3Nyb29tIGluc3RydW1lbnQgIFdoYXQgTWF0aGV3IEtub3dsZXMgc2FpZCAgZWxldmF0b3IgZmlnaHQgICAgZmF0aGVyICBuYW1lZCB3YWxrZWQgaW50byAgd3JvbmcgY2xhc3Nyb29tICAgIGVtYmFycmFzc2VkICAgYW55dGhpbmcgICBqdXN0IHN0YXllZCBIYXNodGFnIFR3ZWV0ICAgZnVubnkgIGVtYmFycmFzc2luZyBzdG9yeSBhYm91dCB5b3VyIGZpcnN0ICAgc2Nob29sICAgd2l0aCBDb3VsZCBGb2xsb3cgICBiZXN0IFRvbmlnaHQgU2hvdyBjbGlwcyBmcm9tICBuaWdodCBiZWZvcmUgIGNvbnRlc3RzIGhlbHBzICAgICAgV2hlZWwgIE11c2ljYWwgSW1wcmVzc2lvbnMgYmFjayAgc2Nob29sICB0aW1lICB5ZWFyIHdoZW4gbW9tcyAgYmFjayAgZHJpbmtpbmcgd2luZSAgICBnbGFzcyBpbnN0ZWFkICAgR2F0b3JhZGUgUHN5Y2hlZCAgICAgd2l0aCBicmFuZCAgVG9uaWdodCBTaG93IHdlbGwgIGhhdmUgIGdyZWF0IHN0b3J5ICBuZXh0IHRpbWUgIGNvbWUgICBZb3VyIHBhcmVudHMgTWFkZSBFeGNpdGVkICAgYmFjayB0aGlzIHdlZWsgd2l0aCBDb25ncmF0dWxhdGlvbnMgICB5ZWFycyAgcmVja2xlc3MgRmFudGFzdGljIGZpbmFsIHdhaXQgYWN0dWFsbHkgICAgYmV0dGVyIE1pc3NlZCAgdGhpcyB0aG91Z2h0IHRoYXQgIHdoYXQgTmF0aGFuaWFsIEhvcm5ibG93ZXIgIFJvYmluIHdhbnRlZCBDb25ncmF0dWxhdGlvbnMgICB0cnVlIHRhbGVudCAgIGhpbGFyaW91cyB3cml0ZXJzICBzdGFmZiAgIENvbGJlcnQgTmVlZCAgICAgICB3aXRoICBncmVhdCB0cnVjayBkcml2aW5nIENsaWNrIFRoYW5rICBzaG93aW5nICB3b3JsZCB0aGF0IHRocm93aW5nIGxpa2UgIGdpcmwgIGFjdHVhbGx5ICAgZ29vZCBFdGhhbiBIYXdrZSAgIFNlZGFyaXMgIFBsdXMgbXVzaWMgZnJvbSBUaGFuayAgICBncmVhdCBDaHVjayBTY2FyYm9yb3VnaCAgIHZlcnkgZnVubnkgICAgYWdyZWVkICAgdHVybmVkIEh1bGsgSG9nYW4gIERhdmlkIEhhc3NlbGhvZmYgIHN0YXJyaW5nICAgIG1vdmllICBleHBlY3RlZCAgIHJlbGVhc2VkIEpvc2ggQXJ0aWUgTGFuZ2UgIGNvb2tpbmcgd2l0aCBQbHVzIHlvdXIgc3R1ZHkgc2F5cyAgY29zdHMgIHJhaXNlICBjaGlsZCB1bnRpbCB0aGV5IHR1cm4gIGFib3V0ICAganVzdCBnaXZlIHRoZW0gSGFzaHRhZyBUd2VldCAgIHdlaXJkICBlbWJhcnJhc3NpbmcgdGhpbmcgYWJvdXQgIHJvb21tYXRlICAgQ291bGQgc3RvcHBpbmcgUGx1cyBtdXNpYyBmcm9tICAgVG9uaWdodCBTaG93IFN1Z2dlc3Rpb24gWWFua2VlIFN0YWRpdW0gIGFkZGluZyBtZXRhbCBkZXRlY3RvcnMgIGJlZWYgIFRoZW4gdGhleSBjb250aW51ZWQgc2VsbGluZyBiZWVyICBiYXNlYmFsbCBiYXRzIFdoZW4gIFBhcmRvIHNhaWQgIG5hbWUgICBmaXJzdCB0aW1lICBrbmV3IHRoYXQgICByZWFsbHkgIFNhdHVyZGF5IE5pZ2h0IFRhdmkgR2V2aW5zb24gIGhlcmUgUGx1cyAgcGVyZm9ybWFuY2UgZnJvbSBjb2FjaCAgIGdhbWUgIEZhY2VicmVha2VycyB3aXRoIGFib3V0ICB5b3VyIFJpY2sgaW5kaWN0bWVudCBtaWdodCBodXJ0ICBjaGFuY2VzICAgIEhpbGxhcnkgIGZvdXIgbW9yZSBHaXZpbmcgdGhlc2UgZ3V5cyBUaGVuIHBsYXlpbmcgIGdhbWUgd2l0aCAgbXVzaWMgZnJvbSBDb25ncmF0cyAgIGludGVyYWN0aXZlICAgc29jaWFsIG1lZGlhIFNwZWNpYWwgdGhhbmtzIGJlbGlldmUgIGxvdmUgICAgaGF2ZSAgaWRlYSB3aGF0IHRoaXMgbWVhbnMgIFRoYW5rICB0aGFuayBUaGFuayBibHVlcyBtdXNpY2lhbiBCdWRkeSAgc291bmRpbmcgbGlrZSAgd2VyZSBuYW1lZCAgc29tZW9uZSAgIHRyeWluZyAgcmVtZW1iZXIgeW91ciBIYXZpbmcgIGhhbXN0ZXIgYmFsbCByYWNlIHdpdGggSmFzb24gUGx1cyBjb29raW5nIHdpdGggQW5ubm5uZCAgVG9uaWdodCBTaG93IE1vc3QgbGlrZWx5ICAgdHVybmVkIGRvd24gICBjYXJ0ICB0b29rICB5ZWFycyAgZ3JvdyB0aGF0IE1pbm5lc290YSB0b3duIGp1c3QgZWxlY3RlZCAgICAgbWF5b3IgcGVlcyAgIHN0cmVldCBlYXRzICAgIFRvcm9udG8gc2FpZCBmcm9tICB3aW5uZXIgIHJlYWRpbmcgeW91ciBmdW5uaWVzdCBDb21pY3MgQ29tZSBIb21lICAgc2FsZSBBbHdheXMgICAgIHNvb24gUmljayBQZXJyeSAgc2VjdXJpdHkgICBJb3dhIFN0YXRlICAgIGtlZXAgIGZyb20gZG9pbmcgdGhpcyBicm9rZSAgZmluZ2VyICAgZmlyc3QgICAgIHNlY29uZCAgb3RoZXIgaGFuZCAgc3R1bmcgSGFzaHRhZyBUd2VldCAgICBlbWJhcnJhc3NpbmcgdGhpbmcgdGhhdCBoYXBwZW5lZCAgIHZhY2F0aW9uICAgd2l0aCBDb3VsZCByZXR1cm5zIHRvbmlnaHQgd2l0aCBQbHVzICBzdG9wcGluZyBhY2NlcHQgeW91ciBTdGF5IENoZWNrICAgbGF0ZXN0IERpZ2l0YWwgSG91c2UgQWZ0ZXIgc3BlbmRpbmcgeWVzdGVyZGF5ICAgT2JhbWEgIGJlZW4gICBzaG91bGQgcmVhbGx5ICAgZ29sZiBwYXJvZHkgIEhvdXNlICBDYXJkcyBhaXJzIFRvb2sgIHdhbGsgICB0aGlzIG1vcm5pbmcgdW5kZXIgIHRyZWUgbGluZWQgUGVyZmVjdCBMb29rZWQgbGlrZSAgIHJhaW5pbmcgIGtub3cgdGhhdCBUb25pZ2h0ICAgQ2hyaXMgSGFyZHdpY2sgIG11c2ljIGZyb20gVGhhbmsgRXhwZW5kYWJsZXMgIGJlaW5nIGxlYWtlZCAgdXNlZCAgdW5jb250cm9sbGVkIGxlYWtzICBjYXN0ICBFeHBlbmRhYmxlcyBMb29rIGNvbWluZyAgdmlzaXQgVG9uaWdodCAgIEplZmYgIExhcnRlciAgY29tZWRpYW4gUGx1cyBCcmluZ2luZyBiYWNrICAgZ2FtZSB0b25pZ2h0IHdpdGggUGx1cyB3aXRoICB5b3VyIHR3ZWV0cyBNZWdhbiAgIGZhY2UgIGFnYWluc3QgICAgIGdhbWUgIFBpY3Rpb25hcnkgcGxheSAgaGFzaHRhZyBUd2VldCAgIGZ1bm55ICBlbWJhcnJhc3Npbmcgc2VjcmV0IGFib3V0IHlvdXJzZWxmICAgd2l0aCBDb3VsZCBQaWN0aW9uYXJ5IHdpdGggTWVnYW4gICBQbHVzIHBlcmZvcm1zICBzaXR0aW5nICB3aXRoIEthcmRhc2hpYW4gUGFyaXMgSGlsdG9uIGVuZGVkIHRoZWlyIGZldWQgYWZ0ZXIgSm9obiBLZXJyeSB0aGF0ICAgICAgTWlkZGxlIHNob3cgQ2xpdmUgT3dlbiAgc3RvcHBpbmcgcGxheWluZyBnaWFudCBiZWVyIHBvbmcgd2l0aCBIZWxlbiBNaXJyZW4gcmV0dXJucyAgYW5vdGhlciBlZGl0aW9uIGVwaXNvZGUgICBUb25pZ2h0IGhvdXJzICB0ZWxldmlzaW9uICAgYWxzbyBlcGlzb2RlICAgVG9kYXkgQ29uZ3JhdHMgIGVwaXNvZGVzIG1pc3NlZCAgIGxvdmUgVGhhbmsgQnJpbmdpbmcgYmFjayBzb21ldGhpbmcgIHdpdGggSGVsZW4gUGx1cyBKYW1lcyBDYW1lcm9uICBoZXJlIFRoYW5rIHBlb3BsZSAgc2F2ZSB3aW5lICBiYXNpY2FsbHkgIGhvYXJkZXIgVG9uaWdodCAgIHNob3cgIGhhdmUgTWFydGluIExhd3JlbmNlICBQbHVzIFRoYW5rcyAgSnVsaWEgUm9iZXJ0cyAgYWdyZWVpbmcgIHBsYXkgdGhpcyBjcmF6eSBnYW1lIG1lc3Mgd2l0aCBXaGF0IEp1bGlhIFJvYmVydHMgICAgc2hvdyB0b25pZ2h0IHNob3VsZCAgIEZvcmQgc3RpbGwgc29jaWFsIG1lZGlhIHNpdGUgIFJlcHVibGljYW5zIGNhbGxlZCBkZWZpbml0ZWx5IGJldHRlciB0aGFuICBvcmlnaW5hbCBhYm91dCBub3NlIEJhc2ljIEltcHJvdiAgICBob25vciBiZWluZyB0YXVnaHQgaW1wcm92aXNhdGlvbiBleGNpdGVkICBoYXZlIEp1bGlhIFJvYmVydHMgaGVyZSBQbHVzIGZyb20gIHlvdXIgSm9obiBCb2VobmVyICBpbnNpc3RpbmcgdGhhdCBSZXB1YmxpY2FucyBoYXZlICBwbGFucyAgaW1wZWFjaCBQcmVzaWRlbnQgICB3ZWlyZCB3aGVuIE9iYW1hIGhpZ2ggc2Nob29sIHRoaXMgICAgd2VyZSBzdXBwb3NlZCAgZmlnaHQgICBuZXZlciAgYXJvdW5kICAgYmVjYXVzZSAga2VwdCBoYXZpbmcgcGxheSAgaGFzaHRhZyBUd2VldCAgIHN0b3J5IGFib3V0ICBkdW1iICBlbWJhcnJhc3NpbmcgZmlnaHQgICB3aXRoIENvdWxkIFRvbmlnaHQgICBzaG93ICAgTWlrZSBCaXJiaWdsaWEgUGx1cyBuZWFyaW5nIHNob3cgbnVtYmVyIEphbWVzIFRheWxvciAgc2VlbiBGaXJlICBXaGF0IGhhdmUgICBmdXR1cmUgICB3aWxsIEZpcnN0IGFsYnVtICAgICAgT25seSBLbm93cyB0ZWFjaGVyICBnb25ubmEgdGFrZSAgcGhvbmUgZnJvbSB0d2VldCBQbGVhc2UgdGFsayBhYm91dCB5b3VyIHRydWNrICAgICByZWFsbHkgYWN0dWFsbHkgbG92ZSBwbGFuICB3YXRjaGluZyBCYWNoZWxvciBqdXN0aW4gdGltYmVybGFrZSBjb21pbmcgYmFjayAgIFdoZW5ldmVyICAga25vdyAgbG92ZSB0aGF0IExPVkUgSlVTVElOIFRJTUJFUkxBS0UgIExPVkUgSlVTVElOIGhlYWRpbmcgIGNvbGxlZ2UgICAgcHJldHR5ICBSYWlzZSB5b3VyICAgd2l0aCBjaW5kZXIgTWljaGFlbCBKYWNrc29uIHdlcmUgc3RpbGwgaGVyZSAgY2FtZSAgdGhpbmsgYWJvdXQgICAgdGhpbmsgIGxpa2VkIHdoYXQgaGF0ZSAgIGhhdGUgIGxvdmVkIGhhdmUgZHJpdmVycyAgICAgd2lzaCBUaG91Z2h0IEppbW15IGxpa2UgIGFjdHVhbGx5IFRoZXkgc2hvdCAgYmVmb3JlICBjb3VsZCBBbmRpIGNob3NlIEpvc2ggICBzYWlkICAgIHdhbnRzICBzcGVuZCAgcmVzdCAgIHB1YmxpY2l0eSB0b3VyIFRyaWVkICAgIGdhbWUgd2l0aCBsYXN0IFN1bW1hcmllcyBDbG9zZSBnYW1lICB0aGVkYWlseXNob3cgICBsb3N0ICBuZXh0IExvdmUgWW9yayBUaW1lcyBzYXlzIGN1cnJlbnQgbGF3cyBhZ2FpbnN0IG1hcmlqdWFuYSAgdXNlbGVzcyAgVGhlbiB0aGV5IGxpa2UgVG9uaWdodCAgIHNob3cgIGhhdmUgIENoYWR3aWNrIEJvc2VtYW4gc3RvcHBpbmcgUGx1cyBIYXBweSBCaXJ0aGRheSAgICBsaXR0bGUgc2hvdyAgICAgbW9zdCAgZXZlciAgaG9zdGluZyAgYmVjYXVzZSAgSGlnZ2lucyBUaGFuayAgIHRyYWlsZXIgIFNoYWRlcyAgIGFscmVhZHkgZ2V0dGluZyAgdGh1bWJzICBqdXN0IHdhbm5hIGtub3cgY29va2luZyB3aXRoIFRoZXJlICByZXBvcnRzIHRoYXQgIHBvcHVsYXJpdHkgIGthbGUgIGNhdXNpbmcgIHdvcmxkd2lkZSBzaG9ydGFnZSAgICAgcmVsYXRlZCB3aXRoICAgICAgc2hvdyBUaGFua3MgTW9yZ2FuIEZyZWVtYW4gIGhlcmUgUGx1cyAgcGVyZm9ybWFuY2UgZnJvbSBUd2VlZHkgIHlvdXIgdHdlZXRzIEF1ZHJhIE1jRG9uYWxkICBzaW5nIG1vcmUgWWFob28gQW5zd2VycyB3aXRoICBsaXR0bGUgaGVscCBmcm9tIEZvcmQgYnJva2UgIHBpbmt5ICB3aGlsZSB3b3JraW5nIFBlb3BsZSAgICBsb3RzICAgUkVBTExZIHBhcmVudHMgY2xlYXJseSBmb3Jnb3QgICAgIGJpcnRoZGF5IGNha2UgIHRoZXkgIGNhbmRsZXMgICBjb2ZmZWUgY2FrZSBIYXNodGFnIFR3ZWV0IHNvbWV0aGluZyAgZW1iYXJyYXNzaW5nIHRoYXQgaGFwcGVuZWQgICBiaXJ0aGRheSAgIHdpdGggQ291bGQgc2hvdyB0b25pZ2h0ICBQbHVzIHBlcmZvcm1zICAgVG9uaWdodCBTaG93IFN1Z2dlc3Rpb24gbWFkZSAgICBkZWJ1dCAgIHNob3cgbGFzdCAgQ2hlY2sgd2FpdCB3aGF0IG9yZGVyIFRvbmlnaHQgQWx3YXlzICBncmVhdCBvdXRkb2VzIGhpbXNlbGYgbWlucyAgIGRlYnV0ICAgIFRvbmlnaHQgVGhhbmsgICB0aGFuayB3aWxsICBtaXNzIGZpbmFsZSAgUmVhbCBIb3Vzd2l2ZXMgICBZb3JrIENpdHkgS2FueWUgdG9sZCAgICAgbW9yZSAgIFdoaWNoIGV4cGxhaW5zIFBsYXllZCAgd2l0aCBLYXRlIEh1ZHNvbiAgIHNob3cgbGFzdCBuaWdodCBUb25pZ2h0ICAgUGxheWluZyAgd2l0aCBLYXRlIEVsbGFyIENvbHRyYW5lIHN0b3BzIHBlcmZvcm0gIHNvbmcgIEFtZXJpY2EgIFRPTklHSFQgICBUb25pZ2h0IFRoYW5rIEJveXMgICBiZWluZyAgbXVjaCBiYW5kIG5hbWUgdGhhbiBIYXBweSBUb25pZ2h0ICAgc2hvdyAgQ2hheiAgZnJvbSBQbHVzIExhc3QgbmlnaHQgICBmYWNlZCAgICBnYW1lICBGbGlwIFRhdHRvbyByZW1vdmFsICAgICBmYXN0ZXN0IGdyb3dpbmcgaW5kdXN0cmllcyAgIFRlcXVpbGEgc2F5cyBmbGlwICB3aXRoICBQbHVzIHlvdXIgZnVubmllc3QgdHdlZXRzIEtuZXcgIFdlcmUgV2FpdGluZyAgRmxpcCB3aXRoIGZyaWVuZCAgIGRydW5rIHdoZW4gIGdpcmxmcmllbmQgYnJva2UgIHdpdGggIHRoYXQgICAgYnJlYWsgIHdpdGggIGFnYWluICBuZXh0IEhhc2h0YWcgVHdlZXQgIGZ1bm55ICBhd2t3YXJkIGJyZWFrdXAgc3RvcnkgdGhhdCBoYXBwZW5lZCAgICBzb21lb25lIGVsc2UgIHdpdGggQ291bGQgU3RlcGhlbiBNb3llciAgbXVzaWMgZnJvbSBzaG93IFBsYXlpbmcgICBzdW1tZXIgZ2FtZSB3aXRoIFBsdXMgIHN0b3BwaW5nICAgbXVzaWMgZnJvbSBZZXN0ZXJkYXkgICBXb3JsZCAgICBvbmx5IGNhdWdodCAgbGFzdCBjb3VwbGUgbWludXRlcyAgICAgIHdob2xlIERpYW5lIEtydWdlciAgUGx1cyAgVG9uaWdodCBTaG93IFNjcmVlbmdyYWJzICAgcGVyZm9ybWFuY2UgZnJvbSBUaGFuayBmbGlwICAgIGxpa2UgIGNhbGwgZG9sbGFyIGZvb3Qgc3RvcnkgdG9sZCAgIFJlaW5lciAgIHNob3cgU3VjaCAgZ3JlYXQgR3JlYXQgc2hvdyAgIGZyb20gR2FicmllbCBJZ2xlc2lhcyBQbHVzIExhZHkgIEtub3cgcGVyZm9ybWVkIGZpcnN0ICAgIFR1cmtleSBUZWxsIHlvdXIgdGhpcyAgIHNpbmdpbmcgIHNvbmcgdGhhdCAgd3JpdHRlbiAgd29yZHMgbWFraW5nIHRoZW0gRGFuYSBDYXJ2ZXkgIGhhcHB5IHRoYXQgIHBsYXllZCBMYWR5ICBsYXN0IHRlZW5zIGtub3cgICBtYWtlIHNpbXBsZSBmaW5hbmNpYWwgaVR1bmVzICAgZW50aXJlIGJ1c2luZXNzIGhlcmUgIGRvaW5nIHNvbWV0aGluZyByZWFsbHkgUGx1cyBwZXJmb3JtcyBncmVhdCBKdXN0IGZvdW5kICAgd2VyZSBub21pbmF0ZWQgICBFbW15ICAgZGF1Z2h0ZXIgc2FpZCAgZmlyc3QgRGFpbHkgaGFwcHkgICBub21pbmF0ZWQgICBFbW15IHRoaXMgIGV2ZW4gaGFwcGllciAgaGF2ZSAgZXhjdXNlICAgY2hhbXBhZ25lICAgYWxyZWFkeSBkcmlua2luZyBnYW1lICAgbW9zdCB0d2VldGVkIHNwb3J0cyBldmVudCBVbmZvcnR1bmF0ZWx5IG1vc3QgIHRob3NlIHR3ZWV0cyBjYW1lIGZyb20gb3BlbiBpbnZpdGF0aW9uICAgYW55dGltZSBmcmllbmRzICAgYnJvdWdodCBldmVyeXRoaW5nICBuZWVkZWQgIG1ha2UgYmx1ZWJlcnJ5IHBhbmNha2VzICAgY2FtcGluZyB0cmlwIGV4Y2VwdCAgZnJ5aW5nIEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyBmdW5ueSB0aGF0IGhhcHBlbmVkIHdoaWxlIGNhbXBpbmcgICBzdW1tZXIgY2FtcCAgIHdpdGggQ291bGQgVHJ5aW5nICAgYnJhbmQgIGdhbWUgd2l0aCBQbHVzIHN0b3BzIGJlbGlldmUgICByYWlzZWQgIEtpY2tzdGFydGVyICBtYWtlICBwb3RhdG8gICBXaG9sZSBGb29kcyAgc291bmRzIGFib3V0IFRvbmlnaHQgcGxheWluZyBDaGFyYWRlcyB3aXRoIEhhbGxlIEJlcnJ5IFBsdXMgcGVyZm9ybXMgdGhlaXIgIGdvbm5hIE5laWwgWW91bmcgc2luZ3Mgd2l0aCBTdGlsbHMgTmFzaCBqaW1teSAgc2hvdWxkIGZvbGxvdyAgYmVjYXVzZSAgc2luZyBmYW5jeSAgIG5laWwgeW91bmcgdm9pY2Ugc2luZ2luZyBGYW5jeSAgTmVpbCBZb3VuZyAgZXhhY3RseSB3aGF0ICBuZWVkZWQgICBsaWZlIHJpZ2h0IENvbWluZyB0dXJuICB5b3VyIG1pc3NlZCB0aGlzIHNvb29vICBncmVhdCBTaG91dCAgIEROaWNlICAgbmljZSBXaGF0ICBFeHBlY3Qgd2hlbiAgIGV4cGVjdGluZyBUb25pZ2h0IFNob3cgICBIZXJlIENvbmdyYXRzICBKb2V5IENoZXN0bnV0ICAgIGhvdGRvZyBlYXRpbmcgICByaXZhbCBKb25ueSBIb3Rkb2cgICBjaGVzdG51dCBlYXRpbmcgdGhpcyBldmVuaW5nIGJyaW5nICAgTmVpbCBZb3VuZyBMb29raW5nIGZvcndhcmQgICBzaG93IGdvbm5hICAgIGd1eXMgVGhhbmsgICAgVGhhdCAgSGFwcHkgYXZhaWxhYmxlIHRvZGF5ICBjb3VsZCBhbHdheXMgYWxtb3N0IGNyaW1pbmFsICBtYW55IHBlb3BsZSBmb3JnZXQgICBKYW5laXJvIGZyaWVuZCB0aGlzICBtb29zZSBjYXJ0b29uIHRhbGtpbmcgTW9vc2UgICAgbG92ZSB0aGVzZSBjb25ncmF0cyAgeW91ciAgd2FudCBKdXN0IGhlYXJkICBjaGFubmVsIHBhc3NlZCAgYmlsbGlvbiBUaGF0ICBUaGFua3MgIHdhdGNoaW5nIFRoYW5rIHBlb3BsZSB3ZWFyaW5nIHBvbmNob3MgIHdhdGVyICBsaWtlIGhhdmluZyAgICBtdWNoICAgaGF0ZSBoYXZpbmcgZmluYWwgbmlnaHQgIE9ybGFuZG8gd2l0aCBicm9hZGNhc3RpbmcgIGFib3V0IFBsZWFzZSBlbmpveSBUaGVyZSBtaWdodCAgICB2aWRlbyBnYW1lIGJhc2VkICAgIGp1c3QgIGFyb3VuZCAgICBnb2xkIGNvaW5zIGZpbmQgY29udmluY2VkICByaWRlICByb2xsZXIgY29hc3RlciB3aXRoIENvbmdyYXRzICAgdGVhbSAgd2lubmluZyB0aGVpciBvcGVuaW5nIFdvcmxkICBUaGV5ICAgR2V0dGluZyBBbWVyaWNhbnMgIHdhdGNoIHNob3cgcmlkaW5nICByb2xsZXIgY29hc3RlciB3aXRoICAgaGVyZSAgdGFsayBwZXJmb3JtIExlQnJvbiAgcmVib3VuZHMgYXNzaXN0cyAgIGxvc3MgbGFzdCBXaGlsZSAgdGVhbW1hdGVzIHRoZXkgc2FpZCAgR2hhbmEgICB3aGVlIEhhcHB5ICAgIGZhdGhlciBUaGFuayAgICBuaWNlICAgIGJlc3QgSG9wZSAgZ3V5cyAgc3RheSBDaGFwcGVsbGUgICBncmVhdCBLYW55ZSBzdG9yeSAgIGhhdmUgICBwcmV0YXBlIHdpdGggQ2hhbm5pbmcgIEpvbmFoIHdhbnRlZCAgICB3YXRjaCBpbnN0ZWFkICB0aGluayAgYmVjYW1lICBodWdlIGhvY2tleSBRdWljayB1bmJlbGlldmFibGUgQ29uZ3JhdHMgV2VsbCAgIG1ha2UgIGVhc3kgR3JlYXQgQXR0ZW50aW9uIFRvbmlnaHQgU2hvdyAgdGltZSAgeW91ciAgbWlzcyAgVG9uaWdodCBTaG93IFdoYXQgIFdoYXQgIFdoYXQgVGhhbmsgVGhyb3diYWNrICBiYXNpY2FsbHkgVGFsa2luZyB3aXRoICB2ZXJ5IGZ1bm55ICBwZXJmb3JtcyB3aXRoIEJvZHkgQ291bnQgaG9ub3IgICBFdm9sdXRpb24gICBEYW5jaW5nIHdpdGggc2hvdyBGaW5kICAgdHJ1ZSBpZGVudGl0eSAgSGFzaHRhZyAgIGJlbGlldmUgIHdpbGwgV29ybGQgIHN0YXJ0ZWQgdGhhdCBzcGVjaWFsIHRpbWUgd2hlbiBBbWVyaWNhbnMgIGJhcnMgZ3Vlc3Mgd2F0Y2hpbmcgVEhJUyBUb25pZ2h0ICAgc2hvdyAgaGF2ZSAgc3RvcHBpbmcgUGx1cyBtdXNpYyBmcm9tIHlvdXIgV2hhdCAgbmljZSBmaXJzdCAgVGhhbmsgU09NRU9ORSBKVVNUIFlFTExFRCBKT0VZIENMQU1TIElOVE8gIENBTUVSQSBHZW9yZ2UgTWFydGluIGpvaW5lZCBUd2l0dGVyICBhbHJlYWR5ICBmb2xsb3dlcnMgIGp1c3QgIGNhc3QgSGFzaHRhZyBUd2VldCBzb21lIHdlaXJkICAgYWR2aWNlIHRoYXQgeW91ciAgIHNvbWVvbmUgIGdhdmUgICB3aXRoIENvdWxkIE1hbWEgSnVuZSAgSG9uZXkgICAgc3RhbmQgIGZyb20gUmVhbCBGYWtlIEFybXMgcmV0dXJucyB3aXRoIFByb3MgIEdvaW5nICAgV29ybGQgRGVidXQgICBEdW1iZXIgdHJhaWxlciBhaXJzIENvbmdyYXRzIExhd21ha2VycyAgSmFtYWljYSAgbGVnYWxpemUgV2hpbGUgbGF3bWFrZXJzICBJdGFseSAgbGVnYWxpemUgIElyZWxhbmQgIGxlZ2FsaXplIGJvdXQgIHRpZ2h0IEplbm5pZmVyIExvcGV6IHNob3cgRG9pbmcgc29tZXRoaW5nICB3aXRoIFBsdXMgIG11c2ljIGZyb20gcmV0dXJuICB3aXRoIEplbm5pZmVyIExvcGV6IFRoaXMgSmFjayBXaGl0ZSBQZXJmb3JtYW5jZSAgTGF6YXJldHRvIGNvbWluZyAgd2lsbCByb2NrIHRpZ2h0IHBhbnRzIFR1cm4gQ2xpbnQgSmFjayBXaGl0ZSBiZWxpZXZlIHNpdHRpbmcgbmV4dCAgSm9hcXVpbiBQaG9lbml4ICAgUmFuZ2VyIEhpbGxhcnkgQ2xpbnRvbiB3YW50cyAgICBwcmVzaWRlbnRpYWwgcGxhbnMgICAgV2hlbiBhc2tlZCB3aGVyZSAgc2FpZCBUaGlua2luZyBhYm91dCBwdXR0aW5nICB0aWdodCBwYW50cyAgIGRvd24gcHN5Y2hlZCAgQ2xpbnQgRWFzdHdvb2QgIEphY2sgV2hpdGUgVGhhbmsgVGFjbyAgYmVpbmcgIGJ1cnJpdG8gc3R1ZmZlZCBpbnNpZGUgIHN0dWZmZWQgaW5zaWRlIFRoaXMgUHJvamVjdCBNb3JwaGV1cyB2aXJ0dWFsIHJlYWxpdHkgaGVhZHNldCBkZW1vICBHb25uYSBwbGF5ICB3aXRoIGJlaW5nICBhc3Ryb3BoeXNpY2lzdCBtYWtlICAgIHRoYXQgdmVzdCAgeW91ciBhdmF0YXIgd2l0aCAgIHNob3cgUGx1cyB0ZWNoIGV4cGVydCBmcm9tIFRvYmFjY28gY29tcGFuaWVzIHNvbGQgICAgICAgSW1hZ2luZSAgd2l0aCBsZWdhbCBUcmllZCAgIGJyYW5kICBnYW1lIHdpdGggICBzaG93IGxhc3QgQ2hpbmVzZSAgc2F5cyAgcGFuZGEgIHByZWRpY3QgIG91dGNvbWUgICBXb3JsZCAgcGFuZGEgICBzdGFkaXVtcyB3aWxsIHN1bW1lciAgIGFza2VkICBwYWludCAgY3VyYnMgIGZyb250ICAgICByaWdodCAgICBhbG1vc3QgcGxheSAgaGFzaHRhZyBUd2VldCAgIHdlaXJkZXN0ICB3b3JzdCBzdW1tZXIgICBldmVyICAgIHdpdGggQ291bGQgdGhhdCAgdW5ibG9ja2VkICB5b3VyIGNoZWNrICAgWW91VHViZSBQbGF5aW5nICAgZ2FtZSB3aXRoICAgc2hvdyBQbHVzICBtdXNpYyBmcm9tIFRlYm93IHNheXMgc3RheWluZyAgIHBsYXkgICAgYm9zcyAgdGhlc2UgV2FmZmxlIFRhY29zIGdvbm5hIG1ha2UgYXNrcyAgbXVzaWMgZmFucyB3aGF0IHRoZXkga25vdyBhYm91dCBSeWFuIFdlZWQgZGlzcGVuc2FyaWVzICAgSm9zZSB3aWxsIGdpdmUgd2VlZCAgcGVvcGxlICBXaGljaCAgYmFja2ZpcmUgd2hlbiAgd2lubmVyICAgZWxlY3Rpb24gVG9uaWdodCBiYWNrIHdpdGggICB3aWxsIERlZmluaXRlbHkgZ29ubmEgdGFsayBhYm91dCB0aGlzICAgc2hvdyAga25vdyAgIHRvdWdoICB3ZWxsIFRoZXNlIHBob3RvcyAgVGhhbmsgIEdvb2QgV291bGQgIGV2ZXIgYnJpbmcgeW91ciBzaG93ICBOYXNodmlsbGUgICBTbWFzaHZpbGxlIHdvdWxkIGxvdmUgIGhhdmUgaGF2ZSBqdXN0IHBpbmNoIHlvdXJzZWxmICBiZWxpZXZlIHRoYXQgICBkb2luZyB3aGF0ICAgZG9pbmcgZW5qb3lpbmcgeW91ciAgICBnaXZlICAgbmFtZSAgbmVlZCAgQmVzdCB2ZWhpY2xlIGV2ZXIganVzdCAgIHNuaWNrZXJzICAgd2hlbiAgIHdyb25nICBsb3ZlIEpJTU1ZIFlPVVIgRkFWT1JJVEUgQ09VTlRSWSAgTkVFRCAgTG9hZGVkICAgbGlrZSBSaXZlciBCYW5rIHJpZ2h0IGtub3cgd2hhdCAgaGF2ZSAgICAgV2FmZmxlICBQYW5jYWtlIEZsYXBqYWNrcyB0aGlzICAgIHNob3cgICB5ZWFycyAgc2hyZWRkaW5nIENoaWxkIHJlYWR5ICBnaXZlICAgcGhvdG8gICBjaG9vc2luZyAgcGFydCAgIGZyaWVuZGx5IFRoaXMgd2lsbCAgeW91ciAgYXZhdGFyIGhhdmUgICB0aGlzICB3ZWFyIGplcnNleSAgIGxvdmUgd2lsbCBjb250YWN0ICBzaG9ydGx5IHdpdGggIE5ldmVyICBhZ2FpbnN0IFdoYXRldmVyIGhhcHBlbnMgcHJvcHMgSnVzdCAgIHBlcnNvbmFsaXplZCBnb2xmIGJhbGxzICB3aGVuICAgdGhlbSBpbnRvICAgIGZpbmQgV2FubmEgc3RyZWFtICBnb29kIFRoYW5rICAgIHNvdW5kaW5nIGxlc3MgbGlrZSAgcGxheW9mZiB0ZWFtcyAgbW9yZSBsaWtlICAgIG1hbGUgc3RyaXAgZmluYWxseSAgV2lsbCBGZXJyZWxsICBDaGFkIFNtaXRoIHRoaW5rIHBlb3BsZSAgZmluZGluZyAgYWJvdXQgSG9seSBUaGlzICByZWFsbHkgQ2hhZCBXaWxsIERydW0gVGhlcmUgIGFscmVhZHkgICAgaGVhdCAgcGVudCAgY29uZnVzaW9uIGNvbWluZyBmcm9tICBkcmVzc2luZyByb29tcyAgV2lsbCBGZXJyZWxsIHNob3cgV2lsbCBGZXJyZWxsICAgIGRydW0gIHlvdXIgaGF2ZSAgTWVtb3JpYWwgIFBhcmFkZSBDb29sZXIgU2Nvb3RlciBSYWNlIFBvcGUgRnJhbmNpcyAgYnJpbmdpbmcgIHJhYmJpICAgTXVzbGltIGxlYWRlciAgIEhvbHkgTGFuZCB0aGlzIEJhcnRlbmRlcnMgYmVlbiBleHBlY3RpbmcgR2FyeSBGcmljayAgbWFraW5nICBhcHBlYXJhbmNlICAgVG9uaWdodCBTaG93IEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyAgZW1iYXJyYXNzaW5nIHRoYXQgaGFwcGVuZWQgIHByb20gICB3aXRoIENvdWxkIEdyZWF0IEppbW15ICAgZG9pbmcgd2l0aCBwbGF5aW5nIENoYXJhZGVzIHdpdGggQ2hhcmxpemUgVGhlcm9uIEpvc2ggSGFydG5ldHQgcGx1cyBtdXNpYyBmcm9tIFRvbmlnaHQgIExpYW0gbXVzaWMgZnJvbSBhbm90aGVyIGVkaXRpb24gR2V0dGluZyByZWFkeSAgIGdhbWUgQ2hlY2sgIGJ0d24gIG9mZmljaWFsIGhhdmUgICB3aXRoIERFVEFJTFMgdGFsa2luZyBqdXN0IGdhbWUgICB3aG9sZSBXaG9sZSBoYXZlICAgd2FudCBZb3VwcGkgICBtZWNoYW5pY2FsIGJ1bGwgIENoZXogaGF2ZSAgdHdlZXQgIHBpY3MgIHlvdXIgbWFzY290IHdhbGtpbmcgYXJvdW5kIE1vbnRyZWFsICBwdWJsaWMgd2VhcmluZyAgUmFuZ2VycyBUaGFuayBwb29sICBiZWluZyBzb21ldGhpbmcgIHByZXRlbmQgIGtub3cgICAgd2hlbiAgd2FubmEgbG9vayBjb29sIGNsZWFybHkgIHRha2luZyB0aGlzICAgIGJlc3QgdGVhbSBkb2luZyAgdGFsayB3aXRoIG11c2ljIGZyb20gSmVubmlmZXIgTGF3cmVuY2UgcGxheXMgICAgcGVyZm9ybWFuY2UgZnJvbSBXaGVuICAgICBSb290cyBrbm93ICAgcGVyZmVjdCAgICBGaXJzdCBIYXNodGFnIFR3ZWV0ICBzb21ldGhpbmcgIGVtYmFycmFzc2luZyBhYm91dCB5b3VyIG5laWdoYm9yICAgd2l0aCBDb3VsZCBBbm90aGVyICBzaG93ICBSb2JlcnQgRHV2YWxsICBtdXNpYyBmcm9tIGhlcmUgIHRhbGsgIHBsYXkgc29tZSBUYXlsb3IgS2l0c2NoICAgcmV0dXJuIHJlY29yZHMgIHZpbnlsIHJlY29yZCAgSmFjayBib290aCBmbG93biAgZnJvbSBNYWtpbmcgaGlzdG9yeSB0b25pZ2h0IE5laWwgWW91bmcgIGdvaW5nICBwZXJmb3JtICBwcmVzcyAgdmlueWwgd2l0aCAgaGVscCAgSmFjayBXaGl0ZSBsaXZlIExvdWlzIEphY2sgV2hpdGUgIE5laWwgUmVoZWFyc2FsICBiaXJ0aGRheSBzb25nICBIYXJtb25pZXMgYWx3YXlzIHNvdW5kIGJlc3QgVGltZSBHYWxzIHNlcmVuYWRlZCAgIGxhc3QgQmVzdCAgVGhhbmtzIHNob3cgSmFtZXMgbXVzaWMgZnJvbSBwbHVzIExvb2sgICBiYWJ5IFdpbm5pZSAgIGNhbWVvICAgZmlyc3QgIG1vbnRocyAgIGdyZWF0IE1pY2hhZWwgIEludmVudG9ycyAgeW91ciBwbGF5ICBIYXNodGFnIFR3ZWV0ICAgIGVtYmFycmFzc2luZyB0aGluZyB5b3VyICAgc2FpZCAgd2l0aCBDb3VsZCBUb25pZ2h0ICBKYWRldmVvbiBDbG93bmV5IG11c2ljIGZyb20gc2hvdyB0b25pZ2h0ICAgbWlnaHQgc2hvdyB0b25pZ2h0ICAgZG9pbmcgc29tZXRoaW5nIFBsdXMgIG11c2ljIGZyb20gVG9uaWdodCAgQnJpZSBMYXJzb24gIHJlYWwgTGF0aW1vcmUgIHNpdHRpbmcgIHdpdGggQW5kcmV3IEdhcmZpZWxkICAgIGdvaW5nICByYWNlIHBvY2tldCB0YWxrIHdpdGggTWFyeSBMeW5uICBtdXNpYyBmcm9tIHdlcmUgZnVubnkgcGxheSAgcGxheSAgcmlkZSAgaG9yc2UgcGxheSAgSGFzaHRhZyBUd2VldCAgIGZ1bm55ICBhYm91dCAgS2VudHVja3kgRGVyYnkgICB3aXRoIENvdWxkIHNob3cgbXVzaWMgZnJvbSAgQm90aCAgICBDZWxlYnJpdHkgUGhvdG9ib21iIHdpdGggQmVlciBwb25nIHdpdGggdGFsayB3aXRoIG11c2ljIGZyb20gRGF2aWQgU3luYyBCYXR0bGUgd2l0aCBFbW1hIFN0b25lIHNob3cgd2l0aCBFbW1hIENhbm8gIFRoaXMgICBnb25uYSBsYXVnaCB3aGVuICBzZWVzICBzaG93IHNob3cgRXBpYyAgU3luYyB3aXRoIEVtbWEgU3RvbmUgcGx1cyBtZWV0cyAgd2l0aCBzb21lIFN5bmMgQmF0dGxlICBEb2luZyBhbm90aGVyICB0b25pZ2h0IHdpdGggRW1tYSBtdXNpYyBmcm9tIG5vdGljZSB0aGF0ICAga2luZCAgY29weWluZyAgd2l0aCAgd2VpcmQgIHlvdXIgd2VpcmQgaG9yc2UgIHF1aXRlIHlvdXIgZmF2b3JpdGUga2luZCAgcHJvYmFibHkgIHBhbGUgUHJvcHMgICB0YWxlbnQgVGhpcyAgIGNyYXp5IEdyZWF0IHNob3cgbXVzaWMgZnJvbSBQdXRpbiBPYmFtYSB3b3JrICB0aGVpciBpc3N1ZXMgaGVyZSAgaGVscCBPYmFtYSBQdXRpbiB3b3JrICB0aGVpciBncmVhdCBtdXNpYyBmcm9tIHllYWggVUNvbm4gY2hhbXAgICBnb2luZyBkb3d3d3duIHdlZGRpbmcgdGhleSBhbm5vdW5jZWQgYnJpZGFsIHBhcnR5ICAgZHJhbWF0aWMgY2xvdWQgIHNtb2tlICAgd2FuZGVyZWQgdGhyb3VnaCBsb29raW5nIEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyAgZW1iYXJyYXNzaW5nIHRoYXQgaGFwcGVuZWQgICB3ZWRkaW5nICAgd2l0aCBDb3VsZCBwbGF5aW5nICBicmFuZCAgdGFsayB3aXRoIG11c2ljIGZyb20gd2F0Y2ggdG9uaWdodCBiZWNhdXNlIHRvbW9ycm93IGV2ZXJ5b25lIHdpbGwga25ldyAgQnJhaW53YXNoICAgZ29vZCBzaG93ICBKb2huIE9saXZlciAgbXVzaWMgZnJvbSBCcmlhbiBXaWxsaWFtcyByYXBzIFNub29wIEhpbGxhcnkgIGJvb2sgd2lsbCAgY2FsbGVkICAgaG9waW5nICB3aXRoIGZyb20gQnJpYW4gV2lsbGlhbXMgIHRhbGsgd2l0aCBDaHJpc3RpbmEgSGVuZHJpY2tzIENoZWYgV2hpY2ggIFRha2UgdGhpcyBxdWl6ICBmaW5kICAgSm9raW5nIFdoaWNoICBUYWtlIHRoaXMgcXVpeiAgZmluZCBUaGFua3MgYmFjayB3aXRoICAgIGZyZXNoIHNob3cgVGhhbmsgICB3YXRjaGluZyAgdGhhbmtzIFRvbmlnaHQgIHdpbGwgIGZpcnN0IFRvbmlnaHQgICBzZWVuICAgIGtub3cgICAgaGF2ZSBwbGVhc2UgZW5qb3kgYmVsaWV2ZSBkb25lIFRvbmlnaHQgU2hvd3MgIHdhbnQgIHRoYW5rICBzdGFmZiAgIGNyZXcgIHdvcmtpbmcgIGhhcmQgIG1ha2luZyAgIG11Y2ggbWlsbGlvbiBUaGFua3MgcHJvbWlzZWQgIG9mZmljZSBzYW5nIEdyZWF0IEZyaWRheSBOaWNvbGFzICAgZ2lhbnQgcGVyZm9ybWFuY2UgZnJvbSBLSVNTIGV4Y2l0ZWQgIGhhdmUgcGVyZm9ybWluZyAgc29uZyBmcm9tIENhYmFyZXQgS2V2aW4gIHBlcmZvcm1hbmNlIGZyb20gQ2FiYXJldCB5b3VyIGxpa2UgIHdlbGNvbWUgIGdyZWF0ICBuZXR3b3JrIGxhdGUgbmlnaHQgIGFsc28gY29uZ3JhdHVsYXRlICAgICBKaW1teSBTdGV2aWUgTmlja3Mgc2luZ2luZyBTdG9wIERyYWdnaW4gIEhlYXJ0IEFyb3VuZCBUb25pZ2h0IHNob3cgcGFyZW50cyB1c2VkICBtYWtlICB3ZWFyICBmb290YmFsbCBoZWxtZXQgd2hlbiAgdXNlZCAgc3dpbmcgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nICBlbWJhcnJhc3NpbmcgYWJvdXQgeW91ciBmYW1pbHkgICB3aXRoIENvdWxkIEdyZWF0IG11c2ljICAgc2hvdyBwZXJmb3JtcyBEYXZlIEdyb2hsIHRhbGsgQW5uZSBIYXRoYXdheSB3aWxsICBoZXJlICBkb2luZyBzb21ldGhpbmcgdGFsayB3aXRoIG11c2ljIGZyb20gY3Jhc2hlZCBkdXJpbmcgIFBlb3BsZSB3ZXJlIFRoZXkgbmVpZ2hib3IgcGF5cyBnb29kIG1vbmV5IEdvb2Qgc2hvdyBDb2xpbiBtdXNpYyBmcm9tIHNpdHRpbmcgIHdpdGgga2luZGVyZ2FydGVuIGNsYXNzIG1hZGUgdGhlaXIgIGluc3RydW1lbnRzICBzYW5nIGFsb25nIHdpdGggc2V0dGluZyAgd29ybGQgcmVjb3JkICAgIGxhemVycyAgIHNob3cgVHVuZSBUb25pZ2h0IHBsYXlpbmcgICBnYW1lIHdpdGggRGFuaWVsIHRhbGtpbmcgd2l0aCAgaGF2ZSBtdXNpYyBmcm9tIEhhc2h0YWcgVHdlZXQgc29tZXRoaW5nIGZ1bm55ICB3ZWlyZCBhYm91dCAgd29yc3QgIGV2ZXIgICAgd2l0aCBDb3VsZCBHb29kIHNob3cgIG11c2ljIGZyb20gQ29uZ3JhdHVsYXRpb25zICAgb2ZmaWNpYWwgd2lubmVyICAgY29udGVzdCB3aXRoICBhbWF6aW5nIHRpbWUgcGVyZm9ybXMgIHNsYW0gcG9lbSAgIHNpdGNvbSBNZWV0cyBTaG93IHRoZW0geW91ciBzdXBwb3J0ICB0d2VldGluZyB3aXRoIHRoZWlyIFBldGUgQmFyYmFyYSBndXlzIE9ubHkgbGVmdCAgIFdpbGJ1ciBSb3VzZSBQZXRlIFBvcnppbyBCYXJiYXJhIFdpbGtpbnNvbiB0aGFua3MgIEJpbGx5ICBDaGV3YmFjY2EgICBib3lzICAgZGFuY2UgbGFzdCBjaGFuY2UgIFRoYW5rICBjaGVmICByb2NrIFRvbmlnaHQgZ2l2ZXMgc29tZSBsb3ZlICAgY3Vyc2VkICBjcnVzaGVzICB3aXRoIEdyZWF0IHNob3cgbXVzaWMgZnJvbSBjaGVja2luZyBZb3VUdWJlICAgICB3YXRjaCAgbGl2ZSBzdHJlYW0gZnJvbSAgIEludHJlcGlkIEhhbmcgIHRoZXJlIGNvbnRlc3RhbnRzICAgICBGaW5nZXJzICAgV2F0Y2ggdG9uaWdodCAgZmluZCAgICBjaGVjayAgIGxpdmUgc3RyZWFtICBZb3VUdWJlIHN0YXJ0ZWQgIFdhdGNoICBzaG93ICBtb3JlIGluZm8gIGNoZWNrICAgbGl2ZSBzdHJlYW0gc2hvdyBSaWNreSAgc3RhcnRpbmcgUGFzc2VuZ2VyIEF3YXkgICBncmVhdCBsYXN0IEphbnVhcnkgSm9zaCBIb2xsb3dheSAgIHBlcmZvcm1hbmNlIGZyb20gYmVzdCB0aW1lIHdpdGggd2F0Y2hpbmcgIFRvbmlnaHQgR29vZCAgdGFsa3MgICBUb25pZ2h0IFNob3cgICBmaXJzdCB0aW1lICBvdmVyIGRvZXMgQmlsbCBDb3NieSAgZG93biAgdGhpcyBpbnRlcnZpZXcgc2VyaW91c2x5IHdhaXQgIHdpdGggICBzZXJpb3VzbHkgaGlsYXJpb3VzIHNob3cgIGxpdmVzICBLYW5zYXMgQ2l0eSBzZW50ICB0aGlzIHBpY3R1cmUgICBkYXVnaHRlciBIYXNodGFnIFR3ZWV0ICAgcGljdHVyZSAgeW91ciBiYWJ5IG1ha2luZyB0aGlzICBGb3JkIGZhY2UgIENvdWxkIGZhdm9yaXRlIGd1ZXN0cyAgICBzaG93IHRvbmlnaHQgIGdyZWF0IEFsd2F5cyAgaGFuZ2luZyAgd2l0aCBuZWVkICAgVG9uaWdodCBTaG93IERpZ2l0YWwgT3JpZ2luYWwgc29vbiBuZWVkICAgbGVhdGhlciAgIGhlbHAgIERhdmlzIHlvdXIgaGlwcyBTaGFraXJhIHR5cGUgV2hhdCBhYm91dCBOaWdodCBOZXdzIFRoYXQgICBmYXZvcml0ZSB0aGluZyAgIHdyaXRlcyB0aGF0IHR5cGUgZXZlciBnb2luZyAgICBtaXNzICAgIHdyaXRlcyB0aGF0IHR5cGUgVG9uaWdodCBkb2luZyAgICAgd2l0aCBKdWRlICB0YWxrICBtdXNpYyBmcm9tIFRvbmlnaHQgU2hvdyBTdGFycmluZyBNYWtldXAgVmluZSBzY2FyeSBFeGNpdGVkICBBcm5vbGQgICBzaG93ICBzb21ldGhpbmcgZGFuY2luZyAgaWxsZWdhbCAgIFRvbmlnaHQgU2hvdyAgZWxzZSBtdXNpYyBmcm9tIHNpdHRpbmcgIHdpdGggb3V0ZGlkIGhpbXNlbGYgICBzaG93IExvdmUgdGhhdCBTdGFydGluZyBNb25kYXkgTWFyY2ggICBhaXJpbmcgIEF1c3RyYWxpYSBldmVyeSBuaWdodCB3YWl0ICAgZ29ubmEgdGFsayBUb25pZ2h0IFNob3cgY293b3JrZXIgZWF0cyBjb3JuIG51dHMgICAgdGhlbiBsaWNrcyBlYWNoIGluZGl2aWR1YWwgZmluZ2VyIHdoZW4gSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIHdlaXJkICBhbm5veWluZyB0aGF0IHNvbWVvbmUgIGtub3cgZG9lcyAgIHdpdGggQ291bGQgdG9tb3Jyb3cgcGVyZm9ybWluZyAgIGZpcnN0IHRpbWUgIGxhdGUgbmlnaHQgICBvdmVyICAgb25seSBHcmVnIGZyb20gY29va2luZyAgIHdpdGggQ3JhbmJlcnJ5IFNhdWNlIGdvb2QgIGFmdGVyIHRoYW5rc2dpdmluZyBUb25pZ2h0IHBsYXlpbmcgIGdhbWUgd2l0aCBIdWdoIERhbmN5IHBsdXMgbXVzaWMgZnJvbSBNYXRoZW1hdGljcyBMaWtlIHNob3cgSmFtZXMgS2VybWl0ICBGcm9nIG11c2ljIGZyb20gQXR0ZW50aW9uICBCbGFjayB3aWxsICBwbGF5aW5nICAgVG9uaWdodCByZWFkeSB3aGVuICBDb25ncmF0cyBUb2RheSAgICBQYXRyaWNrIGRyb3ZlICBzbmFrZXMgICBJcmVsYW5kICBvbnRvIEF2ZXR0IFRoYW5rICAgQ291bnRyeSBUb25pZ2h0ICBtdXNpYyBmcm9tIHRhbGtpbmcgdHJ1Y2tzIHdpdGggTGFycnkgbXVjaCAgc2luZ2luZyBZYWhvbyBBbnN3ZXJzIHdpdGggQXVkcmEgTWNEb25hbGQgbGFzdCBnYXZlICBib3VuY2VyICBmYWtlICBsb29rZWQgICBwaWN0dXJlIEhhc2h0YWcgVHdlZXQgIGZ1bm55IHNwcmluZyBicmVhayBleHBlcmllbmNlIHRoYXQgaGFwcGVuZWQgICAgc29tZW9uZSAga25vdyAgQ291bGQgVG9uaWdodCBwbGF5aW5nIERvdWJsZSBUdXJ0bGVuZWNrIHdpdGggQXJ0aWUgTGFuZ2UgbXVzaWMgZnJvbSB0aGFua3MgIHdhdGNoaW5nIG11c2ljIGZyb20gICBmaXJzdCBUb25pZ2h0IFNob3cgbG92ZSAgY291bGQgbmV2ZXIgIHdoYXQgICAgbG92ZSB3aGVuIHBlb3BsZSB3YW5uYSBwbGF5IHdpdGggVGhhbmtzIFRvbmlnaHQgIG11c2ljIGZyb20gRGVtaSBMb3ZhdG8gdG9uaWdodCAgU3RlcGhlbiBDb2xiZXJ0IEtlcmkgUnVzc2VsbCBtdXNpYyBmcm9tIG11Y2ggIHBsYXlpbmcgV2F0ZXIgIHdpdGggbGFzdCBBbm90aGVyIGdvb2QgIExpYW0gbXVzaWMgZnJvbSBHaXJsIGJyb2tlICB3aXRoIHdhbGtlZCAgIHRoZW4gY2FtZSBiYWNrIGZpdmUgbWludXRlcyBsYXRlciBiZWNhdXNlICBmb3Jnb3QgSGFzaHRhZyBUd2VldCAgZnVubnkgIGF3a3dhcmQgYnJlYWt1cCBzdG9yeSB0aGF0IGhhcHBlbmVkICAgIHNvbWVvbmUgZWxzZSAgd2l0aCBDb3VsZCBBbm5ldHRlIEJlbmluZyBwbGF5aW5nIEZsaXAgTm9ybWFuIFJlZWR1cyBtdXNpYyBmcm9tIEZsaXAgd2l0aCBUaW5hIFRvbmlnaHQgICByZXR1cm4gIEZyZWVzdHlsaW5nIFdpdGggd29vZGVuIGJsb2NrcyB0aGF0ICBwbGF5ZWQgIGJvcnJvd2VkIGZyb20gIG1vbnRoIHVzaW5nIGNsYXNzcm9vbSBIYXZlICBzZWVuIHRoZXNlICBydWxlICB3b3JsZCBUaW5hICAgICB0b2dldGhlciB0b25pZ2h0ICAgIHN3YXAgUmFuZHkgTmV3bWFuIGdpdmVzICAgbGl0dGxlIGxvdmUgcGVyZm9ybWFuY2UgIHdpbGwgICAgZmlyc3QgbWludXRlcyAgIFRvbmlnaHQgU2hvdyAgIGtpZHMgIHN0YXlpbmcgVGluYSBSYW5keSBkb2luZyAgY2xhc3Nyb29tIGluc3RydW1lbnRzIHN0YXJzIGZyb20gIE9zY2FyIGxpdmUgdHdlZXRpbmcgIE9zY2FycyBFbmpveSBKdXN0IHN1Y2ggZWFzZSBPZmZpY2lhbGx5IFRoYW5rICBUaGFuayBoZXJlICAgICAgbWFraW5nIHRoaXMgRXZlbiAgICAgcGx1bmdpbmcgdGFrZSAgcGhvdG8gIHlvdXJzZWxmICAgICB0d2VldCAgdG9tb3Jyb3cgICBDaGljYWdvIENoaWNhZ28gUG9sYXIgICAgd2VhcmluZyAgV2VhciAgbmVja3RpZSAgc2hvdyBnb25uYSAgbGl2ZSBzdHJlYW1lZCBoYWhhICB3YWl0IEFscmVhZHkgd2FpdGluZyAgRmFsbG9uICByZXRpcmUgICBTZXRoIE1leWVyIHRlYW0gIHRha2Ugb3ZlciB0b25pZ2h0IFRoYW5rICAgd2F0Y2hpbmcgbG92ZSBUaGFua3MgIHdhdGNoaW5nIFRoYW5rIHRhdHRvb3MgIGJhbmQgIGJlaW5nICBncmVhdCAgIHRlbGwgcGVvcGxlIHdoaWNoIGRlY2FkZSAgIGRydW5rIEdvb2QgS2VlcCBjaHVybmluZyAgdGhvc2UgIENhbGwgIHdoZW4gVGltZSB0aGFua3MgIExlQnJvbiBzaG93IHRvbmlnaHQgIERlbnplbCBtdXNpYyBmcm9tIGNvbGQgICAgQ2hpY2FnbyB0aGlzIFN1bmRheSAgIGd1eXMgc3RpbGwgZG9pbmcgVG9uaWdodCAgICBtdXNpYyBmcm9tIHJpZ2h0IGZpbmFsbHkgc3RhcnQgc2VydmluZyBicmVha2Zhc3QgYWZ0ZXIgIG90aGVyIGZpbmFsbHkgZmlndXJlZCAgIGhhbmdvdmVycyBTeW5jIGJhdHRsZSB0b25pZ2h0ICBQYXVsICBiZXN0IHNvbmdzICAgIHRoaW5rIGdvbm5hIG5lZWQgc2hvdyAgU3luYyBCYXR0bGUgd2l0aCBQYXVsIHRhbGsgd2l0aCBzdGFuZHVwIGZyb20gVG9uaWdodCBTaG93ICBhbG1vc3QgU3BlY2lhbCBDb25ncmF0cyAgIHRlYW0gVHVuZSAgdG9uaWdodCBhZnRlciBUb25pZ2h0ICBSZWVzZSBXaXRoZXJzcG9vbiBGcmVkIEFybWlzZW4gbXVzaWMgZnJvbSBDaGljYWdvIHdlYXJpbmcgIHN1aXQgICAgIFNob3cgc29saWRhcml0eSAgd2VhcmluZyAgIHRlbGxpbmcgIHdoYXQgZWxzZSBPa2F5IExha2UgTWljaGlnYW4gd2lsbCBoYXZlICAgWW9yayBmaXNoIHRoaXMgRmluaXNoaW5nICAgZmlyc3Qgd2VlayB3aXRoIEdvbm5hICAgIHRoZW4gZ3JlYXQgaGF2aW5nICAgc2hvdyBnb25uYSBoYXZlICBsaWtlICBsYXN0IHRpbWUgQW5vdGhlciAgc2hvdyAgTWljaGVsbGUgT2JhbWEgICAgV2lsbCBGZXJyZWxsICBtdXNpYyBmcm9tIGtub3cgICAga25vdyB0aGlzICAgQ2hpY2FnbyAgICB0aGlzIHdpbGwgIGhhdmUgUmFwcGVycyBEZWxpZ2h0IHVzaW5nIHNuaXBwZXRzIGZyb20gIG5ld3MgVG9uaWdodCAgICAgIGJlc3QgQnJpYW4gV2lsbGlhbXMgcmFwcyBldmVyIFR1bmUgIHRvbmlnaHQgVHJpdmlhICBmaXJzdCBzdGFuZCAgZXZlciAgIFRvbmlnaHQgU2hvdyAgICAgZ3JlYXRlc3QgVG9uaWdodCBTaG93ICB3aWxsIG1ha2UgIHNpbXBsZSAgcGxheSBwbGF5ICBIYXNodGFnIFR3ZWV0ICAgc29uZyBseXJpYyB0aGF0ICAgIGZyaWVuZCAgd3JvbmcgICB3aXRoIENvdWxkIGdyZWF0IGludGVydmlldyB3aXRoICAgbGFzdCBUb25pZ2h0ICBCcmFkbGV5IG11c2ljIGZyb20gYWdyZWUgICAgICBncmVhdCBDYWxsICB0aGlzIGdvbm5hIGRhcmUgIGFzc3VtZSAgdGVyaXlha2kgd2luZyAgb25seSAgQnVmZmFsbyAgaGF2ZSAgVFJJRUQgdGhlbiB0aGVyZSBzdWNoICBncmVhdCBmaXJzdCBzaG93IFdpbGwgIGxvdHMgICBHb25uYSBGZWJydWFyeSBUaGlzICAgIHN0YXJ0aW5nICAgY2hhcHRlciAgIFRvbmlnaHQgIGV2ZW4gYmVnaW4geW91ciBWQ1JzICAgIHRvbmlnaHQgYWZ0ZXIgSnVzdCAgaG9tZSBmcm9tIHJlaGVhcnNhbHMgIGdvaW5nICBibG93IHBlb3BsZSBHdWVzcyBBbHdheXMgY2xhc3MgdGhpcyB3ZWVrICB3YXRjaGVkICB3YWl0ICAgY29tZSBob3BlICBoYXZlICBIaXN0b3J5ICAgcGFydCBuZXh0ICBjb3VsZCBiaWdnZXN0IHByb21vdGlvbiAgICAgaGlzdG9yeSAgQ29tY2FzdCBmb29sIHdpY2tlZCBncmVhdCBsaW5ldXAgICBmaXJzdCAgIE5leHQgTW9uZGF5IGFmdGVyIHdoYXQgYWJvdXQgaGFzaHRhZ3Mgc3RpbGwgZ29ubmEgIHRocm91Z2ggIGF1ZGllbmNlICBnaXZlIGFmdGVyICAgd2FudCBPbHltcGljcyBwaWNrICBsaW5lcyBoYXNodGFncyAgIFRvbmlnaHQgaG91ciB0aHJlZSAgIFJvb3NldmVsdHMgICBsb3ZpbmcgZ29pbmcgICBmdWxsIGZ1bm55IHNsb3cgIGZyb20gIGhpZ2ggV2VsbCBrbm93IHdoYXQgcGxheSAgaGFzaHRhZyBUd2VldCAgIHBpY2t1cCBsaW5lIGhlYXIgICBPbHltcGljcyAgIHdpdGggQ291bGQgZmFyZXdlbGwgIExhdGUgTmlnaHQgZmVhdHVyaW5nIE9ubHkgIHNob3dzIFRvbmlnaHQgIENvbGluIENocmlzICBtdXNpYyBmcm9tIGZyaWVuZCBvbmNlICByZW1lbWJlciAganVzdCBjYWxsICBNb3N0ICAgbmFtZWQgSGFzaHRhZyBUd2VldCAgc29tZSB3ZWlyZCAgIGFkdmljZSB0aGF0ICAgc29tZW9uZSAga25vdyB3ZXJlIGdpdmVuICBDb3VsZCBKdXN0ICAgbGFzdCBhcHBlYXJhbmNlIHdpdGggU29vbyBtYW55ICB0aW1lcyAgdGhhdCBzdHVkaW8gd2l0aCBUaGFua3MgICAgY3JldyAgYWx3YXlzIHRyZWF0aW5nIGFueW9uZSB3aXNoaW5nICBjZWxlYnJhdGUgIGhvbm9yICBncmVhdCBQaGlsaXAgbGlmZSAgdGhpcyAgIG5pY2UgRG93bmxvYWQgIHNvbmcgIEZSRUUgICBnb2VzICBzdXBwb3J0IGZpZ2h0IGFnYWluc3QgU2VyaW91c2x5IHRoYW5rcyAgZXZlcnlvbmUgIHdvcmtzICBMYXRlIFdoYXQgIGFtYXppbmcgZml2ZSBMb3ZpbmcgbGF1Z2hlZCB0aGlzIGhhcmQgICBsb25nIG1ha2VzICBoYXBweSBsb3ZlZCAgIFBhdWwgU2ltb24gc2luZ2luZyAgIHN0cnVnZ2xpbmcgd2l0aCB0aGF0IExvdmUgIFRoYW5rcyAgd2F0Y2hpbmcgRG9lcyBldmVyeXRoaW5nIHRoYW5rIGZlbGwgdGltZXMgIHRoYXQgQmVzdCAgTGF0ZSBOaWdodCAgIHJpZ2h0IHlvdXIgZmF2b3JpdGUgdGhpbmcgZ29pbmcgIGxpdmUgIG1vdmVzICBmYXN0ICBsaXZlICB2ZXJ5IHByb3VkICBIb3BlIEJlc3QgIExhdGUgTmlnaHQgaG91ciBzcGVjaWFsIGFpcnMgdG9uaWdodCAgICBkb3duIHdpdGggZnJpZW5kcyAgZmFtaWx5IFRoYW5rICAgIGJlaW5nICBwb2xpdGUgICBjb21lcyBzb21lIHdvcmsgIGRlZmluaXRlbHkgd2FubmEgYXdlc29tZSBzdXBlcmNoZWYganVzdCBkcm9wcGVkICB3aXRoIHdpbmdzICBTdXBlciBUb25pZ2h0ICAgRGF2aWQgIG11c2ljIGZyb20gc2VlbiAgc2hvdyAgd2FudCAgIHdoYXQgICBCZXN0ICBMYXRlIE5pZ2h0IGFpcnMgdG9tb3Jyb3cgICB5b3VyIHBsYXlpbmcgIHdpdGggTWVsaXNzYSBNY0NhcnRoeSAgIG11c2ljIGZyb20gY29sZCBvcGVuIHRvbmlnaHQgYWZ0ZXIgICAgUGxlYXNlIHdhdGNoIEhhc2h0YWcgVHdlZXQgICBpbmp1cnkgdGhhdCBoYXBwZW5lZCAgICBzb21lb25lICBrbm93ICBDb3VsZCBUb25pZ2h0ICBKZW5uaWZlciBjb21lZHkgZnJvbSBUb25pZ2h0ICAgIGhvc3QgIExhdGUgICAgUGx1cyAgIG11c2ljIGZyb20gTGFzdCBuaWdodCBzYW5nIHNvbmdzICAgbWVtYmVycyAgRXZlcmx5ICAgIGZhdm9yaXRlIGdyZWF0ICBhYm91dCAgR2l2ZSBUaGFuayAgIHNsb3cgamFtbWluZyAgbmV3cyB3aXRoICBsYXN0IFRoYW5rICAgc2xvdyBqYW1taW5nICBuZXdzIHdpdGggIGxhc3QgT2hoaGggWWFob28gICBwbGFubmluZyAgYmVlbiB0cnlpbmcgIGNvbm5lY3QgICBzb21lb25lICAgaG91c2UgVG9uaWdodCAgbXVzaWMgZnJvbSBMYXRlIE5pZ2h0IHN0YXJ0cyBHcmVhdCBzaG93IERpY2sgQ2hlZiBXeWxpZSBEdWZyZXNuZSBMYXRlIE5pZ2h0IEhhc2h0YWdzIHdpdGggeW91ciBoYXBweSBIb3BlICBncmVhdCBIYXNodGFnIFR3ZWV0ICAgcG9wdWxhciBzb25nIHRpdGxlIGNoYW5nZSAgIHRoYXQgUG9sYXIgIENvdWxkIFRvbmlnaHQgICBPc2NhciBub21pbmVlIG11c2ljIGZyb20gRGFydHMgIEluc2FuaXR5IHByb2dyYW0gdGhpcyBFeGNpdGVkICBoYXZlICAgc2hvdyBLYXRlIE1jS2lubm9uIG11c2ljIGZyb20gU3VwZXIgQm93bCBmZWF0dXJlcyB0ZWFtcyBmcm9tICAgc3RhdGVzIHdoZXJlIHdlZWQgIERvcml0b3MgIGNhbGxpbmcgIFN0b25lciBUb25pZ2h0IHBsYXlpbmcgICBnYW1lIHdpdGggY2hhdHRpbmcgd2l0aCBoYXZlIG11c2ljIGZyb20gR3JlYXQgc2hvdyAgaGlsYXJpb3VzIG11c2ljIGZyb20gUGx1cyBNb3JlIHRoYW4gbWlsbGlvbiBwZW9wbGUgaGF2ZSBxdWl0IEZhY2Vib29rICAgbGFzdCBub25lICB0aGVtIHdlcmUgeW91ciB3YW50ZWQgICAgZmlyc3QgIHNoYXJlIHRoaXMgbmV3cyB3aXRoIFRoaXMgICAgdGFsayAgSmVycnkgU2VpbmZlbGQgICAgbG92ZSBzaG93IG11c2ljIGZyb20gcGlja2VkICAgZGF0ZSAgICBkb2luZyAgIGNvbWUgd2l0aCAgdGhyZWUgICB3ZW50IEhhc2h0YWcgVHdlZXQgICBlbWJhcnJhc3Npbmcgc3RvcnkgYWJvdXQgIGF3a3dhcmQgZGF0ZSBiZWVuICAgQ291bGQgQnJ1Y2UgU3ByaW5nc3RlZW5zIHJld29yayAgYWJvdXQgIGJyaWRnZSBvbmx5IEJydWNlICAgIFN0cmVldCBUb25pZ2h0ICAgIFF1ZWVuIExhdGlmYWggICBtdXNpYyBmcm9tIGd1ZXN0cyBKYW1lcyBtdXNpYyBmcm9tIGdldHMgZmlybWVyICB2b2ljZSAgICBjb21lIGhvbWUgaGVhciBzcG91c2Ugc2F5aW5nIEJlc3QgbG92ZSAgICAgYmVpbmcgTGlmZSAgRXNwZWNpYWxseSB3aXRoICAgICBNZXRzIEJ1Y2tldCBNZXRzIEJ1Y2tldCAgICAgc2hvdyB3YW50ICB0aGFuayAgZmFucyAgc3RheWluZyAgIHRoaXMgd2hvbGUgQXBwYXJlbnRseSBTdGVwaGVuIENvbGJlcnQgdG9vayBob21lIHRoYXQgZ2xhc3Mgc3RhdHVlIGNvaW5jaWRlbnRhbGx5IHNoYXBlZCBsaWtlIFNvcnJ5ICBib3RoZXIgICAgIGNvbWUgICBhdHRlbnRpb24gdGhhdCAgIGZhY3QgICAgIGF3YXJkIHRoaXMgVGhhbmsgIEZhbFBhbHMgIGV2ZXJ5b25lIFRoYW5rICAgaGFwcHkgdGhhdCAgY291bGQgdm90ZSBtb3JlIHRoYW4gSGFzaHRhZyBUd2VldCAgIGZ1bm55ICB3ZWlyZCBzdG9yeSBhYm91dCAgd2FpdGVyICB3YWl0cmVzcyAgIHdpdGggQ291bGQgRXhjaXRlZCAgaGF2ZSAgIGJhY2sgICBwcm9ncmFtIG5leHQgVHVlc2RheSBzaG93IHBsYXlpbmcgQ2F0Y2hwaHJhc2Ugd2l0aCBXaWxsaWFtIE1hY3kgRnJhbmtlbCAgY29va2luZyB3aXRoIG11c2ljIHRvbmlnaHQgIEpvaG4gZnJvbSAgc2VlbiAgcGVyZm9ybWFuY2UgIHRlbGV2aXNpb24gbGlrZSB0aGlzIHBsYXlpbmcgd2l0aCBQbHVzIEdhYnJpZWxsZSBVbmlvbiBUaGFuayAgICAgZ3JlYXQgT2theSB0aGlzICAgIHRob3NlICB0aGlzIGhhcHBlbmluZyAgICBmcm9tIHVwc3RhdGUgIFZhbml0eSBkcmlua2luZyAgIHdhbm5hIHRha2UgY3JlZGl0ICB0aGF0IGxpbmUgYmFjayB3aXRoICBmcmVzaCBzaG93IHRvbmlnaHQgd2l0aCAgU3RlcGhlbiBNYWxrbXVzIEJhY2sgd2l0aCAgc2hvd3MgIE1hdHRoZXcgbXVzaWMgZnJvbSBsb3ZlICB3ZXN0IEhlYWQgU3dhcCAgR2VyYXJkIEJyYWRmb3JkICB0aGlzIFN0ZXBkYWQgQXJyb3cgQ2hhbm5pbmcgIHRvdGFsbHkgZnVubnkgY29taW5nICAgd2VpcmQgZnVubnkgZHVtYiBlZGl0ZWQgIG11Y2ggVGhhbmtzIFN0ZXBoICAgc2F2ZWQgbm90aGluZyB3aXRob3V0ICBUaGFuayAgIGV2ZXJ5b25lICAgZXZlciBiZWVuIHN0dWZmICAgVGhhbmtzIGhvcGUgSm9obiBMZW5ub24gbGlrZWQgdGhhdCBmb3JjZWQgIHNpbmcgY2F1c2UgIGRvbmF0ZWQgICBEb25vcnMgQ2hvb3NlICAgdGVsbGluZyBTaG9ydCBoYWlyY3V0ICBTYWxseSAgZmFjZSAgeW91cnMgbG92ZSAgIHdpdGhvdXQgVGhpcyAgSGFza2VsbCAgQ2FybHkgIEplcHNlbiAgIG9ubHkgIHdpdGggIGd1dHMgICB0aGlzIGhhdmUgIG1hbnkgbWVtb3JpZXMgICAgdGhlc2UgYml0cyAgIHRoZXkgIFByb2R1Y2VycyAgY3JldyAgc3RhZmYganVzdCBST0NLICB0aGlzIFRoYW5rIFdhdGNoaW5nICAgYXBhcnRtZW50IHdpdGggIEhhcHB5IEJpcnRoZGF5IFRpZ2h0IFBhbnRzICAgZHVtYiBpZGVhICBrZXB0IEdlcmFyZCAgRGVldGNoIHdyb3RlICBpbnRvIHdoYXQgbWFueSBncmVhdCB3cml0ZXJzICAgVG91Z2ggIGdpdmUgdGhlbSAgICBNaWtlIEdlcmFyZCBCcmFkZm9yZCAgIE96b2xzIGdhdmUgdGhhbmtzIEJhc2hpciAgRGlhbGxvIFR3ZWV0Ym90IGZyb3plICAgIFRoYW5rcyBGcmVkIEFybWlzZW4gIERvd250b24gc2tldGNoICAgRlVOTlkgIFNURVZFIEZvb2QgZmlnaHQgZmVsbCB0aW1lcyBzaG9vdGluZyAgaW50cm9zIEFkZGVkICBlZmZlY3QgIGJsYWNrICB3aGl0ZSBQZW5uZWJha2VyIGZpbHRlcnMgICB0aGVtIGRpcmVjdG9yIERhdmUgRGlvbWVkaSBzaG90ICAgdGhlc2UgbGl2ZSAgcHJldGFwZXMgIGZyb250IG1pc3MgIGJlZ2lubmluZyAganVzdCB3YW50ICB0aGFuayAgZ3V5cyAgV2l0aG91dCAgdGhlcmUgd291bGQgR2V0dGluZyBtYWluIGNvdXJzZSB0dXJuZWQgIEJlc3QgIExhdGUgTmlnaHQgaW50byAgZHJpbmtpbmcgc2hvdWxkICBob21lIGJlZm9yZSBkaW5uZXIgICBtb21zIGJpcnRoZGF5ICAgd2FudCBhbnlvbmUgZWxzZSAgdHdlZXQgICB3aGlsZSAgYmVzdCAgYWlycyAgIGNoZWNraW5nIFJlbWluZGluZyBhZ2FpbiBiZWNhdXNlIHByb3VkICB5ZWFycyAgTGF0ZSBUb25pZ2h0IGhvcGUgIGV4cGVjdHMgICAgIHRoaXMgY291Y2ggIGhhdmUgZm9vdGJhbGwgZ2FtZXMgICBzcGVjaWFsICBleGFjdGx5IG9ycnJycnIgIGd1eXMgY291bGQgd2F0Y2ggIEJlc3QgIExhdGUgTmlnaHQgZG9pbmcgIFNhbWUgICAgcGVyZmVjdGx5IGxvdmUgY3JhbW1lZCAgIGludG8gIGhvdXJzICBUb21vcnJvdyBUaWdodCBUaWdodCBUaWdodCByZWFsIHBlb3BsZSBmYWtlIHN5bmNpbmcgd2l0aCBKb3NlcGggR29yZG9uIExldml0ICBTdGVwaGVuIE1lcmNoYW50IFRoYXQgcGxheSB3aXRoIHlvdXIgQmx1cnJlZCBMaW5lcyAgbG90cyAgVGhhbmsgc29uZ3MgZG9uZSB3aXRoIHNjaG9vbCBTb21lIGxvdmUgIGdhbWVzICBwbGF5IHdpdGggeW91ciBsaWtlIHdhdGVyIHB1dHRpbmcgdGhpcyB0aGFuayAgIExOSkYgc3RhZmYgd2lsbCAgbGl2ZSB3aGF0ICBiYXNpY2FsbHkgd2hhdCBzYXlpbmcgIHRoYXQgIGhhdmUgZGF5cyAgbW92ZSBUaHJlZSBkYXlzIGhvdXIgZWFzdGVybiAgeW91ciBoZWFyZCAgZ29ubmEgIGV2ZW4gbW9yZSAgdGhhbiB3ZWVrIGZyb20gIEJlc3QgIExhdGUgTmlnaHQgSG91ciBQcmltZXRpbWUgICB5b3VyICAgICAgIHN0dWZmIFRoYW5rICBQYXVsICBCYXJyeSAgIGFsbW9zdCBiZWxpZXZlIHRoaXMgSGFwcHkgU2F0dXJkYXkgTmlnaHQgTGl2ZSBKdXN0IGdldHRpbmcgaG9tZSBmcm9tIHJlaGVhcnNhbHMgICB3aXRoIG11c2ljYWwgZ3Vlc3QgRm9sbG93ICAgdHdlZXRzIHRocm91Z2hvdXQgVGhhbmsgIGJhc2ljYWxseSBrbm93ICAgcmlkZSAgVGhlbiAgIGxlYXJuICAgY3Jhenkgc3RyZWV0cyBUb25pZ2h0ICAgc2hvdyAgUmFscGggaG9saWRheSBtdXNpYyBmcm9tIGludG8gUm9iZXJ0IERlTmlybyBXYXRjaCB0b25pZ2h0ICAgd2hhdCBUb25pZ2h0ICAgRW1tYSBKYW1lcyBNYXJzZGVuICBob2xpZGF5IG11c2ljIGZyb20gTWljaGVsbGUgbG9va2VkIHByZXR0eSAgd2hlbiBCYXJhY2sgdG9vayB0aGF0IHNlbGZpZSAgU29tZWJvZHkgd2lsbCAgc2xlZXBpbmcgcmVsYXRpdmUgICAgYXJvbWEgdGhlcmFweSAgd2hlbiAgICAgc3RpbGwga25vdyB3aGF0ICBhcm9tYSB0aGVyYXB5IHBsYXkgIGhhc2h0YWcgVHdlZXQgICB3b3JzdCBnaWZ0ICAgc29tZW9uZSAga25vdyAgIGdhdmUgICB3aXRoIENvdWxkIGFsd2F5cyBncmVhdCBKb2huIE1pY2hlbGxlIERvY2tlcnkgWG1hcyBtdXNpYyBmcm9tIE9zY2FyIElzYWFjIHBlcmZvcm1lZCAgY292ZXIgICBsYXN0IFRoZXkgbmVlZCAgIEppbW15IEZhbGxvbnMgIHdhbnQgIGNsYXNzcm9vbSBpbnN0cnVtZW50IEJhY2sgd2l0aCAgIHNob3cgIE9zY2FyIG11c2ljIGZyb20gIHJldHVybiAgTGF0ZSBOaWdodCBDaHJpc3RtYXMgQW5jaG9yIHJlc2N1ZXMgSmltbXkgamFja2V0IFRoYW5rIGx1Y2t5ICB0b3VyIHdpdGggdGhlc2UgZnVubnkgIHdhbm5hIEdvb2RieWUgVGhhbmtzICBtYWtpbmcgIHNub3d5ICBiZWF1dGlmdWwgICB3YWl0ICBjb21lIGxpdmUgICAgQXJlYSAgIGZhbnMgIHBsZWFzZSBmb2xsb3cgTWFyY3VzIHR3aXR0ZXIgaGFuZGxlIGJhY2tzdGFnZSB3aXRoICBleWVzIFRoYW5rICAgIGFtYXppbmcgY3Jvd2QgICBQYXJhbW91bnQgIFNlYXR0bGUgICAgICBncmVhdCBjb21lZGlhbnMgdGhhdCAgIGx1Y2t5IGVub3VnaCAgICBzdGFnZSBMb2FkaW5nICAgc29tZSBiZWZvcmUgIHNob3cgQW5uZCB0aGVzZSBhd2Vzb21lIHBvdW5kIEdvb2RieWUgIHdpbGwgIGJhY2sgIHRoaXMgeWVzdGVyZGF5IHdpdGggc2luZ2luZyBzb21lICBob2xpZGF5IFRoYW5rICAgYWZ0ZXIgICAgbWFrZXJzICBzd2VhdHBhbnRzIGNhbGwgYnVzeSBIYXBweSBUaGFua3NnaXZpbmcgIHNob3cgdG9uaWdodCB3aXRoIG11c2ljIGZyb20gU2VzYW1lIFN0cmVldCBmbG9hdCAgIHBhcmFkZSAgIGF3a3dhcmQgd2hlbiAgQmlyZCAgaGF2aW5nIFRvbmlnaHQgICBtdXNpYyBmcm9tICBzb21lb25lICBiYWNrIEhvbm9yZWQgICAgIGZsb2F0IHdpdGggIG5lZWQgIHdha2UgIGNhbGwgd2l0aCAga2lkcyAgd2l0aCBTaG91dCAgIHNvbWUgICBjb29sZXN0IGtpZHMgZXZlciBKb3NoIGZvdW5kZXIgICBJbXByb3YgQnVkZCBGcmllZG1hbiBtdXNpYyBmcm9tIFRvbmlnaHQgIEpvc2ggZm91bmRlciAgIEltcHJvdiBCdWRkIEZyaWVkbWFuIG11c2ljIGZyb20gSGFwcHkgVGhhbmtzZ2l2aW5nICBzaG93IHRvbmlnaHQgd2l0aCBTdGVwaGVuIE1veWVyIG11c2ljIGZyb20gTWF6enkgd2VpcmRseSBncmVhdCAgIG5lZWQgQnJhbmQgIHNob3cgSW5jbHVkaW5nICBTdXBlcmxhdGl2ZXMgVW5pdmVyc2l0eSBjYW5ub3QgbGVhdmUgUGl0dHNidXJnaCB3aXRob3V0IGhpdHRpbmcgIFByaW1hbnRpIEZyZW5jaCBmcmllcyAgY29sZSBzbGF3IFJlYWxseSAgc2hvdyAgbXVzaWMgZnJvbSBiYWlsICBib3lmcmllbmQgICAgbGVhc3QgICBzb21ldGhpbmcgIHRhbGsgYWJvdXQgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIGZ1bm55ICBlbWJhcnJhc3NpbmcgdGhhdCBoYXBwZW5lZCAgVGhhbmtzZ2l2aW5nICB3aXRoIENvdWxkIGJ1ZGR5ICBoZXJlIHRvbmlnaHQgVG9uaWdodCAgICBDb2hlbiBzaG93aW5nICAgIHNob3Rza2kgIG11c2ljIGZyb20gb25seSByZXR1cm5zICAgc2hvdyBQbHVzIG11c2ljIGZyb20gIEZyZWVzdHlsaW5nIHdpdGggSG9ub3JlZCAgIHBhcnQgICBzaG93IEhlbGxvIHRoYW5rICAgYXBwcmVjaWF0aW5nICBzdWJ0bGV0eSAgdGhhdCBIYXZlICBnb29kIFRoYW5rIGJhbGxvb24gIGxldHRpbmcgY2hpbGRyZW4gZXhwZXJpZW5jZSAgbGlmZWN5Y2xlICBwZXRzIGV2ZW4gZmFzdGVyIHRoYW4gVG9uaWdodCAgIEplbmEgbXVzaWMgZnJvbSBMYXN0ICAgIHNvbWUgIHdpdGggc2hvdyB0b25pZ2h0IERhbWlhbiBMZXdpcyBTdGV2ZSBDb29nYW4gbXVzaWMgZnJvbSB1bmNsZSB1c2VkICAgIHBhamFtYXMgICBiZWRzaGVldCBiZWNhdXNlICB0aG91Z2h0ICBnaG9zdCAgcHVsbGluZyBkb3duICBwYW50cyBwbGF5ICBoYXNodGFnIFR3ZWV0ICBzb21ldGhpbmcgZnVubnkgIHdlaXJkIGFib3V0IHlvdXIgcmVsYXRpdmVzICB3aXRoIENvdWxkIFRvbmlnaHQgICBkZW1vICAgICBtdXNpYyBmcm9tIGJlaW5nIHN1cGVyIGNvb2wgIHNvbWUgc3BlY2lhbCBMYXN0ICB1c2VkICB0ZWNobm9sb2d5ICBmbGlwIHJldHVybnMgICBzaG93IFBsdXMgYXV0aG9yIE1hbGNvbG0gbXVzaWMgZnJvbSB3b3VsZCB0aGlzIGJlYXQgeW91ciBzZWNyZXQgc2VydmljZSBXaWxsICAgbGVhc3QgICAgIHNhbWUgY29vbCBDZWxlYnJpdHkgd2hpc3BlcnMgICAgIGRvdWJsZSAgIGNvdXBsZSAgc2Vjb25kcyBTdGF5ICBsYXRlIHRvbmlnaHQgIHdhdGNoICAgd2lsbCBtYWtlIHRvbW9ycm93IHR1cm4gZnVubmllc3QgYml0cyB3aXRoIGdyZWF0ICAgIG11c2ljIGZyb20gQ29uZ3JhdHMgIGhhdmluZyAgbnVtYmVyIGNvbWVkeSBhbGJ1bSBsaWtlZCBmcm9tICBzaG93IGxhc3QgbmlnaHQgY2hlY2sgICBhbGJ1bSBQZW9wbGUgcmVhbGx5IHNlZW0gIGxvb29vb3ZlIHRoYXQgVGhhbmsgIENoaWNhZ28gIGV2ZXJ5b25lICAgd2lzaCAgIG1vcmUgdGltZSAgaGFuZyAgeW91ciBhd2Vzb21lIHNob3cgdG9uaWdodCBOYXRhbGllIGdyZWF0IGZyb20gaGF2aW5nICB3aXRoIFN0ZXBoZW4gQ29sYmVydCAgIENvbWUgUmFjaGVsIHJldHVybnMgICBzaG93IHRvbmlnaHQgIHRhbGsgbWFrZSBzb21lIGNvY2t0YWlscyBtdXNpYyBmcm9tIGhhdmUgIHBvd2VyICB0aHJvdyBuYWlscyAgIGNvdWxkIHdvcmsgd2l0aCBUaG9yICBidWlsZCBwbGF5ICBoYXNodGFnIFR3ZWV0ICAgZnVubnkgIGNyYXp5IHN1cGVycG93ZXIgIHdpc2ggICAgIHdpdGggQ291bGQgTGFzdCAgbG9zdCAgICBnYW1lICBDYXRjaCBTdGlsbCBKYXNvbiBTdGF0aGFtIHBsYXlpbmcgV2F0ZXIgdGFsa2luZyBhYm91dCAgYmVlciBtdXNpYyBmcm9tIHRha2VzICAgbGVhc3QgIG1vbnRoICBncm93IGZhY2lhbCBhcnJlc3RlZCAgZHJpdmluZyB3aXRoICBzdXNwZW5kZWQgIGxvc3QgIGxpY2Vuc2UgIGNoYW5naW5nICBuYW1lIFRvbmlnaHQgIGNvb2tpbmcgd2l0aCAgcGxheWluZyBDYXRjaCBXZWFrICBDb21tZXJjaWFscyBGcmVzaCAgc2hvdyBpUGhvbmUgQ2xvc2luZyBiYWNrIHRvbmlnaHQgd2l0aCBTaW1vbiBtdXNpYyBmcm9tICBEaXNtZW1iZXJtZW50IFBsYW4gTGF0ZSBOaWdodCAgUGllcmNpbmcgVGhhbmsgICBsZXR0aW5nIG1hcmF0aG9uIHJ1bm5lcnMgICAgdGhpbmcgdGhleSBsb3ZlIHRlbGwgcGVvcGxlIHRoZXkgSGFycmlzb24gRm9yZCBwaWVyY2VkICBUaGVuICB3b3JlIG1hdGNoaW5nIEhhcnJpc29uIEZvcmQgcGllcmNlZCAgICAgc2hvdyBUb25pZ2h0ICBIYXJyaXNvbiBtdXNpYyBmcm9tIG1vc3QgcG9wdWxhciBIYWxsb3dlZW4gY29zdHVtZSAgQm9zdG9uIHRvZGF5ICAgICBzYW1lIGNsb3RoZXMgSmFzb24gY2hlZiBGbHlubiBNY0dhcnJ5ICBzb21lIEhhbGxvd2VlbiBzaG93ICBtdXNpYyBmcm9tIEh1Z2ggTGF1cmllICBvZmZpY2lhbGx5ICAgbmV2ZXIgZ3Vlc3MgIG5hbWUgIFdlbGNvbWUgVG9uaWdodCAgIHNob3cgICBsZWdlbmQgIENvbndheSAgbXVzaWMgZnJvbSBBbWVyaWNhbnMgaGFuZCAgY2FuZHkgICBvdGhlciBzcGVuZCBob3VycyBoaWRpbmcgICBsaXZpbmcgcm9vbSB3aXRoICBsaWdodHMgcGxheWluZyAgIGdhbWUgd2l0aCBIdWdoIExhdXJpZSBHb25uYSBIYWxsb3dlZW5pZSBzb25nICBoaWxhcmlvdXNseSAgQm90aCB3ZXJlIFRoYW5rICBKYXBhbmVzZSB3aW5lICBCZWNhdXNlICAgdGhpbmcgY2F0cyByZWFsbHkgYW5vdGhlciByZWFzb24gIHRocm93IFRvbmlnaHQgIGJhY2sgVGhleSBwZXJmb3JtICB0YWxrIHdpdGggSmF2aWVyIEJhcmRlbSBncmVhdCBUaGFuayBTb29vbyBtYW55IGNob2ljZXMgICB3ZW50IHdpdGggTWFkZSB3aXRoIFRoYW5rcyBXYXRjaCBmaW5pc2ggICBXZWVrICBwbGF5aW5nIEZpbmlzaCAgdG9uaWdodCBMaWdodG5pbmcgQm9sdCAgVmVkZGVyIFBFQVJMIFR1cm4gQWxzbyBwbGF5aW5nICBnYW1lIHdpdGggdGFsa2luZyB3aXRoICAgR29ubmEgICBnb29kIEV4Y2l0ZWQgIGhhdmUgICBoZXJlIHRvbmlnaHQgIGRvaW5nIHNvbmdzIGZyb20gdGhlaXIgIGFsYnVtIFdoaXRlIEhvdXNlIGZpcmVkICBvZmZpY2lhbCAgYW5vbnltb3VzbHkgdHdlZXRpbmcgaW50ZXJuYWwgICBzYWlkICAgVGhlbiAgYWRkZWQgcGxheSAgaGFzaHRhZyBUd2VldCAgIGZ1bm55ICBhYm91dCBIYWxsb3dlZW4gICB3aXRoIENvdWxkIGRvaW5nIFNvdW5kcyBUb25pZ2h0ICBNYW5keSBQYXRpbmtpbiBjb250aW51aW5nIHdpdGggVW5pb24gRmxhdGlyb24gIEdyYW1lcmN5ICBvbmx5IGNob2ljZSAgcGl6emEgc2VuZCAgZnVubnkgIGZpbmQgICBmYXZvcml0ZXMgICBTdWJtaXQgZWNvbm9teSBhZGRlZCB0aG91c2FuZCBqb2JzIGxhc3QgICB0aG9zZSBwZW9wbGUgd2VyZSBoaXJlZCAgICBPYmFtYWNhcmUgU3RhciBUZWFtIEZhbGxvbiBKdXN0IGhlYXJkIHJlaGVhcnNhbCAgRmxlZXQgUm9iaW4gUGVja25vbGQgIGRvaW5nICAgc291bmRzIEdyYW5kcGEgbGFzdCBpcnJldmVyZW50ICB0b3RhbGx5IENvbmdyYXRzICAgZXZlcnlvbmUgY29udGludWVzIHdpdGggIHBlcmZvcm1hbmNlICAgRmxlZXQgUm9iaW4gQWxlYyBCYWxkd2luIHNwaXRzIHdoZW4gdG90YWxseSBlbmpveWVkICBTaG93IGxhc3QgbmlnaHQgZnJvbSBzY3JlZW4gYWxzbyBza2V0Y2ggYWxlYyBUaGFuayBDaGVjayAgY292ZXIgVGhhbmsgICAgICBiZXN0IG1vbWVudHMgIExhdGUgVGhhdCBNYXJrIFp1Y2tlcmJlcmcgYm91Z2h0ICBob21lcyBhcm91bmQgICBoYXZlIGV4dHJhICBhY3R1YWxseSBibG9ja2luZyBwZW9wbGUgIHJlYWwgT2theSAgZWFzeSAgRmFpcnZpZXcgVGhhbmtzICBwbGF5aW5nIFlvdXIgQ29ybiB0aW1lICBwbGF5ICBDb3JuIFRoYW5rcyAgIGd1eXMgb3ZlciAgIFRoaXMgIEhvdXNlIGtlZXBpbmcgIGNsYXNzeSAgIENsZWFuICBDb21lZHkgSW5zdGFncmFtIHJlbW92ZXMgIGZyb20gdHdpdHRlciBUaGFuayAgIGJyaW5naW5nIHlvdXIgY29tZWR5IHRvdXIgICB3ZXJlICBoaWxhcmlvdXMgICAgIEJlc3QgbmlnaHQgZXZlciBUaGFuayAgdGhlem9nICBrZWVwaW5nICBjbGFzc3kgICBDbGVhbiAgQ29tZWR5IGxvdmUgdGhlc2UgVGhhbmsgc2hvdyBUaGFua3MgQmVlZnkgS2luZyBHcmVhdCBHb29kIG1vcm5pbmcgIFdoZXJlIHNob3VsZCAgICBzb21ldGhpbmcgbG9jYWwgRnVubnkgc2hvdyB0b25pZ2h0ICB0aGVzZSAgIHRvbW9ycm93IFRoYW5rcyAgICAgICBzeW5jaW5nIHdpdGggICBraWxsZWQgSnVzdCBmaW5pc2hlZCBzb3VuZCBjaGVjayAgIHJlYWR5IExvb2sgICAgIHN0YXRpb24gIHRoYW5rcyBQcm9wcyAgICBzdGFmZiAgYW5jaG9ycyAgIGhhbmdpbmcgd2l0aCBDbGVhbiAgVG91ciBjb250aW51ZXMgdG9tb3Jyb3cgbmlnaHQgICBDb2JiIEVuZXJneSBDZW50cmUgVGhhbmsgIEZpcnN0IG5pZ2h0ICBDbGVhbiAgVG91ciAgR3JlYXQgVGhhbmsgYmFycyB0aGF0IGhhdmUgZGFydCAgc3VwcGx5aW5nIGRydW5rIHBlb3BsZSB3aXRoIHNoYXJwIG9iamVjdHMgVG9uaWdodCAgS2VhbnUgQmVuZWRpY3QgQ3VtYmVyYmF0Y2ggbXVzaWMgZnJvbSByZXN0YXVyYW50ICAgIGN1c3RvbWVycyB0YWxrIGR1cmluZyBXaGVuIHRoZXkgT2JhbWEgIFJlcHVibGljYW5zIHNhaWQgVG9uaWdodCAgbXVzaWMgZnJvbSBGcm9tIGxhc3QgcGVyZm9ybWluZyBsaXZlICAgIG11Y2ggU3RhcmJ1Y2tzICAgICBzZWxsaW5nICAgcGFzdHJ5IGNhbGxlZCAgQmVhdHMgIG90aGVyIG5hbWUgICBNdWZmTnV0IHdyaXRlcnMgc3RhcnRzICBldmVyeSBkYXRlICBhc2tpbmcgIGdpcmwgICBmYXZvcml0ZSBIYXJyeSBQb3R0ZXIgY2hhcmFjdGVyIEhhc2h0YWcgVHdlZXQgICBmdW5ueSAgZW1iYXJyYXNzaW5nIHJlYXNvbiAgICBzb21lb25lICBrbm93ICBzaW5nbGUgIHdpdGggQ291bGQgQWxzbyB0b25pZ2h0IEplZmYgTXVzaWFsIHJldHVybnMgICBzaG93IHdpdGggQWxhbiBzdHJhaWdodCBmcm9tIGRvaW5nICBsaXZlIHBlcmZvcm1hbmNlIE1hbnkgIHRoaW5ncyBWbGFkaW1pciBQdXRpbiAgIE9seW1waWMgdG9yY2ggIG1pbnV0ZXMgbGF0ZXIgIGd1c3QgIHdpbmQgYmxldyAgIHdpbmQgVGhhbmsgICAgIGF3ZXNvbWUgYmFuZCAgIG9yZGVyIGF2YWlsIE9jdG9iZXIgdGFraW5nIGhvbmVzdGx5IGluc2FuZSByaWdodCBUaGlzIFJJUFBJTkcgICAgIHN0dWRpbyByaWdodCBNaW5pICAgIE9jdG9iZXIgYmVsaWV2ZSAgV2hlcmUgc2hvdWxkIFByb21vICAgc2hvdyBCcmFuZCB0aGF0IEdvb2RieWUgSG9ub3JlZCAgaGF2ZSBtYWRlICB3YWxsICBVbmlvbiBPeXN0ZXIgRGlzbmV5IFdvcmxkICBoZWxwaW5nIGVtcGxveWVlcyBzaWduICAgIFNuZWV6eSAgIFNsZWVweSAgIEFkZGVyYWxsIEdydW1weSBiYWNrICAgUGx1cyB5b3VyIHR3ZWV0cyAgTGF0ZSBOaWdodCBBZnRlciB5ZWFycyAgIFlvcmsgT3BlcmEgIGZpbGluZyAgICAgIGxhZHkgb25jZSAgIHRleHQgZnJvbSAgIHRoYXQgICBUVVJOIENBUFMgTE9DSyBwbGF5ICBIYXNodGFnIFR3ZWV0ICBzb21ldGhpbmcgIGVtYmFycmFzc2luZyB5b3VyICB0ZXh0ZWQgICB3aXRoIENvdWxkIFBhdWwgQW50aG9ueSBNYWNraWUgbXVzaWMgZnJvbSBBdWRpZW5jZSBTdWdnZXN0aW9uIHRyZW5kaW5nICBpb3dhIHdoYXQgSmltbXkgICB0cmVuZGluZyAgIFplYWxhbmQgTWljaGFlbCBKb3JkYW4gc2FpZCAgYmVhdGVuIExlQnJvbiAgIFRoZW4gTGVCcm9uIEJhY2sgICBvbmx5IEF2ZXR0IEJyb3RoZXJzIHNpbmcgSGVhdnkgTWV0YWwgcGVyZm9ybWFuY2UgQ291cGxlcyAgc3BsaXR0aW5nICBjb3N0ICAgZW5nYWdlbWVudCBCZWNhdXNlIGV2ZXJ5IGdpcmwgZHJlYW1zICBoZWFyaW5nIEp1c3QgIGdsaW1wc2UgIHdoYXQgZ29lcyAgYmVoaW5kICBzY2VuZXMgIHJlaGVhcnNhbCAgIFRoaXMgIGZyb20gbGFzdCBUb25pZ2h0ICBFbGl6YWJldGggT2xzZW4gbXVzaWMgZnJvbSBQcm9wcyAgQmVkZm9yZCBDaGVlc2UgU2hvcCAgSXJ2aW5nICAgICBjb29sIGtpZHMgdGhhdCB3b3JrIHRoZXJlIGZpcnN0IGxhc3QgICAgIGtub3cgYWJvdXQgSnVzdCAgICAgIHNob3cgdGhhdCAgIGN1cnJlbnRseSBUaGFua3MgICAgIGV2ZXJ5b25lICBIZXJlICAgZnVsbCBmcmllbmQgIEZhbGxvbiB3aW5zICAgYmVzdCBwYXJvZHkgZGVmYXVsdCBleHByZXNzaW9uICB0aGF0ICBzb21lb25lICAgcmlnaHQgICBjdXNwICBKYW1lcyBXaGF0ICBncmVhdCBXYXRjaGluZyAgc2Vhc29uIHByZW1pZXJlICBTYXR1cmRheSBOaWdodCBkb25lICAgdGhlc2UgICBBbHNvICBWb2xvICBzb2xkICBjb21lIHdhdGNoIHdpdGggdGhlc2UgZ3V5cyBnYXd3d2QgIHRoYXQgZHJvb2wgdGhhdCAgIHlvdXIgY2hpbiAgd2hvbGUgdGltZSAgIFRoYXQgY2FuY2VsZWQgIHZpZXdlcnMgd2lsbCBuZXZlciBkZWxldGUgIGRvemVucyAgZXBpc29kZXMgIHRoZWlyICBiZWNhdXNlIHRoZXkgbWlnaHQgbmVlZCB0aGVtIFBsYXlpbmcgICBnYW1lIHdpdGggICBUaW5hICAgIHNob3cgUm9vdHMgc2luZyAgdGhlbWUgc3R1ZHkgc2F5cyAgWW9ya2VycyAgc29tZSAgIG1vc3QgaG9uZXN0IHBlb3BsZSAgICAgdGhhdCAgcmVhbGx5IHJlYWQgdGhhdCBXYWx0IGhhbmRzICBkcnVnIGVtcGlyZSBvdmVyICAgbW9yZSB3b3J0aHkgbWV0aCBCaWxsICAgU2NpZW5jZSBzaG93ICB3aGF0ICBUd2l0dGVyIGNvbnZlcnNhdGlvbiBzb3VuZHMgbGlrZSAgcmVhbCBNaWNoYWVsICBtdXNpYyBmcm9tIG1pbGxpb24gVGhhbmsgIGd1eXMgRXBpYyAgU3luYyBiYXR0bGUgdG9uaWdodCBiYWNrIHdpdGggICBzaG93IG11c2ljIGZyb20gQ29uZ3JhdHVsYXRpb24gICAgd2lubmluZyAgYmVzdCBTUGlOICBUT0xEICAgcGxhY2UgVGhhbmtzICAgc2hvdXQgIG5vdGhpbmcgIGxvdmUgd2VudCB3aXRoICBjaGFtcGFnbmUgVG9uaWdodCBTaG93IHdpdGggVG9uaWdodCAgSmFtZXMgcGhvdG9ncmFwaGVyIE5lYWwgQ2hlZiBEb3dubG9hZCAgIGFsYnVtIGZlYXR1cmluZyBXaXNlICBHaG9zdCAgaVR1bmVzIHJpZ2h0IFRvbmlnaHQgIGJhY2sgICBQbHVzIGF1dGhvciBHaWxsaWFuIEZseW5uIG1vcmUgbXVzaWMgZnJvbSBIYXBweSBTdWdhciBIaWxsIEJpcnRoZGF5ICAgIGV2ZXJ5b25lIGJvcm4gIFNlcHRlbWJlciBOb3J0aCBLb3JlYSBzYXlzICB3YW50cyAgcmVzdW1lIHRhbGtzIHdpdGggIE9iYW1hIHNheXMgICAgdGhhbmtpbmcgRGVubmlzIHRlYWNoZXIgdXNlZCAgY2FsbCBxdWl6emVzICB3YW50ICBrbm93IHdoYXQgIGNhbGxlZCBwbGF5ICBIYXNodGFnIFR3ZWV0IHNvbWV0aGluZyBmdW5ueSAgd2VpcmQgYWJvdXQgICB5b3VyIHRlYWNoZXJzICBDb3VsZCByZW1lbWJlciBjYW1wICBzaW5naW5nIHdpdGggIENhbXAgYmFjayAgYW5vdGhlciBPcmxhbmRvIEJsb29tIG11c2ljIGZyb20gRnJlZXN0eWxpbmcgV2l0aCAgVGFrZSAgdmlkZW8gIHlvdXIgIHVwbG9hZCAgWW91VHViZSAgIGNvdWxkIEZsYWNjbyBtaXNzZWQgIGJpcnRoICAgY291bGQgcGxheSBhZ2FpbnN0ICBFdmVuICBiYWJ5IFRvbmlnaHQgIG11c2ljIGZyb20gV2F0Y2hpbmcgICByaWdodCAgQ29uZ3JhdHMgZG9pbmcgIGNvb2wgY29udGVzdCAgIEFubm91bmNpbmcgdGhpcyBTdWJzY3JpYmUgVG9uaWdodCBwbGF5aW5nIENoYXJhZGVzIHdpdGggU2NhcmxldHQgSm9oYW5zc29uIG11c2ljIGZyb20gU2FtcGhhIExvdmUgIFRoZWlyICBsb3ZlIGd1ZXN0cyAgUm9iZXJ0ICAgU2VkYXJpcyAgbXVzaWMgZnJvbSBjb3Vyc2Ugc3RlYWxzICBUaGFuayAgU3RheSBNb3JlIFdhdGNoICBncmVhdCAgaGVhZCB3cml0ZXIgICBIYW5rICAgQnJlYWtpbmcgIHBhcm9keSBKb2tpbmcgICAgIENoZWNrIEFudGhvbnkgV2VpbmVyIGZsaXBwZWQgIHJlcG9ydGVycyBhZnRlciBsb3NpbmcgbGFzdCBUaGVuICBZb3JrZXJzIG1heWJlICAgIHJpZ2h0IEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyB3ZWlyZCAgZnVubnkgYWJvdXQgIHJvb21tYXRlICAgIHdpdGggQ291bGQgcmVhZHkgICBTdW5kYXkgd2l0aCBFdm9sdXRpb24gICBab25lIE9iYW1hICBzZXBhcmF0ZSBsdW5jaGVzIHdpdGggUmVwdWJsaWNhbnMgRGVtb2NyYXRzIFRoZW4gQ2hyaXMgQ2hyaXN0aWUgICB3YW50IEZyb20gbGFzdCBwZXJmb3JtcyB3aXRoIENoYXJsaWUgV2lsc29uIE1pY2hlbGxlIERhdmlkIG11c2ljIGZyb20gUHJvcyBDb25zICAgIHNvbWV0aGluZyB2ZXJ5IE1hcnRpbiBTaG9ydCAgYWx3YXlzIHN1cnByaXNlcyBMYXRlIE5pZ2h0ICBwZXJmb3JtcyAga2lsbHMgQ29vbCB0aGluZyBhYm91dCBkb2luZyAgc2hvdyAgIGFueW9uZSAgZHJvcCBzdXJwcmlzZWQgICBwZXJmb3JtZWQgdG9uaWdodCAgTGF0ZSBzaG93IFdlZG5lc2RheSAgIGFuc3dlcmluZyBUd2l0dGVyIHF1ZXN0aW9ucyBmcm9tIFR3ZWV0IHlvdXJzICB3aXRoIElDWU1JICBzaW5ncyByYXBzIHNvbmdzICAgc3R5bGUgIEJyb2Fkd2F5IFRvbmlnaHQgICBndXlzIGZyb20gVGhhbmsgICBoYW5naW5nICB3aXRoICBDb25ncmF0cyAgICAgZ3JlYXQgcGVyZm9ybWluZyAgIHNob3cgdG9uaWdodCAganVzdCBTdWNoIGhpZ2ggZW5lcmd5ICAga25vY2sgIFRoYW5rcyBUb25pZ2h0ICBtdXNpYyBmcm9tIFJhdmVucyBwbGF5ICBCcm9uY29zICAgIG9wZW5lciBob3VycyAgUGV5dG9uIE1hbm5pbmcgIGp1c3QgVG9uaWdodCAgU3RldmUgQ2hlZiBEYW5pZWwgSHVtbSAgZnJvbSBJbGx1c2lvbmlzdHMgTGVvbiBFdGllbm5lIFJvbXkgUmVzZWFyY2ggc2F5cyBGYWNlYm9vayAgY2hhbmdlZCAgIGJyYWlucyBCZWZvcmUgd2hlbiAgc2FpZCAgbGlrZWQgIGFjdHVhbGx5IFNwZWNpYWwgaGFzaHRhZyBTdGV2ZSAgICB0d2VldCBzb21ldGhpbmcgIHdhbnQgc2hvdyBNYXlvciBtdXNpYyBmcm9tICBQdXBweSBQcmVkaWN0b3JzIHByZWRpY3QgIHNlYXNvbiBNYXJrIFp1Y2tlcmJlcmcgIGxhdW5jaGVkICAgcHJvamVjdCAgYnJpbmcgSW50ZXJuZXQgYWNjZXNzICBldmVyeW9uZSBmaXJzdCBzaG93ICBtdXNpYyBmcm9tIGJhY2sgd2l0aCAgYnJhbmQgIExhdGUgTmlnaHQgdG9uaWdodCAgICBsb29rcyBsaWtlICAgIGV4cGxhaW4gR29ubmEgICAgd2hpbGUgQmVjYXVzZSByZWFsbHkgdHdlZXQgQ2F0Y2hpbmcgICBJbnNpZGUgc2Vhc29uICAgQXBwbGUgQ29uZ3JhdHMgYWdhaW4gIEtpbGxlZCAgV2hlcmVhcyAgYnJva2UgIHN3ZWF0IGdpdmluZyBIb25vcmVkICBwcmVzZW50IHdpdGggIE1pY2hhZWwgSmFja3NvbiBWaWRlbyBWYW5ndWFyZCBBd2FyZCBmaW5pc2ggdGhpcyBKYW1taW5nIHdpdGggIHdhbGtpbmcgV2l0aG91dCBwZW9wbGUgbGlrZSAgIGNyZWF0ZSBzdHVmZiBsaWtlIFRoYW5rcyAgbGlrZSB0aGlzIFNvcnJ5ICAgICAgaGFwcHkgIGhlYWx0aHkgIGp1c3QgdGFraW5nIGNhcmUgICBsaXR0bGUgd2hhdCBraW5kICAgIEdvbGRlbiBUb21vcnJvdyAgQnJvdGhlciAgYWxsZWdlZCBKb2hubnkgQ2FzaCBUaGFuayBGcmVuY2ggIGxvb2tpbmcgbGlrZSBzb21ldGhpbmcgc2VuZCBQb3RhdG8gSGVhZCAgIG1haWwgICByYW5zb20gc2hvdyBtdXNpYyBmcm9tIFJvY2tlZmVsbGVyICBlYXJseSBHb29kIHdlYXJpbmcgZ2xhc3NlcyB0aGlzICBpbmNpZGVudCBpbnZvbHZpbmcgYmFuYW5hIGNyZWFtIFRoaXMgd2VlayAgIGJldHRlciB0aGFuIHRoaXMgIG5leHQgcGxheWVkICBCb3N0b24gICBUaGF0IHllYXIgIEFsd2F5cyAgZ2lhbnQgcGxhY2UgICBoZWFydCBtZWFuICB0ZWxsICB5b3VyIGZhdm9yaXRlIHBsYXllciBsb3N0IE9yc29uIFdlbGxlcyBmaWxtICBqdXN0IGNhbGxlZCBNdWNoIEFudGhvbnkgV2VpbmVyICB3aGF0ICAgY2FsbCBEZXJlayBFbW1hIFJvYmVydHMgbXVzaWMgZnJvbSB5b3VyIHN0dWR5IGZvdW5kIG1vc3QgQW1lcmljYW5zIHdhbnQgIGxpdmUgICAgZ3JvdXAgdGhhdCBkb2VzIHdhbnQgIGxpdmUgIHBlb3BsZSBNb3VudCBSdXNobW9yZSAgIEhhcnJ5IGZhY2UgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIHdlaXJkICBmdW5ueSAgICAgIFBvd2VyYmFsbCAgIHdpdGggQ291bGQgTGFkeXNtaXRoIFNuYWNrIE1hbWJhem8gc2luZ3MgYWJvdXQgUHJpbmdsZXMgQnJpYW4gV2lsbGlhbXMgUmFwcyBZb3VuZyBKZWZmICAgIGp1c3QgYm91Z2h0ICBXYXNoaW5ndG9uICBzaW5jZSAgYm91Z2h0ICBiZWZvcmUgU3RldmUgTW9uaWNhIFdhcmQgZnJvbSBtdXNpYyBmcm9tIHNpdHMgIHdpdGggVG9uaWdodCAgIHNob3cgIG11c2ljIGZyb20gVGhhbmsgIHNpdGUgYnV0dG9uIHRoYXQgc2F5cyAgIGJhc2ljYWxseSBiZWluZyBUb25pZ2h0IHJldHVybnMgIHBlcmZvcm0gbGl2ZSBNaXJhbmRhIG9ubHkgdXNpbmcgY2xhc3Nyb29tIFN1YnNjcmliZSAgIGNoYW5uZWwgIGNvbW1lbnQgUHJvcHMgICBicmluZ2luZyBiYWNrICBob3N0ICBPc2NhcnMgIHdpbGwgQmx1cnJlZCBMaW5lcyB3b3JsZHdpZGUgdHJlbmQgIFRoYW5rcyBNdXNpYyBSb2JpbiAgIHNpbmcgdXNpbmcgZ3JhZGUgc2Nob29sIFdpZmUgIGp1c3QgcmVuZXdlZCAgIHRoaXJkICAgQW50aG9ueSB3aWZlIFRvbmlnaHQgIEplbm5pZmVyICBtdXNpYyBmcm9tIEdvb2RpZSBZb3VyIGdvZXMgY291bnRyeSBzaW5ncyAgIHNwaWxsIHByb3Rlc3QgU2ltb24gQ293ZWxsICBleHBlY3RpbmcgICAgIEJhYnkgIHNob3BwaW5nICAgc2hvdWxkICBzb21lICAgYmFieSBvY2VhbiAgICAgbGl0dGxlIG1vdGlvbiBoZXJlIGNvbWVzICAgc2hhcmt5IHdhbnRzIHBsYXkgIGhhc2h0YWcgVHdlZXQgICBmdW5ueSAgYWJvdXQgc2hhcmtzICAgd2l0aCBDb3VsZCBoYXZlIG5ldmVyIGhlYXJkICAgQ3JvbnV0ICB3aWxsIGFmdGVyICBkb251dCAgIFlvcmtlcnMgd2lsbCB0ZWxsICBnYW1lIHNob3cgdGhpcyBUb25pZ2h0ICBDaGVmIHNob3dpbmcgICAgbWFrZSBpUGhvbmUgIHRoYXQgYnJlYWtzICB3aXRoIHlvdXIgc2lnbmlmaWNhbnQgY2FsbGVkIHdpdGggSnVzdCBUaGFuayAgIGRvaW5nICAgIHdpbGwgbWFrZSAgd29ybGQgIGJldHRlciBvbmx5IHNpdHRpbmcgIHdpdGggIFJvb3RzIG11c2ljIGZyb20gYW5ub3VuY2VkICAgbWluaXNlcmllcyBhYm91dCBIaWxsYXJ5IHN0YXJyaW5nIERpYW5lIExhbmUgICAgQmlsbCAgIHBsYXkgTW9uZGF5IFBvcHB5IE1vbnRnb21lcnkgbXVzaWMgZnJvbSBSYWRpb2FjdGl2ZSB3aXRoIHRvbmlnaHQgIExhdGUgUGxheSBUaGFuayAgYmVpbmcgUHJpbmdsZXMgdGhhdCBkZWNpZGVkIFRvbmlnaHQgIG11c2ljIGZyb20gU3RheSAgIExhdGUgQW5keSAgIGR1ZGVzIHBsYXkgd2l0aCAgZnJvbSAgV2FjayBUaGV5IGtpbGwgVGhhbmsgICBldmVyeW9uZSAgICAgbWVudGlvbiAgICBsb3ZlZCBUb25pZ2h0ICBBbmR5IFNhbWJlcmcgIHBlcmZvcm1hbmNlIGZyb20gbXVzaWMgZnJvbSBIYXNodGFnIFR3ZWV0ICAgZnVubnkgcGFyZW50aW5nIG1pc3Rha2UgICB5b3VyICBwYXJlbnRzIGhhdmUgbWFkZSAgIHdpdGggQ291bGQgYmFjayB3aXRoICBicmFuZCAgc2hvdyB0b25pZ2h0IHdpdGggSHVnaCBKYWNrbWFuICAgYnVuY2ggICBDaGVjayB3aWZlICAgdGhhbmsgICAgICBuaWNlIGJhYnkgd2VsbCAgZmlyc3QgICAgYmVzdCAgICAgVGhhbmtzIEthdGUgTWlkZGxldG9uIHdlbnQgaW50byBsYWJvciB0aGlzIFdoZW4gIHJlc3QgICByb3lhbCBmYW1pbHkgdGhleSBndXlzIGRlc3Ryb3llZCBUaGFuayAgIGhhcHB5IFRvbmlnaHQgIEVsaW90IFNwaXR6ZXIgbXVzaWMgZnJvbSAgZ3JlYXQgVHJlbmRpbmcgIENvbWUgIFdlc3QgSGVyZSAgIGNoYW5nZSB5b3VyIHRoYW5rcyBsb3ZlIHRoYXQgICAgcmlnaHQgSGVyZSAgSmVzc2UgICBSaXBwZXJzIHJpZ2h0IFRoYW5rICBsb29raW5nIGxpa2UgICBlaXRoZXIgYWJvdXQgIGZpZ2h0IGNyaW1lICBmbGFzaCBKZXNzZSAgIFJpcHBlcnMgcGVyZm9ybSAgTGF0ZSBjb3Vyc2Ugc3VwZXIgdGhhbmtzICBldmVyeW9uZSAgd2F0Y2hlcyAgICAgd2l0aG91dCBtdWNoIGdvb2Qgc3R1ZmYgUnlhbiBtdXNpYyBmcm9tIE1pY2hhZWwgV2luc2xvdyBzaXR0aW5nICB3aXRoIHBzeWNoZWQgYWJvdXQgIEVtbXkgQWxzbyAgbXVzaWNhbCBndWVzdCB0aGlzIEZyaWRheSBuaWdodCAgSmVzc2UgU3RhdHVlICBMaWJlcnR5IHdlbnQgcGxheSAgaGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIGZ1bm55IGFib3V0ICAgICAgIHdpdGggQ291bGQgc2hvdyBDYXRoZXJpbmUgbXVzaWMgZnJvbSBHcmVhdCBsaXZlIHZlcnNpb24gIEdvb2R5ICBTaG9lcyAgQWRhbSBCcnVjZSBNYW1hIEp1bmUgZnJvbSBDb21lcyBIb25leSAgbXVzaWMgZnJvbSBleGNpdGVkICAgSmVzc2UgICBSaXBwZXJzIGZyb20gTWV0cyAgIFlvcmsgZmFucyAgdGhleSAgIGlkZWEgVGhhbmtzICAgWW9yayAgZG9pbmcgICB3aXRoICAgIGdyZWF0IGNhcmVlciAgY29tZWR5IGFoZWFkIFRoYW5rICBldmVyeW9uZSBvdmVyIGhvcGUgIGxpa2VkICBpbnRlcnZpZXcgIG11Y2ggICAgYmVpbmcgaGlsYXJpb3VzIEtyaXN0ZW4gbXVzaWMgZnJvbSBBZGFtICAgcmV0dXJuIEJlc3QgZGluaW5nIGV4cGVyaWVuY2UgTWFkaXNvbiBQYXJrICBQcm9wcyAgQ2hlZiBIdW1tIFRvbmlnaHQgIEtyaXN0aW4gU2NvdHQgIFJvY2t3ZWxsIG11c2ljIGZyb20gRXhwZXJ0cyAgRWxpb3QgU3BpdHplciBjb3VsZCBodXJ0IEFudGhvbnkgbWF5b3JhbCBTcGl0emVyIHRoaW5ncyBiZXR0ZXIgRVNQTiAgTWFnYXppbmUgIHJlbGVhc2luZyAgd2l0aCBhdGhsZXRlcyBwb3NpbmcgQWxvbmcgd2l0aCAgc2FtZSBwcm9taXNlIHBsYXkgIGhhc2h0YWcgVHdlZXQgIHNvbWUgZnVubnkgIHNpbGx5ICBseXJpY3MgICB3aXRoIENvdWxkIEZpbmQgZnVubnkgc3R1ZmYgIGNvbWUgYWNyb3NzICAgc2NyZWVuIGdyYWIgIHNlbmQgICAgIG1pZ2h0IHdpbGwgICAgc2hvdyB0aGlzIEd1ZXNzICAgZm91bmQgIERvaW5nIEZhbGxvbiB0b25pdGUgIExvdmUgZnVudGltZXMgdG9uaWdodCBNZXhpY28gIHBhc3NlZCAgICBtb3N0IG9iZXNlICBjb21pbmcgYmFjayBuZXh0IEdvb2Qgc2hvdyBtdXNpYyBmcm9tIHdoaXN0bGVibG93ZXIgRWR3YXJkIFNub3dkZW4gIGFzeWx1bSBvZmZlcnMgIE5pY2FyYWd1YSAgICBTbm93ZGVuIGxvb2tpbmcgIGZ1bm55IHN0dWZmICBmaW5kIG9ubGluZSAgICAgY2FsbGVkIFN1Ym1pdCBmcmlnaHRlbmVkICBrbm93IHRoYXQgIGFuaW1hbCBleHBlcnQgd2lsbCAgcmV0dXJuaW5nICAgc2hvdyBBbm5kICBMYXRlIE5pZ2h0IHN0YXJ0aW5nIHJlYWR5ICAgcmVtYXRjaCB3aGVuZXZlciBLYW55ZSBoYXZlIG5hbWVkIHRoZWlyIGRhdWdodGVyIE5vcnRoICAgU291dGh3ZXN0IEFpcmxpbmVzICBoYXZlICBzZWNvbmQgVGhhbmtzIGV2ZXJ5b25lICB5b3VyIFdpdGggIHZpZGVvcyB0aGFua3MgIHlvdXIgYXdlc29tZSBKYXNvbiAgZ3V5cyBmcm9tIG11c2ljIGZyb20gIFN1cGVyIE1hcmlvIFdoaXRlIEhvdXNlIHN0YWZmIHBsYXllZCBzb2Z0YmFsbCAgdGVhbSAgbWFyaWp1YW5hIFRoZXJlIHdlcmUgbGlrZSBoaXRzIGJlZm9yZSAgZ2FtZSBldmVuIG11c2ljIGZyb20gIFllYWggWWVhaCBZZWFocyBjb250aW51ZXMgd2l0aCBnYW1lIGNhbGxlZCBTZWNvbmRzICBzZW5kIGZ1bm55IHZpZGVvIHRhZ2dlZCBtdXNpYyBmcm9tIE9iYW1hIHdpbGwgbWVldCBzb21lIHJlZ3VsYXIgQW1lcmljYW5zICBoZWFyIHRoZWlyIHRob3VnaHRzIGFib3V0IGdvdmVybm1lbnQgIG1vcmUgaGVhciB0aGF0IE1pY3Jvc29mdCBjaGFuZ2VkIHRoZWlyIG1pbmQgYWJvdXQgZ2FtZSBzaGFyaW5nICBpbnRlcm5ldCBXYWxraW5nICAgIG9jZWFuIHRyeWluZyAgbG9vayBIdWdlIHdhdmUga25vY2tlZCAgb3ZlciBwdWxsZWQgIHNob3J0cyBCbG9vZHkgICBicmVhdGggSGFzaHRhZyBUd2VldCAgICBlbWJhcnJhc3NpbmcgYmVhY2ggc3RvcnkgdGhhdCBoYXBwZW5lZCAgICAgd2l0aCBDb3VsZCBzaG93IG11c2ljIGZyb20gVG9uaWdodCBwZXJmb3JtcyBzdGFuZCAgIHBlcmZvcm1zICAgR29vZCBzdWNoIG9ubHkgbXVzaWMgZnJvbSAgZGVtbyAgS25hY2sgZXhlYyB3aWxsICAgYW1iYXNzYWRvciAgV2hlbiBhc2tlZCAgaW1wcm92ZSByZWxhdGlvbnMgd2l0aCBUb25pZ2h0ICAga2ljayAgTGF0ZSBOaWdodCBWaWRlbyBHYW1lIFdlZWsgd2l0aCBYYm94IEhhcHB5ICAgICAgYWxzbyAgIGJpb2xvZ2ljYWwgZmF0aGVyIFRoYW5rIGhvcnMgIGJlaW5nIGFwcGV0aXplcnMgdGhhdCBtb3ZlZCAgRnJhbmNlIFRvbmlnaHQgIENlZHJpYyAgRW50ZXJ0YWluZXIgbXVzaWMgZnJvbSB3aXRoIGdyYWR1YXRlZCBmcm9tIGhpZ2ggIHB1bGxlZCAgcHJldHR5IGdvb2Qgc2VuaW9yICBjbG9zZWQgIGV5ZXMgVG9uaWdodCAgSnVsaWEgY29tZWRpYW4geW91ciBTbG93ICAgTmV3cyB3aXRoIGdvbm5hIHdhdGNoICAgIGJlc3QgdGltZSAgQ29tZSBiYWNrICBsb3ZlIHJldHVybiAgVGVib3dpZSB0b25pZ2h0ICBMYXRlIHBsYXkgIGhhc2h0YWcgVHdlZXQgICBlbWJhcnJhc3NpbmcgdGhpbmcgeW91ciAgIHNhaWQgICB3aXRoIENvdWxkIFVucmVhbCBndWVzdHMgIEZhbGxvbiBCb3VuZCAgICAgIGJvb2tzIFBhdGllbmNlIHdlZWQgUGF0cmlvdHMgc2lnbmVkICBXaGVuIGFza2VkICBhZGp1c3QgIGJlaW5nIGJvb2VkICBKZXRzIFRlYm93ICAgbWVhbiBHcmVhdCBzaG93IG11c2ljIGZyb20gUGxheSAgdmlkZW8gZ2FtZSB3aXRoIHlvdXIgICBZb3VUdWJlIENvdWxkIGp1c3QgZ2F2ZSAgICBiZXN0ICAgIGJlc3QgcGVyZm9ybWFuY2VzIHZvY2FsbHkgRVZFUiBPYmFtYSBqdXN0ICB3aXRoIENoaW5lc2UgUHJlc2lkZW50ICBPYmFtYSBhc2tlZCBDaGluYSAgc3RvcCBzcHlpbmcgIFRoZW4gSmlucGluZyBKYW1pZSBLaW5nIHRlYWNoZXMgIFJ1c3NlbGwgQ3Jvd2UgICBkYW5jZSBsaWtlIE1pY2hhZWwgVG9uaWdodCBUb25pZ2h0ICBTb2ZpYSBKYW1pZSBLaW5nIG11c2ljIGZyb20gZmVhdHVyaW5nIENvbmdyYXRzICAgIGtub2Nrb3V0IHBlcmZvcm1hbmNlIGhvc3RpbmcgIEdyZWF0IFRoYW5rIHdoYWxlICAgd2hhbGVzIGNhbGwgcmFwcyBXYXJyZW4gc2hvdyB0b25pZ2h0IHBsYXlpbmcgIGdhbWUgd2l0aCB0YWxrIHdpdGggbXVzaWMgZnJvbSBCcmlhbiBXaWxsaWFtcyByYXBzIFdhcnJlbiBiZWVuIGNvbGxlY3RpbmcgIHJlY29yZHMgIFZlcml6b24gV2hpY2ggZXhwbGFpbnMgICAgaGVhciBUb25pZ2h0ICAgQ2hyaXN0b3BoZXIgZ3JlYXQgbXVzaWMgZnJvbSBCcm9rZW4gU29jaWFsIFNjZW5lIGhvbm9yICAgYW5uaXZlcnNhcnkgICBEb29ycyBjb3ZlciAgIHRoZW1lIHNvbmcgQnJpYW4gV2lsbGlhbXMgc2luZ3MgVGhhbmtzIFRpZ2VyIFdvb2RzICBzaWduaW5nICAgZGVhbCB3aXRoIFdoaWNoIGV4cGxhaW5zICBKdXN0ICAgIE1vcmUgRGlzY3JlZXRseSBUaGlzIGdpcmxmcmllbmQgdG9sZCAgYWJvdXQgICBwbGFucyB3aXRoIHBsYXkgIGhhc2h0YWcgVHdlZXQgICBmdW5ueSAgZW1iYXJyYXNzaW5nICBiZWVuIGR1bXBlZCAgIHdpdGggQ291bGQgVG9uaWdodCAgIEdsZW5uIG11c2ljIGZyb20gIHJldHVybiAgIFJhZ3RpbWUgV2F0Y2ggYWJzb2x1dGVseSB3cmVjayBzaG9wIGNvbXBhbnkgYmVoaW5kIFdpdGggc2xhc2hlZCBFbXBsb3llZXMgd2VyZSAgICAgZWFzeSB0aW1lIGNvbWluZyAgd2l0aCBsZXR0ZXIgQnJ1Y2UgSmVubmVyIHJlYWxseSBtYWRlICAgICAgICAgdGhpbmsgICBhc2lkZSBFdGhhbiBSb3NlIEJ5cm5lIEJydWNlIG11c2ljIGZyb20gIEJhdHRsZSAgIEluc3RhbnQgU3RhcmJ1Y2tzICBiYW5uaW5nIHNtb2tpbmcgd2l0aGluIGZlZXQgICB0cmlja3kgc2luY2UgZXZlcnkgU3RhcmJ1Y2tzICBmZWV0IGZyb20gYW5vdGhlciBCYWNrIHdpdGggIHNob3dzIE5hdGhhbiAgbXVzaWMgZnJvbSBUb21haGF3ayAgIGxhdGVzdCBlZGl0aW9uIEhhcHB5IEJpcnRoZGF5ICAgZXZlciBoYXZlICBTbm9vcHkgdGhlbWVkIHBhcnR5IHdoZW4gIHdlcmUgU2VyaW91cyB0aGFua3MgIGhhaXIgc2V0cyAgIHdyaXRlcnMgcGxlYXNlIGVuam95ICB2ZXJzaW9uIFRoYW5rIEhhcHB5IE1lbW9yaWFsICAgICAgICB3b21lbiAgaGF2ZSBzZXJ2ZWQgSGFwcHkgQmlydGhkYXkgICBhd2Vzb21lIHByb2R1Y2VyIEhhdmUgIGdyZWF0IEpGYWxsb24gIGNvbXBhbnkga2lsbGVkICB0aGFua3MgVGVsbCB5b3VyIGZyaWVuZHMgIHdhdGNoIExhdGUgTmlnaHQgcmlnaHQgbmV2ZXIgc2VlbiAgc2hvdyBwbGVhc2Ugd2F0Y2ggdG9uaWdodCAgIHdoYXQgICBob3BlICBlbmpveSBUaGFuayAgIGFsbG93aW5nIG11c2ljIGZyb20gICBwcmVtaWVyZSBNb3JlIHRlZW5zICBkaXRjaGluZyBGYWNlYm9vayAgSW5zdGFncmFtICAgdGhleSB0b2xkIHRoZWlyICB3b3JyeSBhYm91dCBUb25pZ2h0ICAgQ2hlZiB5b3VyIEdhbWUgIERlc2tzIHRvbW9ycm93ICBMYXRlIEFudGhvbnkgIGNhbXBhaWduIGNvbW1lcmNpYWwgbmljZSBjYW1lbyAgV29ybGQgSnVzdCAgV29ybGQgIFNvb28gbXVjaCBiZXR0ZXIgdGhhbiBXb3JsZCBIaWdoIHNjaG9vbCBkcm9wb3V0IERhdmlkIEthcnAgc29sZCBUdW1ibHIgICAgaGlnaCBzY2hvb2wgZ3VpZGFuY2UgY291bnNlbG9ycyAgZ29ubmEgdXNlZCBOaXNzYW4gd2l0aCAgZmFrZSAgcGhvbmUgYnVpbHQgaW50byAgdXNlZCAgZHJpdmUgYXJvdW5kIHByZXRlbmRpbmcgIG1ha2UgY2FsbHMgSGFzaHRhZyBUd2VldCAgc29tZXRoaW5nIGZ1bm55ICB3ZWlyZCBhYm91dCAgd29yc3QgIGV2ZXIgICAgd2l0aCBDb3VsZCB1c2VkICBHYW1lICAgICB0aGlzIEZyaWRheSAgTGF0ZSBub21pbmF0ZWQgICBDaG9pY2UgVGVsZXZpc2lvbiAgaGFwcHkgICBoYXZlIHN1Y2ggIGFtYXppbmcgaGlsYXJpb3VzICBiYWNrICAgc2hvdyBFbGl6YWJldGggTW9zcyBtdXNpYyBmcm9tIHRlZW4gaW52ZW50ZWQgIGRldmljZSB0aGF0IHJlY2hhcmdlcyBjZWxsIHBob25lcyAgR29vZCAgICAgICBtYWRlICBwYXBlciBtYWNoZSBHYW1lICBEZXNrcyB0aGlzIEZyaWRheSBHYW1lICBEZXNrcyAgQWlycyB0aGlzIEZyaWRheSAgTGF0ZSBUaGFua3MgIGFtYXppbmcgbWFrZXVwIFRvbmlnaHQgIEdpbGxpYW4gQW5kZXJzb24gbXVzaWMgZnJvbSBUYXlsb3IgU3dpZnQgIEJpbGxib2FyZCBBd2FyZHMgbGFzdCAgdGhhbmtlZCAgICBBZGVsZSAgIG1ha2luZyAgYWxidW0gbGFzdCBHYW1lICBEZXNrcyB0aGlzIEZyaWRheSAgTGF0ZSBzaG9vdCBMb29rICBHYW1lICBEZXNrcyB0aGlzIEZyaWRheSAgTGF0ZSBDb2xpbiBKYWRlbiBTbWl0aCBDZWxlYiBUcmFjZSBBZGtpbnMgbXVzaWMgZnJvbSBUaGFuayAgbGV0dGluZyAga25vdyAgYW5ub3lpbmcgc29tZW9uZSAgYmFzZWQgICB0aGV5IHByb25vdW5jZSBGcmlkYXkgc2hvdyAgZ2FtZSB3aXRoIENocmlzIG11c2ljIGZyb20gICBTb3VsIEJhcmJpZSBEcmVhbWhvdXNlIGp1c3Qgb3BlbmVkICByZWFsbHkgbmVhdCAgd2hpY2ggbWVhbnMganVzdCBsaWtlIGJlZW4gIHJvdWdoIHdlZWsgIFByZXNpZGVudCAgIGNvdWxkIHRoaW5ncyAgIFRoZW4gIEJpZGVuIEhhc2h0YWcgVHdlZXQgIGF3a3dhcmQgIGVtYmFycmFzc2luZyB0aGluZyB0aGF0IGhhcHBlbmVkICAgIHByb20gbmlnaHQgICBDb3VsZCBUb25pZ2h0ICBKdWxpZSBCb3dlbiBEZW1pIExvdmF0byBtdXNpYyBmcm9tIE1hdHQgTGF1ZXIgbXVzaWMgZnJvbSAgICBXaGVlbCAgQ2FycGV0IG1lYW50ICB0aGF0ICBwYXJ0ICAgYmFsYW5jZWQgQnJhZGxleSBQb3J0aWEgIENlbGVicml0eSAgbXVzaWMgZnJvbSBUaGFuayAgZ3JhZGUgRW5nbGlzaCB0ZWFjaGVyICB0b3RhbGx5IHNwb2lsaW5nICAgIEdyZWF0IG1vdmllIHllYXJzIFRvbmlnaHQgIEFseXNvbiBIYW5uaWdhbiBCZW5lZGljdCBOaWdodCBOZXdzIFRoaXMgd2VlayAgIGFubml2ZXJzYXJ5ICBXaGljaCAgYmVjYXVzZSAgTGlua2VkSW4gIHNheXMgICB5ZWFycyBSYWNoYWVsIHJldHVybnMgICBzaG93IGdyZWF0IG11c2ljIGZyb20gRnJvbSBsYXN0ICBTeW5jICBXaXRoIFRoaXMgZW50cmFuY2UgICAgYmVzdCB0aGluZyB3YXRjaCB0b2RheSB0aGFuayBzaG93IHRvbmlnaHQgd2l0aCAgV2lzaCAgYmVlbiBEZW1zIHByaW1hcnkgY291bGQgIEhpbGxhcnkgY2FsbGluZyAgIHdvcnRoeSB3aGlsZSBjYWxsaW5nIEdyZWF0IHNob3cgU3RldmUgTWFydGluIEVkaWUgQnJpY2tlbGwgTWFyaWx1IEhlbm5lciBUaGFuayBDaW5jbyAgIGJlaW5nIFNwYW5pc2ggQ2FyZXkgQWxleGFuZGVyIGZyb20gbXVzaWMgZnJvbSBldmVyIHdhbnRlZCAgc3BlbmQgc29tZSB0aW1lIG9ubGluZSB3YXRjaGluZyBvdGhlciBwZW9wbGUgbWFrZSBtYXliZSAgIGxlZnQgbGl2ZSB3ZWJjYW0gdGhhdCBzaG93cyBwaXp6YXMgYmVpbmcgWmFjaCBHYWxpZmlhbmFraXMgSXNsYSBGaXNoZXIgYWR2ZXJ0aXNpbmcgbGVnZW5kIEdlb3JnZSBMb2lzIG11c2ljIGZyb20gZG9jdW1lbnRhcnkgYWJvdXQgIGxvdmUgbWFrZSB0aGlzIHBlcmZvcm1pbmcgIFNvb24gICAgc2hvdyBsYXN0IEZhbnMgICBKb2hubnkgTWFyciBwZXJmb3JtaW5nICBTb29uICAgZnJvbSBsYXN0IEdvb2dsZSBHbGFzcyBsZXRzIHVzZXJzIHNlbmQgdHdlZXRzIHdpdGggdGhlaXIgWW91ciBoYW5kcyByZW1haW4gY29tcGxldGVseSBmcmVlICAgQW50aG9ueSBXZWluZXIgaGF2ZSAgcG93ZXIgICB0aHJlZSBzaG93cyAgIHNhbWUgICBUaGF0IHdvdWxkIHBsYXkgIGhhc2h0YWcgVHdlZXQgICBmdW5ueSAgY3Jhenkgc3VwZXJwb3dlciAgd2lzaCAgICAgd2l0aCBDb3VsZCBtdXNpYyBmcm9tIHByaWNlICBnb2xkICByZWNlbnRseSBmYWxsZW4gICBsb3dlc3QgbGV2ZWwgIG92ZXIgIGV2ZW4gICBwaXR5IEppbW15ICAgYW5zd2VyZWQgIGJ1bmNoICB5b3VyIHF1ZXN0aW9ucyBhYm91dCAgc2hvdyBvdGhlciBNb3JlIEdvb2QgIHNob3cgY29taW5nIFdpbm9uYSBtdXNpYyBmcm9tICByZXR1cm4gTWFyayBadWNrZXJiZXJnICBvbmx5IHRha2luZyAgc2FsYXJ5IHRoaXMgICAgZnJvbSBNeVNwYWNlIFBhY2tlZCBzaG93IEFudGhvbnkgZnJvbSBUaGFuayBmcnVpdCAgYmVpbmcgIGRlY29yYXRpdmUgICAgdGhpbmdzIGdyZWF0ICBQb2VobGVyICAgc2hvdyAgc3R1ZmYgbWlzcyBCYXRhbGkgdGhyb3dzICBkcml2ZXIgIEppbW15ICAgICAgIHNob3RzIHdpdGggZHJpdmVycyBQcm9tbyAgIHNob3cgY29tZXMgICBDaGluYSBuZXh0ICBtb3N0IHBlb3BsZSAgQ2hpbmEgd2lsbCBqdXN0IHdhaXQgICAgYm9vdGxlZyByaWNoIG11c2ljYWwgcGFzdCB3aXRoIHNob3cgQW50aG9ueSBtdXNpYyBmcm9tIHlvdXIgTGF0ZSBOaWdodCBTZXF1ZXN0ZXIgYWZmZWN0IGV2ZW4gdGhvdWdoICBXaGl0ZSBIb3VzZSAgbWFraW5nIFVwb24gaGVhcmluZyBCaWRlbiBoYXZlIGtub3cgd2hhdCBBZnRlciAgIGRvY3RvciBhc2tlZCAgIGdpdmUgICBwb3NpdGl2ZSBZZWxwIHJldmlldyBiZWNhdXNlICAgb3RoZXIgcmV2aWV3cyB3ZXJlIEhhc2h0YWcgVHdlZXQgIHNvbWV0aGluZyAgZW1iYXJyYXNzaW5nIGFib3V0IHlvdXIgZG9jdG9yICAgd2l0aCBDb3VsZCByb29tbWF0ZSAgICBMb3ZlIHRoYXQgVG9uaWdodCAgTGF0ZSBUb25pZ2h0ICBKZXNzaWNhIG11c2ljIGZyb20gQXVkaWVuY2UgU3VnZ2VzdGlvbiBsb3ZpbmcgdGhpcyBzb25nICByaWdodCB0dW1ibHJzcGhlcmUgIGJsb3dpbmcgIGJlY2F1c2UgIHlvdXIgQ09OR1JBVFMgZ3JlYXQgdGltZSBzbG90ICAgICBQbGVhc2Ugd2F0Y2ggVGhhbmsgICAgZ3JlYXQgVmljZSBQcmVzaWRlbnQgICAgIGhhdmUgQ29uZ3JhdHMgICAgc2Vjb25kIHNlYXNvbiAgIGhhcHB5IEdpYW50cyAgIE1hbm5pbmcgY29tZWRpYW4gIG11c2ljIGZyb20gcHJlZmVyICB3YXRjaCAgICAgICAgIGJlc3QgICB3YXRjaCBMYXRlIHdhdGNoIHlvdXIgc2hvdyBsaXZlICBiZXN0ICAgd2F0Y2ggd2lsbCBoYXZlICBCdWxsIEdyZWF0ICB0aGlzIHNob3dzIHRoaXMgICAgeW91ciByaWdodCAgIGNyYXp5IFRpbWJscnMgbWVkbGV5IHBsdXMgVGhhbmsgICAgICBlc3BlY2lhbGx5ICBGYWxQYWxzICBldmVyeW9uZSBoZWFyIHRoYXQgICBraWxsaW5nICAgUm9zZWxhbmQgICAgZmF2b3JpdGUgcGxhY2VzIFRoYW5rIHBlb3BsZSAgICByZWFsbHkgIGxldHRpbmcgIGtub3cgYWJvdXQgbXVzaWMgZnJvbSBTaHVnZ2llIFRoYW5rIEdyZWF0ICBoYXZlICAgc2hvdyBsYXN0IG5pZ2h0ICAgdGltZSBjb25ncmF0cyAgIHRoZWlyIFdlYmJ5IFF1aWRkaXRjaCBXb3JsZCAgIHRoaXMgRmFucyAgd2hpbGUgdGhlaXIgcGFyZW50cyAgIGdvbm5hIG1vdmUgR3JlYXQgc2hvdyBWaW5jZSBtdXNpYyBmcm9tIHlvdXIgT29vb28gIGdvbm5hICBUaGlzICAgc3VwZXIgIHRoaW5rICBtaWdodCAgZ29vZCBleGNpdGVkICBoYXZlIGJhY2sgICBzaG93IHJ1bW9yZWQgdGhhdCBBZGVsZSAgcGxhbm5pbmcgIG5leHQgICAgY3VycmVudCBib3lmcmllbmQgICAgIGdvb2QgRlJFRSBDT05FIHN1cmUgICAgdGhleSB3aWxsIGdpdmUgIExhdGUgTmlnaHQgb25seSAgdG91ciBzdGFydGluZyAgdGlja2V0IGluZm8gVGhlbiBNaWNoZWxsZSBhbm90aGVyIGJsYWNrICB3aGl0ZSAgc2xlZXBzIFRoYW5rcyAgU3Rld2FydCAgc3RhZmYgICBEYWlseSBTaG93ICBzZW5kaW5nICBXYXRjaCAgZXZlcnkgbmlnaHQgQWJvdXQgICBvbnN0YWdlIHdpdGggR3JlYXQgc2hvdyBNZWxpc3NhIE1jQ2FydGh5IENocmlzIEplcmljaG8gbXVzaWMgZnJvbSBIYXNodGFnIFR3ZWV0ICBmdW5ueSAgd2VpcmQgaWRlYSAgaGF2ZSAgc29tZXRoaW5nICB3aXNoIGV4aXN0ZWQgICB3aXRoIENvdWxkIFRvZGF5ICAgICBtb3N0IGV4Y2l0aW5nIGRheXMgICAgcmVhZCBldmVyeSB0d2VldCAgZXZlcnkgcG9zdCAgIHRoYW5rIE9iYW1hIHNob3Qgc29tZSBiYXNrZXRzICBvbmx5IG1hZGUgICBFdmVuIERpY2sgQ2hlbmV5ICBuZWVkcyAgbGVhcm4gc2hvdyB0b25pZ2h0ICBmcmllbmRzICBoZXJlICBtdXNpYyBmcm9tIEFsZWMgQmFsZHdpbiBFbWlsaWEgQ2xhcmtlIENlbGViIG11c2ljIGZyb20gSG9ub3JlZCAgIHBhcnQgIHNhbHV0ZSAgQWJib3QgIEZpcnN0IE1hcmNoICBCYXNlYmFsbCBUb25pZ2h0IFNoYXJpbmcgeW91ciBDaGlsZGhvb2Qgd2l0aCB5b3VyICAgc2lzdGVyIE51bWJlciAgdHJlbmRpbmcgICB3aWxsIGFubm91bmNlICB3aW5uZXJzIFJld2luZCAgIHdhdGNoIHRoaXMgIGhhcHBlbmluZyAgd2VsbCBTaW5jZSAgICB0b21vcnJvdyBUaGFuayAgTm90ZXMgIHRvbmlnaHQgIExhdGUgVHVybiBGaW5kICBoaWRkZW4gRWFzdGVyICBzb21ld2hlcmUgICBzaG93IHRvbmlnaHQgIHR3ZWV0IHdpdGggRmlyc3QgdHdlZXQgZ3JlYXQgbXVzaWMgZnJvbSBlYXJseSAgRWFzdGVyIFRoYW5rIERpb25uZSBXYXJ3aWNrIG93ZXMgbWlsbGlvbiAgYmFjayBXaGVuIGFza2VkICAgcGxhbnMgICAgIHdoYXQgZnJpZW5kcyBBdWRpZW5jZSBTdWdnZXN0aW9uICBLYXRoaWUgICBtdXNpYyBmcm9tIERpZG8gc2hvdyB0b25pZ2h0IHdpdGggR29vZCBzaG93IENocmlzIEhhcmR3aWNrIG11c2ljIGZyb20gRGFydHMgV2F0Y2ggTGF0ZSBOaWdodCBCcmFuZCAgc2hvd3MgcGxheWVkICAgIGdhbWUgdG9uaWdodCB3aGVyZSAgZ2F2ZSAgYXVkaWVuY2UgbWVtYmVyIGhvdXIgIHdyaXRlICBzb25nIHRoZW4gcGVyZm9ybSBTb21lIGdvb2QgVG9uaWdodCAgIGNhc3QgR29vZCAgICB0aGlzIHdlZWsgYmVpbmcgIG1lbW9yYWJsZSB0aGlzIGVkaXRpb24gIEV2ZXJ5b25lICByZWFsbHkganVzdCAgZGVncmVlcyBhd2F5IGZyb20gc2hvdyBOaWdodCBOZXdzICAgVGhhbmsgQW5hbHlzdHMgd2VyZSAga25vdyAgY2hhbmNlcyAgdGhhdCBUaGVuICBIYXJ2YXJkIHRlYW0gVGhlcmUgICBodWdlIHVwc2V0IGxhc3QgbmlnaHQgICBOQ0FBIHRvdXJuYW1lbnQgd2hlbiBIYXJ2YXJkIGJlYXQgbnVtYmVyIFRvbmlnaHQgICBFbGl6YWJldGggTWl0Y2hlbGwgZnJvbSBHYXJ5ICBtdXNpYyBmcm9tIGtub3cgbGF0ZSAgIHBhcnR5ICAgIGxhc3QgbmlnaHQgIEJyb2Fkd2F5ICBsb3ZlZCBTb29vbyBUaGF0IGNhc3QgIHVuYmVsaWV2YWJseSBXaGljaCB3aWxsICByZWFsbHkgd2VpcmQgd2hlbiBldmVyeW9uZSAgIG5leHQgbW92aWUgICAgYXdheSBmcm9tIFNjaWVudGlzdHMgICAgaGF2ZSBuYW1lZCAgc3BlY2llcyAgZGlub3NhdXIgYWZ0ZXIgIGdpcmwgIGRpc2NvdmVyZWQgQWxzbyBEcmV3IEJhcnJ5bW9yZSAgICBUaGFuZGllIE5ld3RvbiBtdXNpYyBmcm9tIFRoYW5rICBKZW5uZSBNYXJpZSBQZWdneSAgZXZlcnlvbmUgIFNvb28gTWFyaW8gS2FydCBMb3ZlIFNvbmcgICBIYXJ0IE9iYW1hIEJpZGVuIHdlcmUgYm90aCAgICBjb3VudHJ5ICAgYnJpZ2h0IFNhc2hhIE1hbGlhIG1hbmFnZWQgIHRhbGsgICBpbnRvICBidWRnZXQgaGlnaGx5IHJlY29tbWVuZCBzZWVpbmcgR3JlYXQgYWx3YXlzIGdyZWF0ICAgIHNob3cgZ29ubmEgIHNvbWV0aGluZyBzaG93IHRvbmlnaHQgTmljb2xhcyBDZWxlYnJpdHkgIHBlcmZvcm1hbmNlIGZyb20gTG9uZyBsaXZlICBIaXN0b3J5IEFmdGVyIHN1Y2ggIGdyZWF0IHdlZWsgd2l0aCB3aGF0IGJldHRlciAgICAgd2l0aCBIaXN0b3J5ICAgICBiZXN0ICAgZnJvbSBBTUFaSU5HICBMYXRlIE5pZ2h0IFRhbGVudGVkIHN1cmUgIHdhdGNoICBMYXRlIE5pZ2h0IGdvbm5hIHJlY2VudCBTbm9vcCBEb2dnIHNhaWQgbGlrZSAgIGhpZ2ggd2l0aCBQcmVzaWRlbnQgT2JhbWEgIEJpbGwgVGhlbiBGcm9tIGxhc3QgY2hhbm5lbGluZyBXaW5kICAgIHNvbmcgIEdyb292ZSBNb3JlIG11c2ljICB3aXRoIEZyZWRkaWUgSGlnaG1vcmUgVHVybnMgICB3ZXJlIGJvdGggIHRoYXQgIENhbmFkaWFuIFNvYXAgT3BlcmEgTWljaGFlbCBNY0RvbmFsZCBjbG9uZWQgaGltc2VsZiAgc2FuZyAgWW91ciBhbm5vdW5jZWQgdG9kYXkgdGhhdCBNaWxleSBDeXJ1cyAgIExpYW0gYnJva2UgIGNpdGVkIHdyaXRlcnMgdGhvdWdodCBCaWxseSBKb2VsICBzYXlpbmcgc3RhcnQgICAgYWx3YXlzIHNhaWQgIHdvcnN0IHBsYXkgIGhhc2h0YWcgVHdlZXQgICBseXJpYyBtaXNoZWFyZCAgIHdpdGggIGNvdWxkIGNvbWluZyAgTW9yZSBBYmlnYWlsIEJyZXNsaW4gIFNwZWNpYWwgdGFsayB0aGF0ICBDb21pY3MgIGludHJvZHVjZSAgd29tYW4gIG5leHQgICBCYXRtYW4gIFJvYmluIFRvbmlnaHQgY29udGludWVzIHdpdGggYW5vdGhlciBzb25nIGZyb20gIGdyZWF0IENoYXJsZXMgQWxsaXNvbiBXaWxsaWFtcyBUb25pZ2h0IHN0YXJ0cyBKdXN0aW4gVGltYmVybGFrZSBqb2lucyAgICBmdWxsIHdlZWsgICBNdXNpYyBvdGhlciBwZXJzb24gZmlyZWQgZnJvbSB0b25pZ2h0ICAgIHNob3cgIGtub3cgICB3aWxsICBXYXRjaGluZyBleGNpdGVkICAgd2VlayAgTGF0ZSBKdXN0aW4gVGltYmVybGFrZSB3aWxsIHBsYXkgICBzb25nIGV2ZXJ5IE1heWJlIFdhdGNoICBob3N0ICBtdXNpY2FsIGd1ZXN0ICAgdGhlbiBzdGF5IGF3YWtlICBMYXRlIE5pZ2h0ICBuZXh0IHdlZWsgd2hlcmUgSnVzdGluIHdpbGwgcGxheSBldmVyeSBuaWdodCBHcmVhdCAgSm9pbnMgaGFuZHdyaXRpbmcgIG5ldmVyIGJlZW4gIG9uY2Ugc2lnbmVkICAgICAgdGhleSB0aG91Z2h0ICBzYWlkIGZlZWxpbmcgTmVlZCAgYm9vayBXaGF0IHNoYWxsIEdyb3Vwb24gZmlyZWQgIGZvdW5kZXIgICAgIGNvdWxkIHRlbGwgc29tZXRoaW5nICAgYmVjYXVzZSAgIHBhcmtpbmcgbWVtb3JhYmxlIGFubml2ZXJzYXJ5IEV2ZXJ5IGd1ZXN0ICBmYW50YXN0aWMgIFByaW5jZSBicm9rZSBIdWdlIHNob3cgUHJpbmNlIHdhbnQgICB0aGFuayAgICAgIHBlb3BsZSAgbWFrZSBMYXRlIE5pZ2h0IE1ha2luZyB3aXRoICBNY0NsdXJlIHNwZW5kaW5nIGN1dHMgYWxsb3dlZCBpbGxlZ2FsIGltbWlncmFudHMgICByZWxlYXNlZCBmcm9tIGphaWwgICAgb2ZmaWNpYWxzIFRpbmEgICAgIHNob3cgQmlsbCBOaWdoeSBtdXNpYyBmcm9tIE5pY2tlbG9kZW9uICBtYWtpbmcgIHNwaW5vZmYgIERvcmEgIEV4cGxvcmVyICB0aGV5IGZpbmFsbHkgYWRtaXR0ZWQgIG9yaWdpbmFsIFdvcmtlZCAgIHByb2R1Y2UgTmVlZGVkICByZWFjaCBzb21ldGhpbmcgICAgaGF2ZSBDbGltYmVkICBoZWFkcyBIYXNodGFnIENlbGVicml0eSBBcHByZW50aWNlIHN0YXJ0cyBzb29uICB0d2VldCAgZnVubnkgIGVtYmFycmFzc2luZyBzdG9yeSBhYm91dCAgdGltZSAgIGZpcmVkICAgd2l0aCBTZWFzb24gZmluYWxlICBHdXlzIFdpdGggS2lkcyB0b25pZ2h0ICAgIHlvdXIgVG9uaWdodCAgUmViZWNjYSBIYWxsIGNvbWVkaWFuICBHbGFzZXIgbXVzaWMgZnJvbSBUb25pZ2h0ICBoYXZlIG11c2ljIGZyb20gVW5rbm93biBNb3J0YWwgT3JjaGVzdHJhICByZXR1cm4gIENlbGxwaG9uZSBQcmluY2UgIGNvbWluZyAgTGF0ZSBOaWdodCB0aGlzICBCb251cyBzb25nIE5pY2UgbmlnaHQgIGxvbmcgaGFpcmVkIG1pbGxpb24gICAgd2l0aCBNaWNoZWxsZSBPYmFtYSB3aXRoIE1pY2hlbGxlIE9iYW1hIGhhdmUgICAgYmVzdCBzaG93cyBldmVyIGRvbmUgdG9uaWdodCB3aXRoICBNaWNoZWxsZSBTY2FybGV0dCBKb2hhbnNzb24gaG9ub3JlZCAgaGF2ZSAgIHNob3cgICBoYXZlICBjb21wZXRpdGlvbiAgIGNhbXBhaWduICB0aGlzIGdvbm5hIExhc3QgIGZvcm1lciAgICBtb250aHMgIHRyaWVkICB3b3JrIHRhbGVudGVkIEJyZWFrIEp1c3QgICAgd2l0aCAgTmFzc2F1IFRoZXkgc2Nob29sZWQgUmVzZWFyY2hlcnMgaGF2ZSBkaXNjb3ZlcmVkIHRoYXQgIGNoZW1pY2FsICAgYnJhaW4gY2F1c2VzIHdvbWVuICB0YWxrIG1vcmUgdGhhbiBjYWxsZWQgTG9va2luZyBmb3J3YXJkICBzcGVuZGluZyAgd2VlayB3aXRoICBmcmllbmQgTWFyY2ggQ2hlZiAgQ29tZSAgIGdpcmwgRXhjaXRlZCAgYW5ub3VuY2UgIFBsYXlTdGF0aW9uIHdpbGwgICB0b21vcnJvdyBMaXZlIGRlbW8gIFNoYWRvdyBIYXNodGFnIFR3ZWV0ICAgZmFrZSBzZXF1ZWwgdGl0bGUgICBPc2NhciBtb3ZpZSBmcm9tICB5ZWFyICAgd2l0aCBDb3VsZCBtdXNpYyBmcm9tIEF1ZGllbmNlIFN1Z2dlc3Rpb24gIFB1cHBpZXMgUGljayBXYWx0ZXIgIHJlZ3VsYXIgIHdpdGggIHJvYm90IHN0YXJyZWQgICB2ZXJ5ICBhY3Rpb24gbW92aWUgd2l0aCBDZWNpbHkgU3Ryb25nICBtdXNpYyBmcm9tIHNob3dzICAgY2xpcCBmcm9tIE1pY2hhZWwgSm9yZGFuIHR1cm5lZCAgU2NvdHRpZSBQaXBwZW4gYWN0dWFsbHkgaGVscGVkICBibG93ICAgIG5vYm9keSBzZWVtZWQgR29vZCBzaG93IEFydGllIExhbmdlIG11c2ljIGZyb20gVGhhbmsgdHJhdmVsICBiZWluZyBjb252ZW5pZW50ICBhYm91dCBtaW51dGVzICB0aGVuIGJlaW5nIHNvbWV0aGluZyAgaGF2ZSAgY2FycnkgYXJvdW5kIFRvbmlnaHQgICBncmVhdCBwbGF5aW5nIGJ1YmJsZSBzb2NjZXIgd2l0aCBtdXNpYyBmcm9tIENvbmdyYXRzICAgIG9mZmljaWFsIHZpZGVvIGRpcmVjdGVkICBEYXZpZCBMb29rcyBzaG93IHRhbGtpbmcgYWJvdXQgICAgSGFyZCBtb3ZpZSBCcnVjZSBXaWxsaXMgICBMYXRlIEVuZGVkICB2ZXJ5IGZpcnN0IGRhdGUgICAgdGhlbiAgIGRyb3ZlIEFsc28gIHR1cm5zICB0aGlzICByZWN0YWwgR2FyeSAgICBpbnZlbnRpb24gY2FsbGVkICAgYnJhbmQgIEd1eXMgV2l0aCBLaWRzIFRvbmlnaHQgIExhdGUgIG11c2ljIGZyb20gIGF3ZXNvbWUgZmlyc3QgICBTb21lIENhdGhvbGljcyBnaXZlICBzb21lIGdpdmUgICAgIGdpdmluZyBMYXN0IEdvdHllICBSZWNvcmQgICBQYXJlbnRzIHdlcmUgd2hpbGUgdGhlaXIga2lkcyB3ZXJlIGdyZWF0IEpvaG4gIG11c2ljIGZyb20gd2VyZSAgIHRhYmxlIHdoZW4gICAgdGhhbmsgU3VjaCAgaG9ub3IgICBub21pbmF0ZWQgICBCZXN0IENvbWVkeSBBbGJ1bSB3aXRoICAgb3RoZXIgYW1hemluZyAgICAgdGhlbSBUaGFuayAgICAgIEZhbFBhbHMgIHN1cHBvcnRpbmcgIGNvbWVkeSBhbGJ1bSBZb3VyIFBhbnRzICBub21pbmF0ZWQgTGF0ZSBZb3VUdWJlIHNob3VsZCAgd29ya2luZyBUaGFuayAgICBub3RpZnlpbmcgV2F0Y2ggdGhpcyBza2V0Y2ggICAgICBoYXZlICAgIEphc29uIFNjaHdhcnR6bWFuIGJsb2NrZWQgIEt1d2FpdCBicmluZyAgcGVhY2UgICBNaWRkbGUgIGxvdmUgQXVzdHJhbGlhIHBsZWFzZSAgIG5lZWQgIEZhbGxvbiBrbm93ICB3b3VsZCBzdG9wIENhbmFkYSAgIGZyb20gc2VlaW5nICBsb29raW5nIGludG8gIGxvdmUgZXZlbiBzdXJlIHdoYXQgIHRoaW5rIGFib3V0IHRoYXQgaHVtYW4gICB3ZWlyZCAgdGFrZSB3ZWlyZGVzdCBza2V0Y2ggZXZlciBkb25lIHdyaXR0ZW4gICBhYm91dCAgIEhlYWQgYWx3YXlzICB0aGlzIGtub3cgIGNvdWxkIGZhbGwgIGxvdmUgd2l0aCAgc291bmQgSnVzdCBmaW5pc2hlZCBMb3ZlZCBDb25ncmF0cyBEYXZlIFRoYW5rICBkaWFncmFtICBjaG9jb2xhdGVzICAgaW5zaWRlICAgU2FtcGxlciAgIGJlaW5nIGxpa2UgdHJlYXN1cmUgbWFwcyBUb25pZ2h0ICBKYXNvbiBLZXJpIG11c2ljIGZyb20gVGhhbmsgTWF5b3IgQmxvb21iZXJnICBjb25zaWRlcmluZyAgICBTdHlyb2ZvYW0gIHRoaXMgcG9pbnQgc3RhcnRpbmcgIHRoaW5rIHNsZXB0IHdpdGggU3RldmUgSGlnZ2lucyBzaG91bGQgICBFbW15IG5vbWluYXRpb24gICBwZXJmb3JtYW5jZSBsYXN0IG5pZ2h0ICAgRG93bnRvbiBBYmJleSBGZWRlcmFsIFJlc2VydmUgIGp1c3QgIHRoZXkgICBoYWNrZXJzIHN0b2xlbiAgbXVjaCAgbmVnYXRpdmUgdHJpbGxpb24gZnJvbSBUb21teSBjb21lZGlhbiAgY29uY2x1c2lvbiAgRG93bnRvbiBHdXlzIFdpdGggS2lkcyBzaG93IHByb2R1Y2luZyAgdG9uaWdodCAgZ3Vlc3Qgc3RhcnMgICB0dW5lIE11c2ljIGZyb20gICByZXR1cm4gIERvd250b24gUnVzc2VsbCBCcmFuZCBSZWFkcyB3aXRoIG1vc3QgYmVhdXRpZnVsIHNvbmcgIGV2ZXIgcGxheWVkICB0aGlzICAgICBBbnl0aGluZyBZb3VyIFZpZXdlcnMgdGhvdWdodCAgd29yc3QgU3VwZXIgQm93bCAgIEdvRGFkZHkgd2hlcmUgIFJhZmFlbGkgbWFkZSAgd2l0aCAgICAgbmVyZCBzYWlkIFRoYW5rcyAgIGxlbmRpbmcgICBHdXlzIFdpdGggIHBsYXlzICBtYW5seSBXZWRuZXNkYXkgVG9uaWdodCAgUnVzc2VsbCBCcmFuZCAgIHBlcmZvcm1hbmNlIGZyb20gQmV5b25jZSBsaXRlcmFsbHkga2lsbGVkICAgIFN1cGVyIFRpbWUgIHBsYXkgZ3Vlc3MgcmVhZHkgICBnYW1lIGNoZWNrICAgTGF0ZSBOaWdodCBTdXBlcmZhbiBTdXBlcmN1dCBzdXJ2ZXkgZm91bmQgIEFtZXJpY2FucyB0aGluayAgcGxheXMgIHJvbGUgICB3aW5zICBTdXBlciBUaGVuICBUZWJvdyBab3NpYSBNYW1ldCBmcm9tIG11c2ljIGZyb20gIGNsaXAgZnJvbSAgIENhbmFkaWFuIHNvYXAgZnVsbCBsZW5ndGggdmVyc2lvbiAgICAgV2F0Y2ggICAgIGhlbHBlZCBUaGlzIHdlZWtlbmQgIFN1cGVyIEJvd2wgR3JvdW5kaG9nICB0aGlzICAgZ3JvdW5kaG9nIHNlZXMgIHNoYWRvdyAgbWVhbnMgbW9yZSBraWRzIHNob3cgIHRpbWVzIHdpdGggY29va2luZyB3aXRoIEhvdXIgQ2hlZiBhdXRob3IgTmlnaHQgTmV3cyBDYWxpZm9ybmlhICBzYWlkICBtb25rZXkgcGlja2VkICAgICBTdXBlciAgIGRlZXIgcGlja2VkIGFpcnMgIE1vcmUgb25jZSBicm91Z2h0IGNsYW0gICBUcmlzY3VpdHMgICBTdXBlciBCb3dsIEhhc2h0YWcgVHdlZXQgIGZ1bm55ICB3ZWlyZCBzdG9yeSBhYm91dCAgc3VwZXJib3dsIHBhcnR5IGJlZW4gICAgQ291bGQgSGlnZ2lucyAgIGZ1bm55IGFnYWluICAgbW9ub2xvZ3VlICBsb3ZlICAgV2F0Y2ggICAgc29tZXRoaW5nIGxpa2UgSnVzdGluIEJpZWJlciAgYmVpbmcgaW52ZXN0aWdhdGVkICBoaXR0aW5nICBzZWN1cml0eSBndWFyZCB3aXRoICBOZXJmIEJpZWJlciBjb3VsZCBmYWNlICAgbW9udGhzICB0aW1lIHNob3cgTHVjeSBCaWxseSAgbXVzaWMgZnJvbSAgcmV0dXJuICBMYXRlIE5pZ2h0IFNob3V0IFNsb3cgICBOZXdzIHdpdGggICBCcmlXaWxsaWUgQnJpYW4gV2lsbGlhbXMgIEdyZWVuZmllbGQgbXVzaWMgZnJvbSBrbm93IHdoYXQgTGF0ZSBOaWdodCAgdGhlbiB3YXRjaCBVcGxvYWQgeW91ciBXaG9vb3MgVGhpcyAgS2VlcCB0aGVtICAgdGhpcyAgIGZhdm9yaXRlIExhdGUgTmlnaHQgU3VwZXIgVGhhbmtzICBMYWtlIFBsYWNpZCBNYXVpIE5vcnRoICAgbG9jYWxzICBMYWtlICBzaGFsbCBUaGFuayBMYW5jZSAgc2l0dGluZyBkb3duIHdpdGggT3ByYWggbGFzdCAgbWlzc2VkICAgIGhlYXJkIEplc3NpY2EgQWxhbiBtdXNpYyBmcm9tIFRoYW5rIEFybm9sZCBzaG93ZWQgIHNvbWUgICAgY29tbWVudGFyaWVzIGxhc3QgYWRkcyAgY29tbWVudGFyeSAgc29tZSAgIG90aGVyIFRvbGQgIHRlYWNoICBhYm91dCBNYWRlIE1hbnRpICBoYXZlIG1hZGUgICBnaXJsZnJpZW5kIHRoZW4gbGllZCBhYm91dCAgICAgIGdvbm5hIGhhdmUgIHRhbGsgIE9wcmFoIEdyZWF0IHNob3cgIGxlZ2VuZGFyeSBBcm5vbGQgIG11c2ljIGZyb20gd2FudCAgIHRoaXMgcmVhbGx5IGxpa2UgIHNob3dzIGFib3V0IHlvdW5nIGZhbWlsaWVzIEd1eXMgV2l0aCBLaWRzICAgdG9uaWdodCBwbGF5ICBoYXNodGFnIFR3ZWV0IHNvbWV0aGluZyB3ZWlyZCAgZmluYWxseSByZWFkeSAgYWRtaXQgICBDb3VsZCBTdWdhcmJveSAgYnJpZWYgY2FtZW8gZnJvbSAgY2FsbGVkICAgTGlrZSBzaG93ICAgVHVybiBpbnRlcnZpZXcgd2l0aCBMYW5jZSBBcm1zdHJvbmcgc3VwcG9zZWRseSBsYXN0ZWQgbmVhcmx5ICBzb3J0ICBsaWtlICByZWd1bGFyIEdvbm5hIGRyb3Agc29tZSBrbm93bGVkZ2Ugd2l0aCAgIHRvbmlnaHQgIExhdGUgU2hvb3RpbmcgRG93bnRvbiBTaXhiZXkgd2l0aCBBcm1pc2VuIFRoaXMgIFJhdmVucyBiZWF0ICBCcm9uY29zICAgc2F5aW5nICB3ZW50ICAgZXZlbiBKb2RpZSBGb3N0ZXIgIGxpa2UgQmFjayAgIGVhc3QgY29hc3QgIGJhY2sgd2l0aCAgc2hvdyB0b25pZ2h0IHdpdGggd291bmQgIGV4Y2hhbmdpbmcgIHNhbWUgIGdpZnRlZCBnaWZ0cyAgIGdpZnRlZCBsYXN0IEJleW9uY2UgIHJldW5pdGluZyB3aXRoIENoaWxkICAgU3VwZXIgIHJ1bW9yICAgdGhleSBmaW5hbGx5IHRoaW5rIHJlYWR5ICB0aGF0IERhdmlkIG11c2ljIGZyb20gVGhhbmsgT2JhbWEgY2FtZSB1bmRlciBmaXJlIGZyb20gICBvdmVyICBsYWNrICBkaXZlcnNpdHkgICBPYmFtYSAgbGlrZSBrbm93ICB0aGVyZSBjYXN0ICBKYW5lIEphY2sgIHRhbGsgYWJvdXQgdGhlaXIgZmF2b3JpdGUgbW9tZW50cyBmcm9tIFRoYW5rICBDaG9pY2UgTGFuY2UgQXJtc3Ryb25nIHdpbGwgICB0YWxrIHdpdGggVGhvdWdoICBraW5kICBzdXNwaWNpb3VzIHdoZW4gIGZpbmlzaGVzICBqdXN0IA==</textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>